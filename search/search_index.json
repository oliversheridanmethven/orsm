{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Testing","text":""},{"location":"index.html#author","title":"Author","text":"<p>Dr Oliver Sheridan-Methven  oliver.sheridan-methven@hotmail.co.uk.</p>"},{"location":"index.html#description","title":"Description","text":"<p>A collection of various code snippets designed to  test various ideas and code fragments, akin to a code scratch space. </p>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>The full documentation can be found here: Documentation.</p>"},{"location":"bin/index.html","title":"Binaries","text":"<p>This folder exists for developers to put binaries  produced from in source builds. </p>"},{"location":"build/index.html","title":"Build","text":"<p>Details about how to build this project.  </p>"},{"location":"build/_deps/googletest-src/index.html","title":"GoogleTest","text":""},{"location":"build/_deps/googletest-src/index.html#announcements","title":"Announcements","text":""},{"location":"build/_deps/googletest-src/index.html#live-at-head","title":"Live at Head","text":"<p>GoogleTest now follows the Abseil Live at Head philosophy. We recommend using the latest commit in the <code>master</code> branch in your projects.</p>"},{"location":"build/_deps/googletest-src/index.html#documentation-updates","title":"Documentation Updates","text":"<p>Our documentation is now live on GitHub Pages at https://google.github.io/googletest/. We recommend browsing the documentation on GitHub Pages rather than directly in the repository.</p>"},{"location":"build/_deps/googletest-src/index.html#release-110x","title":"Release 1.10.x","text":"<p>Release 1.10.x is now available.</p>"},{"location":"build/_deps/googletest-src/index.html#coming-soon","title":"Coming Soon","text":"<ul> <li>We are planning to take a dependency on     Abseil.</li> <li>More documentation improvements are planned.</li> </ul>"},{"location":"build/_deps/googletest-src/index.html#welcome-to-googletest-googles-c-test-framework","title":"Welcome to GoogleTest, Google's C++ test framework!","text":"<p>This repository is a merger of the formerly separate GoogleTest and GoogleMock projects. These were so closely related that it makes sense to maintain and release them together.</p>"},{"location":"build/_deps/googletest-src/index.html#getting-started","title":"Getting Started","text":"<p>See the GoogleTest User's Guide for documentation. We recommend starting with the GoogleTest Primer.</p> <p>More information about building GoogleTest can be found at googletest/README.md.</p>"},{"location":"build/_deps/googletest-src/index.html#features","title":"Features","text":"<ul> <li>An xUnit test framework.</li> <li>Test discovery.</li> <li>A rich set of assertions.</li> <li>User-defined assertions.</li> <li>Death tests.</li> <li>Fatal and non-fatal failures.</li> <li>Value-parameterized tests.</li> <li>Type-parameterized tests.</li> <li>Various options for running the tests.</li> <li>XML test report generation.</li> </ul>"},{"location":"build/_deps/googletest-src/index.html#supported-platforms","title":"Supported Platforms","text":"<p>GoogleTest requires a codebase and compiler compliant with the C++11 standard or newer.</p> <p>The GoogleTest code is officially supported on the following platforms. Operating systems or tools not listed below are community-supported. For community-supported platforms, patches that do not complicate the code may be considered.</p> <p>If you notice any problems on your platform, please file an issue on the GoogleTest GitHub Issue Tracker. Pull requests containing fixes are welcome!</p>"},{"location":"build/_deps/googletest-src/index.html#operating-systems","title":"Operating Systems","text":"<ul> <li>Linux</li> <li>macOS</li> <li>Windows</li> </ul>"},{"location":"build/_deps/googletest-src/index.html#compilers","title":"Compilers","text":"<ul> <li>gcc 5.0+</li> <li>clang 5.0+</li> <li>MSVC 2015+</li> </ul> <p>macOS users: Xcode 9.3+ provides clang 5.0+.</p>"},{"location":"build/_deps/googletest-src/index.html#build-systems","title":"Build Systems","text":"<ul> <li>Bazel</li> <li>CMake</li> </ul> <p>Note: Bazel is the build system used by the team internally and in tests. CMake is supported on a best-effort basis and by the community.</p>"},{"location":"build/_deps/googletest-src/index.html#who-is-using-googletest","title":"Who Is Using GoogleTest?","text":"<p>In addition to many internal projects at Google, GoogleTest is also used by the following notable projects:</p> <ul> <li>The Chromium projects (behind the Chrome browser     and Chrome OS).</li> <li>The LLVM compiler.</li> <li>Protocol Buffers, Google's data     interchange format.</li> <li>The OpenCV computer vision library.</li> </ul>"},{"location":"build/_deps/googletest-src/index.html#related-open-source-projects","title":"Related Open Source Projects","text":"<p>GTest Runner is a Qt5 based automated test-runner and Graphical User Interface with powerful features for Windows and Linux platforms.</p> <p>GoogleTest UI is a test runner that runs your test binary, allows you to track its progress via a progress bar, and displays a list of test failures. Clicking on one shows failure text. Google Test UI is written in C#.</p> <p>GTest TAP Listener is an event listener for GoogleTest that implements the TAP protocol for test result output. If your test runner understands TAP, you may find it useful.</p> <p>gtest-parallel is a test runner that runs tests from your binary in parallel to provide significant speed-up.</p> <p>GoogleTest Adapter is a VS Code extension allowing to view GoogleTest in a tree view, and run/debug your tests.</p> <p>C++ TestMate is a VS Code extension allowing to view GoogleTest in a tree view, and run/debug your tests.</p> <p>Cornichon is a small Gherkin DSL parser that generates stub code for GoogleTest.</p>"},{"location":"build/_deps/googletest-src/index.html#contributing-changes","title":"Contributing Changes","text":"<p>Please read <code>CONTRIBUTING.md</code> for details on how to contribute to this project.</p> <p>Happy testing!</p>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html","title":"How to become a contributor and submit your own code","text":""},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#contributor-license-agreements","title":"Contributor License Agreements","text":"<p>We'd love to accept your patches! Before we can take them, we have to jump a couple of legal hurdles.</p> <p>Please fill out either the individual or corporate Contributor License Agreement (CLA).</p> <ul> <li>If you are an individual writing original source code and you're sure you     own the intellectual property, then you'll need to sign an     individual CLA.</li> <li>If you work for a company that wants to allow you to contribute your work,     then you'll need to sign a     corporate CLA.</li> </ul> <p>Follow either of the two links above to access the appropriate CLA and instructions for how to sign and return it. Once we receive it, we'll be able to accept your pull requests.</p>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#are-you-a-googler","title":"Are you a Googler?","text":"<p>If you are a Googler, please make an attempt to submit an internal change rather than a GitHub Pull Request. If you are not able to submit an internal change a PR is acceptable as an alternative.</p>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#contributing-a-patch","title":"Contributing A Patch","text":"<ol> <li>Submit an issue describing your proposed change to the     issue tracker.</li> <li>Please don't mix more than one logical change per submittal, because it     makes the history hard to follow. If you want to make a change that doesn't     have a corresponding issue in the issue tracker, please create one.</li> <li>Also, coordinate with team members that are listed on the issue in question.     This ensures that work isn't being duplicated and communicating your plan     early also generally leads to better patches.</li> <li>If your proposed change is accepted, and you haven't already done so, sign a     Contributor License Agreement (see details above).</li> <li>Fork the desired repo, develop and test your code changes.</li> <li>Ensure that your code adheres to the existing style in the sample to which     you are contributing.</li> <li>Ensure that your code has an appropriate set of unit tests which all pass.</li> <li>Submit a pull request.</li> </ol>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#the-google-test-and-google-mock-communities","title":"The Google Test and Google Mock Communities","text":"<p>The Google Test community exists primarily through the discussion group and the GitHub repository. Likewise, the Google Mock community exists primarily through their own discussion group. You are definitely encouraged to contribute to the discussion and you can also help us to keep the effectiveness of the group high by following and promoting the guidelines listed here.</p>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#please-be-friendly","title":"Please Be Friendly","text":"<p>Showing courtesy and respect to others is a vital part of the Google culture, and we strongly encourage everyone participating in Google Test development to join us in accepting nothing less. Of course, being courteous is not the same as failing to constructively disagree with each other, but it does mean that we should be respectful of each other when enumerating the 42 technical reasons that a particular proposal may not be the best choice. There's never a reason to be antagonistic or dismissive toward anyone who is sincerely trying to contribute to a discussion.</p> <p>Sure, C++ testing is serious business and all that, but it's also a lot of fun. Let's keep it that way. Let's strive to be one of the friendliest communities in all of open source.</p> <p>As always, discuss Google Test in the official GoogleTest discussion group. You don't have to actually submit code in order to sign up. Your participation itself is a valuable contribution.</p>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#style","title":"Style","text":"<p>To keep the source consistent, readable, diffable and easy to merge, we use a fairly rigid coding style, as defined by the google-styleguide project. All patches will be expected to conform to the style outlined here. Use .clang-format to check your formatting.</p>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#requirements-for-contributors","title":"Requirements for Contributors","text":"<p>If you plan to contribute a patch, you need to build Google Test, Google Mock, and their own tests from a git checkout, which has further requirements:</p> <ul> <li>Python v2.3 or newer (for running some of the     tests and re-generating certain source files from templates)</li> <li>CMake v2.8.12 or newer</li> </ul>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#developing-google-test-and-google-mock","title":"Developing Google Test and Google Mock","text":"<p>This section discusses how to make your own changes to the Google Test project.</p>"},{"location":"build/_deps/googletest-src/CONTRIBUTING.html#testing-google-test-and-google-mock-themselves","title":"Testing Google Test and Google Mock Themselves","text":"<p>To make sure your changes work as intended and don't break existing functionality, you'll want to compile and run Google Test and GoogleMock's own tests. For that you can use CMake:</p> <pre><code>mkdir mybuild\ncd mybuild\ncmake -Dgtest_build_tests=ON -Dgmock_build_tests=ON ${GTEST_REPO_DIR}\n</code></pre> <p>To choose between building only Google Test or Google Mock, you may modify your cmake command to be one of each</p> <pre><code>cmake -Dgtest_build_tests=ON ${GTEST_DIR} # sets up Google Test tests\ncmake -Dgmock_build_tests=ON ${GMOCK_DIR} # sets up Google Mock tests\n</code></pre> <p>Make sure you have Python installed, as some of Google Test's tests are written in Python. If the cmake command complains about not being able to find Python (<code>Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)</code>), try telling it explicitly where your Python executable can be found:</p> <pre><code>cmake -DPYTHON_EXECUTABLE=path/to/python ...\n</code></pre> <p>Next, you can build Google Test and / or Google Mock and all desired tests. On *nix, this is usually done by</p> <pre><code>make\n</code></pre> <p>To run the tests, do</p> <pre><code>make test\n</code></pre> <p>All tests should pass.</p>"},{"location":"build/_deps/googletest-src/docs/index.html","title":"GoogleTest User's Guide","text":""},{"location":"build/_deps/googletest-src/docs/index.html#welcome-to-googletest","title":"Welcome to GoogleTest!","text":"<p>GoogleTest is Google's C++ testing and mocking framework. This user's guide has the following contents:</p> <ul> <li>GoogleTest Primer - Teaches you how to write simple tests using     GoogleTest. Read this first if you are new to GoogleTest.</li> <li>GoogleTest Advanced - Read this when you've finished the     Primer and want to utilize GoogleTest to its full potential.</li> <li>GoogleTest Samples - Describes some GoogleTest samples.</li> <li>GoogleTest FAQ - Have a question? Want some tips? Check here     first.</li> <li>Mocking for Dummies - Teaches you how to create mock     objects and use them in tests.</li> <li>Mocking Cookbook - Includes tips and approaches to     common mocking use cases.</li> <li>Mocking Cheat Sheet - A handy reference for     matchers, actions, invariants, and more.</li> <li>Mocking FAQ - Contains answers to some mocking-specific     questions.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/advanced.html","title":"Advanced googletest Topics","text":""},{"location":"build/_deps/googletest-src/docs/advanced.html#introduction","title":"Introduction","text":"<p>Now that you have read the googletest Primer and learned how to write tests using googletest, it's time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#more-assertions","title":"More Assertions","text":"<p>This section covers some less frequently used, but still significant, assertions.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#explicit-success-and-failure","title":"Explicit Success and Failure","text":"<p>See Explicit Success and Failure in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#exception-assertions","title":"Exception Assertions","text":"<p>See Exception Assertions in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#predicate-assertions-for-better-error-messages","title":"Predicate Assertions for Better Error Messages","text":"<p>Even though googletest has a rich set of assertions, they can never be complete, as it's impossible (nor a good idea) to anticipate all scenarios a user might run into. Therefore, sometimes a user has to use <code>EXPECT_TRUE()</code> to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into <code>EXPECT_TRUE()</code>. However, this is awkward especially when the expression has side-effects or is expensive to evaluate.</p> <p>googletest gives you three different options to solve this problem:</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#using-an-existing-boolean-function","title":"Using an Existing Boolean Function","text":"<p>If you already have a function or functor that returns <code>bool</code> (or a type that can be implicitly converted to <code>bool</code>), you can use it in a predicate assertion to get the function arguments printed for free. See <code>EXPECT_PRED*</code> in the Assertions Reference for details.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#using-a-function-that-returns-an-assertionresult","title":"Using a Function That Returns an AssertionResult","text":"<p>While <code>EXPECT_PRED*()</code> and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The <code>::testing::AssertionResult</code> class solves this problem.</p> <p>An <code>AssertionResult</code> object represents the result of an assertion (whether it's a success or a failure, and an associated message). You can create an <code>AssertionResult</code> using one of these factory functions:</p> <pre><code>namespace testing {\n\n// Returns an AssertionResult object to indicate that an assertion has\n// succeeded.\nAssertionResult AssertionSuccess();\n\n// Returns an AssertionResult object to indicate that an assertion has\n// failed.\nAssertionResult AssertionFailure();\n\n}\n</code></pre> <p>You can then use the <code>&lt;&lt;</code> operator to stream messages to the <code>AssertionResult</code> object.</p> <p>To provide more readable messages in Boolean assertions (e.g. <code>EXPECT_TRUE()</code>), write a predicate function that returns <code>AssertionResult</code> instead of <code>bool</code>. For example, if you define <code>IsEven()</code> as:</p> <pre><code>testing::AssertionResult IsEven(int n) {\n  if ((n % 2) == 0)\n    return testing::AssertionSuccess();\n  else\n    return testing::AssertionFailure() &lt;&lt; n &lt;&lt; \" is odd\";\n}\n</code></pre> <p>instead of:</p> <pre><code>bool IsEven(int n) {\n  return (n % 2) == 0;\n}\n</code></pre> <p>the failed assertion <code>EXPECT_TRUE(IsEven(Fib(4)))</code> will print:</p> <pre><code>Value of: IsEven(Fib(4))\n  Actual: false (3 is odd)\nExpected: true\n</code></pre> <p>instead of a more opaque</p> <pre><code>Value of: IsEven(Fib(4))\n  Actual: false\nExpected: true\n</code></pre> <p>If you want informative messages in <code>EXPECT_FALSE</code> and <code>ASSERT_FALSE</code> as well (one third of Boolean assertions in the Google code base are negative ones), and are fine with making the predicate slower in the success case, you can supply a success message:</p> <pre><code>testing::AssertionResult IsEven(int n) {\n  if ((n % 2) == 0)\n    return testing::AssertionSuccess() &lt;&lt; n &lt;&lt; \" is even\";\n  else\n    return testing::AssertionFailure() &lt;&lt; n &lt;&lt; \" is odd\";\n}\n</code></pre> <p>Then the statement <code>EXPECT_FALSE(IsEven(Fib(6)))</code> will print</p> <pre><code>  Value of: IsEven(Fib(6))\n     Actual: true (8 is even)\n  Expected: false\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#using-a-predicate-formatter","title":"Using a Predicate-Formatter","text":"<p>If you find the default message generated by <code>EXPECT_PRED*</code> and <code>EXPECT_TRUE</code> unsatisfactory, or some arguments to your predicate do not support streaming to <code>ostream</code>, you can instead use predicate-formatter assertions to fully customize how the message is formatted. See <code>EXPECT_PRED_FORMAT*</code> in the Assertions Reference for details.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#floating-point-comparison","title":"Floating-Point Comparison","text":"<p>See Floating-Point Comparison in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#floating-point-predicate-format-functions","title":"Floating-Point Predicate-Format Functions","text":"<p>Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in the predicate assertion macro <code>EXPECT_PRED_FORMAT2</code>, for example:</p> <pre><code>EXPECT_PRED_FORMAT2(testing::FloatLE, val1, val2);\nEXPECT_PRED_FORMAT2(testing::DoubleLE, val1, val2);\n</code></pre> <p>The above code verifies that <code>val1</code> is less than, or approximately equal to, <code>val2</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#asserting-using-gmock-matchers","title":"Asserting Using gMock Matchers","text":"<p>See <code>EXPECT_THAT</code> in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#more-string-assertions","title":"More String Assertions","text":"<p>(Please read the previous section first if you haven't.)</p> <p>You can use the gMock string matchers with <code>EXPECT_THAT</code> to do more string comparison tricks (sub-string, prefix, suffix, regular expression, and etc). For example,</p> <pre><code>using ::testing::HasSubstr;\nusing ::testing::MatchesRegex;\n...\n  ASSERT_THAT(foo_string, HasSubstr(\"needle\"));\n  EXPECT_THAT(bar_string, MatchesRegex(\"\\\\w*\\\\d+\"));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#windows-hresult-assertions","title":"Windows HRESULT assertions","text":"<p>See Windows HRESULT Assertions in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#type-assertions","title":"Type Assertions","text":"<p>You can call the function</p> <pre><code>::testing::StaticAssertTypeEq&lt;T1, T2&gt;();\n</code></pre> <p>to assert that types <code>T1</code> and <code>T2</code> are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, the compiler error message will say that <code>T1 and T2 are not the same type</code> and most likely (depending on the compiler) show you the actual values of <code>T1</code> and <code>T2</code>. This is mainly useful inside template code.</p> <p>Caveat: When used inside a member function of a class template or a function template, <code>StaticAssertTypeEq&lt;T1, T2&gt;()</code> is effective only if the function is instantiated. For example, given:</p> <pre><code>template &lt;typename T&gt; class Foo {\n public:\n  void Bar() { testing::StaticAssertTypeEq&lt;int, T&gt;(); }\n};\n</code></pre> <p>the code:</p> <pre><code>void Test1() { Foo&lt;bool&gt; foo; }\n</code></pre> <p>will not generate a compiler error, as <code>Foo&lt;bool&gt;::Bar()</code> is never actually instantiated. Instead, you need:</p> <pre><code>void Test2() { Foo&lt;bool&gt; foo; foo.Bar(); }\n</code></pre> <p>to cause a compiler error.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#assertion-placement","title":"Assertion Placement","text":"<p>You can use assertions in any C++ function. In particular, it doesn't have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure (<code>FAIL*</code> and <code>ASSERT_*</code>) can only be used in void-returning functions. This is a consequence of Google's not using exceptions. By placing it in a non-void function you'll get a confusing compile error like <code>\"error: void value not ignored as it ought to be\"</code> or <code>\"cannot initialize return object of type 'bool' with an rvalue of type 'void'\"</code> or <code>\"error: no viable conversion from 'void' to 'string'\"</code>.</p> <p>If you need to use fatal assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite <code>T2 Foo(T1 x)</code> to <code>void Foo(T1 x, T2* result)</code>. You need to make sure that <code>*result</code> contains some sensible value even when the function returns prematurely. As the function now returns <code>void</code>, you can use any assertion inside of it.</p> <p>If changing the function's type is not an option, you should just use assertions that generate non-fatal failures, such as <code>ADD_FAILURE*</code> and <code>EXPECT_*</code>.</p> <p>{: .callout .note} NOTE: Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them; you'll get a compilation error if you try. Instead, either call <code>abort</code> and crash the entire test executable, or put the fatal assertion in a <code>SetUp</code>/<code>TearDown</code> function; see constructor/destructor vs. <code>SetUp</code>/<code>TearDown</code></p> <p>{: .callout .warning} WARNING: A fatal assertion in a helper function (private void-returning method) called from a constructor or destructor does not terminate the current test, as your intuition might suggest: it merely returns from the constructor or destructor early, possibly leaving your object in a partially-constructed or partially-destructed state! You almost certainly want to <code>abort</code> or use <code>SetUp</code>/<code>TearDown</code> instead.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#skipping-test-execution","title":"Skipping test execution","text":"<p>Related to the assertions <code>SUCCEED()</code> and <code>FAIL()</code>, you can prevent further test execution at runtime with the <code>GTEST_SKIP()</code> macro. This is useful when you need to check for preconditions of the system under test during runtime and skip tests in a meaningful way.</p> <p><code>GTEST_SKIP()</code> can be used in individual test cases or in the <code>SetUp()</code> methods of classes derived from either <code>::testing::Environment</code> or <code>::testing::Test</code>. For example:</p> <pre><code>TEST(SkipTest, DoesSkip) {\n  GTEST_SKIP() &lt;&lt; \"Skipping single test\";\n  EXPECT_EQ(0, 1);  // Won't fail; it won't be executed\n}\n\nclass SkipFixture : public ::testing::Test {\n protected:\n  void SetUp() override {\n    GTEST_SKIP() &lt;&lt; \"Skipping all tests for this fixture\";\n  }\n};\n\n// Tests for SkipFixture won't be executed.\nTEST_F(SkipFixture, SkipsOneTest) {\n  EXPECT_EQ(5, 7);  // Won't fail\n}\n</code></pre> <p>As with assertion macros, you can stream a custom message into <code>GTEST_SKIP()</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#teaching-googletest-how-to-print-your-values","title":"Teaching googletest How to Print Your Values","text":"<p>When a test assertion such as <code>EXPECT_EQ</code> fails, googletest prints the argument values to help you debug. It does this using a user-extensible value printer.</p> <p>This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the <code>&lt;&lt;</code> operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out.</p> <p>As mentioned earlier, the printer is extensible. That means you can teach it to do a better job at printing your particular type than to dump the bytes. To do that, define <code>&lt;&lt;</code> for your type:</p> <pre><code>#include &lt;ostream&gt;\n\nnamespace foo {\n\nclass Bar {  // We want googletest to be able to print instances of this.\n...\n  // Create a free inline friend function.\n  friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Bar&amp; bar) {\n    return os &lt;&lt; bar.DebugString();  // whatever needed to print bar to os\n  }\n};\n\n// If you can't declare the function in the class it's important that the\n// &lt;&lt; operator is defined in the SAME namespace that defines Bar.  C++'s look-up\n// rules rely on that.\nstd::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Bar&amp; bar) {\n  return os &lt;&lt; bar.DebugString();  // whatever needed to print bar to os\n}\n\n}  // namespace foo\n</code></pre> <p>Sometimes, this might not be an option: your team may consider it bad style to have a <code>&lt;&lt;</code> operator for <code>Bar</code>, or <code>Bar</code> may already have a <code>&lt;&lt;</code> operator that doesn't do what you want (and you cannot change it). If so, you can instead define a <code>PrintTo()</code> function like this:</p> <pre><code>#include &lt;ostream&gt;\n\nnamespace foo {\n\nclass Bar {\n  ...\n  friend void PrintTo(const Bar&amp; bar, std::ostream* os) {\n    *os &lt;&lt; bar.DebugString();  // whatever needed to print bar to os\n  }\n};\n\n// If you can't declare the function in the class it's important that PrintTo()\n// is defined in the SAME namespace that defines Bar.  C++'s look-up rules rely\n// on that.\nvoid PrintTo(const Bar&amp; bar, std::ostream* os) {\n  *os &lt;&lt; bar.DebugString();  // whatever needed to print bar to os\n}\n\n}  // namespace foo\n</code></pre> <p>If you have defined both <code>&lt;&lt;</code> and <code>PrintTo()</code>, the latter will be used when googletest is concerned. This allows you to customize how the value appears in googletest's output without affecting code that relies on the behavior of its <code>&lt;&lt;</code> operator.</p> <p>If you want to print a value <code>x</code> using googletest's value printer yourself, just call <code>::testing::PrintToString(x)</code>, which returns an <code>std::string</code>:</p> <pre><code>vector&lt;pair&lt;Bar, int&gt; &gt; bar_ints = GetBarIntVector();\n\nEXPECT_TRUE(IsCorrectBarIntVector(bar_ints))\n    &lt;&lt; \"bar_ints = \" &lt;&lt; testing::PrintToString(bar_ints);\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#death-tests","title":"Death Tests","text":"<p>In many applications, there are assertions that can cause application failure if a condition is not met. These sanity checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.</p> <p>Since these precondition checks cause the processes to die, we call such tests death tests. More generally, any test that checks that a program terminates (except by throwing an exception) in an expected fashion is also a death test.</p> <p>Note that if a piece of code throws an exception, we don't consider it \"death\" for the purpose of death tests, as the caller of the code could catch the exception and avoid the crash. If you want to verify exceptions thrown by your code, see Exception Assertions.</p> <p>If you want to test <code>EXPECT_*()/ASSERT_*()</code> failures in your test code, see \"Catching\" Failures.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#how-to-write-a-death-test","title":"How to Write a Death Test","text":"<p>GoogleTest provides assertion macros to support death tests. See Death Assertions in the Assertions Reference for details.</p> <p>To write a death test, simply use one of the macros inside your test function. For example,</p> <pre><code>TEST(MyDeathTest, Foo) {\n  // This death test uses a compound statement.\n  ASSERT_DEATH({\n    int n = 5;\n    Foo(&amp;n);\n  }, \"Error on line .* of Foo()\");\n}\n\nTEST(MyDeathTest, NormalExit) {\n  EXPECT_EXIT(NormalExit(), testing::ExitedWithCode(0), \"Success\");\n}\n\nTEST(MyDeathTest, KillProcess) {\n  EXPECT_EXIT(KillProcess(), testing::KilledBySignal(SIGKILL),\n              \"Sending myself unblockable signal\");\n}\n</code></pre> <p>verifies that:</p> <ul> <li>calling <code>Foo(5)</code> causes the process to die with the given error message,</li> <li>calling <code>NormalExit()</code> causes the process to print <code>\"Success\"</code> to stderr and     exit with exit code 0, and</li> <li>calling <code>KillProcess()</code> kills the process with signal <code>SIGKILL</code>.</li> </ul> <p>The test function body may contain other assertions and statements as well, if necessary.</p> <p>Note that a death test only cares about three things:</p> <ol> <li>does <code>statement</code> abort or exit the process?</li> <li>(in the case of <code>ASSERT_EXIT</code> and <code>EXPECT_EXIT</code>) does the exit status     satisfy <code>predicate</code>? Or (in the case of <code>ASSERT_DEATH</code> and <code>EXPECT_DEATH</code>)     is the exit status non-zero? And</li> <li>does the stderr output match <code>matcher</code>?</li> </ol> <p>In particular, if <code>statement</code> generates an <code>ASSERT_*</code> or <code>EXPECT_*</code> failure, it will not cause the death test to fail, as googletest assertions don't abort the process.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#death-test-naming","title":"Death Test Naming","text":"<p>{: .callout .important} IMPORTANT: We strongly recommend you to follow the convention of naming your test suite (not test) <code>*DeathTest</code> when it contains a death test, as demonstrated in the above example. The Death Tests And Threads section below explains why.</p> <p>If a test fixture class is shared by normal tests and death tests, you can use <code>using</code> or <code>typedef</code> to introduce an alias for the fixture class and avoid duplicating its code:</p> <pre><code>class FooTest : public testing::Test { ... };\n\nusing FooDeathTest = FooTest;\n\nTEST_F(FooTest, DoesThis) {\n  // normal test\n}\n\nTEST_F(FooDeathTest, DoesThat) {\n  // death test\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#regular-expression-syntax","title":"Regular Expression Syntax","text":"<p>On POSIX systems (e.g. Linux, Cygwin, and Mac), googletest uses the POSIX extended regular expression syntax. To learn about this syntax, you may want to read this Wikipedia entry.</p> <p>On Windows, googletest uses its own simple regular expression implementation. It lacks many features. For example, we don't support union (<code>\"x|y\"</code>), grouping (<code>\"(xy)\"</code>), brackets (<code>\"[xy]\"</code>), and repetition count (<code>\"x{5,7}\"</code>), among others. Below is what we do support (<code>A</code> denotes a literal character, period (<code>.</code>), or a single <code>\\\\</code> escape sequence; <code>x</code> and <code>y</code> denote regular expressions.):</p> Expression Meaning <code>c</code> matches any literal character <code>c</code> <code>\\\\d</code> matches any decimal digit <code>\\\\D</code> matches any character that's not a decimal digit <code>\\\\f</code> matches <code>\\f</code> <code>\\\\n</code> matches <code>\\n</code> <code>\\\\r</code> matches <code>\\r</code> <code>\\\\s</code> matches any ASCII whitespace, including <code>\\n</code> <code>\\\\S</code> matches any character that's not a whitespace <code>\\\\t</code> matches <code>\\t</code> <code>\\\\v</code> matches <code>\\v</code> <code>\\\\w</code> matches any letter, <code>_</code>, or decimal digit <code>\\\\W</code> matches any character that <code>\\\\w</code> doesn't match <code>\\\\c</code> matches any literal character <code>c</code>, which must be a punctuation <code>.</code> matches any single character except <code>\\n</code> <code>A?</code> matches 0 or 1 occurrences of <code>A</code> <code>A*</code> matches 0 or many occurrences of <code>A</code> <code>A+</code> matches 1 or many occurrences of <code>A</code> <code>^</code> matches the beginning of a string (not that of each line) <code>$</code> matches the end of a string (not that of each line) <code>xy</code> matches <code>x</code> followed by <code>y</code> <p>To help you determine which capability is available on your system, googletest defines macros to govern which regular expression it is using. The macros are: <code>GTEST_USES_SIMPLE_RE=1</code> or <code>GTEST_USES_POSIX_RE=1</code>. If you want your death tests to work in all cases, you can either <code>#if</code> on these macros or use the more limited syntax only.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#how-it-works","title":"How It Works","text":"<p>See Death Assertions in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#death-tests-and-threads","title":"Death Tests And Threads","text":"<p>The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn't feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.</p> <p>googletest has three features intended to raise awareness of threading issues.</p> <ol> <li>A warning is emitted if multiple threads are running when a death test is     encountered.</li> <li>Test suites with a name ending in \"DeathTest\" are run before all other     tests.</li> <li>It uses <code>clone()</code> instead of <code>fork()</code> to spawn the child process on Linux     (<code>clone()</code> is not available on Cygwin and Mac), as <code>fork()</code> is more likely     to cause the child to hang when the parent process has multiple threads.</li> </ol> <p>It's perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#death-test-styles","title":"Death Test Styles","text":"<p>The \"threadsafe\" death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety.</p> <p>The automated testing framework does not set the style flag. You can choose a particular style of death tests by setting the flag programmatically:</p> <pre><code>testing::FLAGS_gtest_death_test_style=\"threadsafe\"\n</code></pre> <p>You can do this in <code>main()</code> to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:</p> <pre><code>int main(int argc, char** argv) {\n  testing::InitGoogleTest(&amp;argc, argv);\n  testing::FLAGS_gtest_death_test_style = \"fast\";\n  return RUN_ALL_TESTS();\n}\n\nTEST(MyDeathTest, TestOne) {\n  testing::FLAGS_gtest_death_test_style = \"threadsafe\";\n  // This test is run in the \"threadsafe\" style:\n  ASSERT_DEATH(ThisShouldDie(), \"\");\n}\n\nTEST(MyDeathTest, TestTwo) {\n  // This test is run in the \"fast\" style:\n  ASSERT_DEATH(ThisShouldDie(), \"\");\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#caveats","title":"Caveats","text":"<p>The <code>statement</code> argument of <code>ASSERT_EXIT()</code> can be any valid C++ statement. If it leaves the current function via a <code>return</code> statement or by throwing an exception, the death test is considered to have failed. Some googletest macros may return from the current function (e.g. <code>ASSERT_TRUE()</code>), so be sure to avoid them in <code>statement</code>.</p> <p>Since <code>statement</code> runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will not be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can</p> <ol> <li>try not to free memory in a death test;</li> <li>free the memory again in the parent process; or</li> <li>do not use the heap checker in your program.</li> </ol> <p>Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.</p> <p>Despite the improved thread safety afforded by the \"threadsafe\" style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with <code>pthread_atfork(3)</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#using-assertions-in-sub-routines","title":"Using Assertions in Sub-routines","text":"<p>{: .callout .note} Note: If you want to put a series of test assertions in a subroutine to check for a complex condition, consider using a custom GMock matcher instead. This lets you provide a more readable error message in case of failure and avoid all of the issues described below.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#adding-traces-to-assertions","title":"Adding Traces to Assertions","text":"<p>If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the <code>SCOPED_TRACE</code> macro or the <code>ScopedTrace</code> utility:</p> <pre><code>SCOPED_TRACE(message);\n</code></pre> <pre><code>ScopedTrace trace(\"file_path\", line_number, message);\n</code></pre> <p>where <code>message</code> can be anything streamable to <code>std::ostream</code>. <code>SCOPED_TRACE</code> macro will cause the current file name, line number, and the given message to be added in every failure message. <code>ScopedTrace</code> accepts explicit file name and line number in arguments, which is useful for writing test helpers. The effect will be undone when the control leaves the current lexical scope.</p> <p>For example,</p> <pre><code>10: void Sub1(int n) {\n11:   EXPECT_EQ(Bar(n), 1);\n12:   EXPECT_EQ(Bar(n + 1), 2);\n13: }\n14:\n15: TEST(FooTest, Bar) {\n16:   {\n17:     SCOPED_TRACE(\"A\");  // This trace point will be included in\n18:                         // every failure in this scope.\n19:     Sub1(1);\n20:   }\n21:   // Now it won't.\n22:   Sub1(9);\n23: }\n</code></pre> <p>could result in messages like these:</p> <pre><code>path/to/foo_test.cc:11: Failure\nValue of: Bar(n)\nExpected: 1\n  Actual: 2\nGoogle Test trace:\npath/to/foo_test.cc:17: A\n\npath/to/foo_test.cc:12: Failure\nValue of: Bar(n + 1)\nExpected: 2\n  Actual: 3\n</code></pre> <p>Without the trace, it would've been difficult to know which invocation of <code>Sub1()</code> the two failures come from respectively. (You could add an extra message to each assertion in <code>Sub1()</code> to indicate the value of <code>n</code>, but that's tedious.)</p> <p>Some tips on using <code>SCOPED_TRACE</code>:</p> <ol> <li>With a suitable message, it's often enough to use <code>SCOPED_TRACE</code> at the     beginning of a sub-routine, instead of at each call site.</li> <li>When calling sub-routines inside a loop, make the loop iterator part of the     message in <code>SCOPED_TRACE</code> such that you can know which iteration the failure     is from.</li> <li>Sometimes the line number of the trace point is enough for identifying the     particular invocation of a sub-routine. In this case, you don't have to     choose a unique message for <code>SCOPED_TRACE</code>. You can simply use <code>\"\"</code>.</li> <li>You can use <code>SCOPED_TRACE</code> in an inner scope when there is one in the outer     scope. In this case, all active trace points will be included in the failure     messages, in reverse order they are encountered.</li> <li>The trace dump is clickable in Emacs - hit <code>return</code> on a line number and     you'll be taken to that line in the source file!</li> </ol>"},{"location":"build/_deps/googletest-src/docs/advanced.html#propagating-fatal-failures","title":"Propagating Fatal Failures","text":"<p>A common pitfall when using <code>ASSERT_*</code> and <code>FAIL*</code> is not understanding that when they fail they only abort the current function, not the entire test. For example, the following test will segfault:</p> <pre><code>void Subroutine() {\n  // Generates a fatal failure and aborts the current function.\n  ASSERT_EQ(1, 2);\n\n  // The following won't be executed.\n  ...\n}\n\nTEST(FooTest, Bar) {\n  Subroutine();  // The intended behavior is for the fatal failure\n                 // in Subroutine() to abort the entire test.\n\n  // The actual behavior: the function goes on after Subroutine() returns.\n  int* p = nullptr;\n  *p = 3;  // Segfault!\n}\n</code></pre> <p>To alleviate this, googletest provides three different solutions. You could use either exceptions, the <code>(ASSERT|EXPECT)_NO_FATAL_FAILURE</code> assertions or the <code>HasFatalFailure()</code> function. They are described in the following two subsections.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#asserting-on-subroutines-with-an-exception","title":"Asserting on Subroutines with an exception","text":"<p>The following code can turn ASSERT-failure into an exception:</p> <pre><code>class ThrowListener : public testing::EmptyTestEventListener {\n  void OnTestPartResult(const testing::TestPartResult&amp; result) override {\n    if (result.type() == testing::TestPartResult::kFatalFailure) {\n      throw testing::AssertionException(result);\n    }\n  }\n};\nint main(int argc, char** argv) {\n  ...\n  testing::UnitTest::GetInstance()-&gt;listeners().Append(new ThrowListener);\n  return RUN_ALL_TESTS();\n}\n</code></pre> <p>This listener should be added after other listeners if you have any, otherwise they won't see failed <code>OnTestPartResult</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#asserting-on-subroutines","title":"Asserting on Subroutines","text":"<p>As shown above, if your test calls a subroutine that has an <code>ASSERT_*</code> failure in it, the test will continue after the subroutine returns. This may not be what you want.</p> <p>Often people want fatal failures to propagate like exceptions. For that googletest offers the following macros:</p> Fatal assertion Nonfatal assertion Verifies <code>ASSERT_NO_FATAL_FAILURE(statement);</code> <code>EXPECT_NO_FATAL_FAILURE(statement);</code> <code>statement</code> doesn't generate any new fatal failures in the current thread. <p>Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If <code>statement</code> creates new threads, failures in these threads are ignored.</p> <p>Examples:</p> <pre><code>ASSERT_NO_FATAL_FAILURE(Foo());\n\nint i;\nEXPECT_NO_FATAL_FAILURE({\n  i = Bar();\n});\n</code></pre> <p>Assertions from multiple threads are currently not supported on Windows.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#checking-for-failures-in-the-current-test","title":"Checking for Failures in the Current Test","text":"<p><code>HasFatalFailure()</code> in the <code>::testing::Test</code> class returns <code>true</code> if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.</p> <pre><code>class Test {\n public:\n  ...\n  static bool HasFatalFailure();\n};\n</code></pre> <p>The typical usage, which basically simulates the behavior of a thrown exception, is:</p> <pre><code>TEST(FooTest, Bar) {\n  Subroutine();\n  // Aborts if Subroutine() had a fatal failure.\n  if (HasFatalFailure()) return;\n\n  // The following won't be executed.\n  ...\n}\n</code></pre> <p>If <code>HasFatalFailure()</code> is used outside of <code>TEST()</code> , <code>TEST_F()</code> , or a test fixture, you must add the <code>::testing::Test::</code> prefix, as in:</p> <pre><code>if (testing::Test::HasFatalFailure()) return;\n</code></pre> <p>Similarly, <code>HasNonfatalFailure()</code> returns <code>true</code> if the current test has at least one non-fatal failure, and <code>HasFailure()</code> returns <code>true</code> if the current test has at least one failure of either kind.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#logging-additional-information","title":"Logging Additional Information","text":"<p>In your test code, you can call <code>RecordProperty(\"key\", value)</code> to log additional information, where <code>value</code> can be either a string or an <code>int</code>. The last value recorded for a key will be emitted to the XML output if you specify one. For example, the test</p> <pre><code>TEST_F(WidgetUsageTest, MinAndMaxWidgets) {\n  RecordProperty(\"MaximumWidgets\", ComputeMaxUsage());\n  RecordProperty(\"MinimumWidgets\", ComputeMinUsage());\n}\n</code></pre> <p>will output XML like this:</p> <pre><code>  ...\n    &lt;testcase name=\"MinAndMaxWidgets\" status=\"run\" time=\"0.006\" classname=\"WidgetUsageTest\" MaximumWidgets=\"12\" MinimumWidgets=\"9\" /&gt;\n  ...\n</code></pre> <p>{: .callout .note}</p> <p>NOTE:</p> <ul> <li><code>RecordProperty()</code> is a static member of the <code>Test</code> class. Therefore it     needs to be prefixed with <code>::testing::Test::</code> if used outside of the     <code>TEST</code> body and the test fixture class.</li> <li><code>key</code> must be a valid XML attribute name, and cannot conflict with the     ones already used by googletest (<code>name</code>, <code>status</code>, <code>time</code>, <code>classname</code>,     <code>type_param</code>, and <code>value_param</code>).</li> <li>Calling <code>RecordProperty()</code> outside of the lifespan of a test is allowed.     If it's called outside of a test but between a test suite's     <code>SetUpTestSuite()</code> and <code>TearDownTestSuite()</code> methods, it will be     attributed to the XML element for the test suite. If it's called outside     of all test suites (e.g. in a test environment), it will be attributed to     the top-level XML element.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/advanced.html#sharing-resources-between-tests-in-the-same-test-suite","title":"Sharing Resources Between Tests in the Same Test Suite","text":"<p>googletest creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.</p> <p>If the tests don't change the resource, there's no harm in their sharing a single resource copy. So, in addition to per-test set-up/tear-down, googletest also supports per-test-suite set-up/tear-down. To use it:</p> <ol> <li>In your test fixture class (say <code>FooTest</code> ), declare as <code>static</code> some member     variables to hold the shared resources.</li> <li>Outside your test fixture class (typically just below it), define those     member variables, optionally giving them initial values.</li> <li>In the same test fixture class, define a <code>static void SetUpTestSuite()</code>     function (remember not to spell it as <code>SetupTestSuite</code> with a small     <code>u</code>!) to set up the shared resources and a <code>static void TearDownTestSuite()</code>     function to tear them down.</li> </ol> <p>That's it! googletest automatically calls <code>SetUpTestSuite()</code> before running the first test in the <code>FooTest</code> test suite (i.e. before creating the first <code>FooTest</code> object), and calls <code>TearDownTestSuite()</code> after running the last test in it (i.e. after deleting the last <code>FooTest</code> object). In between, the tests can use the shared resources.</p> <p>Remember that the test order is undefined, so your code can't depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.</p> <p>Here's an example of per-test-suite set-up and tear-down:</p> <pre><code>class FooTest : public testing::Test {\n protected:\n  // Per-test-suite set-up.\n  // Called before the first test in this test suite.\n  // Can be omitted if not needed.\n  static void SetUpTestSuite() {\n    shared_resource_ = new ...;\n  }\n\n  // Per-test-suite tear-down.\n  // Called after the last test in this test suite.\n  // Can be omitted if not needed.\n  static void TearDownTestSuite() {\n    delete shared_resource_;\n    shared_resource_ = nullptr;\n  }\n\n  // You can define per-test set-up logic as usual.\n  void SetUp() override { ... }\n\n  // You can define per-test tear-down logic as usual.\n  void TearDown() override { ... }\n\n  // Some expensive resource shared by all tests.\n  static T* shared_resource_;\n};\n\nT* FooTest::shared_resource_ = nullptr;\n\nTEST_F(FooTest, Test1) {\n  ... you can refer to shared_resource_ here ...\n}\n\nTEST_F(FooTest, Test2) {\n  ... you can refer to shared_resource_ here ...\n}\n</code></pre> <p>{: .callout .note} NOTE: Though the above code declares <code>SetUpTestSuite()</code> protected, it may sometimes be necessary to declare it public, such as when using it with <code>TEST_P</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#global-set-up-and-tear-down","title":"Global Set-Up and Tear-Down","text":"<p>Just as you can do set-up and tear-down at the test level and the test suite level, you can also do it at the test program level. Here's how.</p> <p>First, you subclass the <code>::testing::Environment</code> class to define a test environment, which knows how to set-up and tear-down:</p> <pre><code>class Environment : public ::testing::Environment {\n public:\n  ~Environment() override {}\n\n  // Override this to define how to set up the environment.\n  void SetUp() override {}\n\n  // Override this to define how to tear down the environment.\n  void TearDown() override {}\n};\n</code></pre> <p>Then, you register an instance of your environment class with googletest by calling the <code>::testing::AddGlobalTestEnvironment()</code> function:</p> <pre><code>Environment* AddGlobalTestEnvironment(Environment* env);\n</code></pre> <p>Now, when <code>RUN_ALL_TESTS()</code> is called, it first calls the <code>SetUp()</code> method of each environment object, then runs the tests if none of the environments reported fatal failures and <code>GTEST_SKIP()</code> was not called. <code>RUN_ALL_TESTS()</code> always calls <code>TearDown()</code> with each environment object, regardless of whether or not the tests were run.</p> <p>It's OK to register multiple environment objects. In this suite, their <code>SetUp()</code> will be called in the order they are registered, and their <code>TearDown()</code> will be called in the reverse order.</p> <p>Note that googletest takes ownership of the registered environment objects. Therefore do not delete them by yourself.</p> <p>You should call <code>AddGlobalTestEnvironment()</code> before <code>RUN_ALL_TESTS()</code> is called, probably in <code>main()</code>. If you use <code>gtest_main</code>, you need to call this before <code>main()</code> starts for it to take effect. One way to do this is to define a global variable like this:</p> <pre><code>testing::Environment* const foo_env =\n    testing::AddGlobalTestEnvironment(new FooEnvironment);\n</code></pre> <p>However, we strongly recommend you to write your own <code>main()</code> and call <code>AddGlobalTestEnvironment()</code> there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn't guarantee the order in which global variables from different translation units are initialized).</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#value-parameterized-tests","title":"Value-Parameterized Tests","text":"<p>Value-parameterized tests allow you to test your code with different parameters without writing multiple copies of the same test. This is useful in a number of situations, for example:</p> <ul> <li>You have a piece of code whose behavior is affected by one or more     command-line flags. You want to make sure your code performs correctly for     various values of those flags.</li> <li>You want to test different implementations of an OO interface.</li> <li>You want to test your code over various inputs (a.k.a. data-driven testing).     This feature is easy to abuse, so please exercise your good sense when doing     it!</li> </ul>"},{"location":"build/_deps/googletest-src/docs/advanced.html#how-to-write-value-parameterized-tests","title":"How to Write Value-Parameterized Tests","text":"<p>To write value-parameterized tests, first you should define a fixture class. It must be derived from both <code>testing::Test</code> and <code>testing::WithParamInterface&lt;T&gt;</code> (the latter is a pure interface), where <code>T</code> is the type of your parameter values. For convenience, you can just derive the fixture class from <code>testing::TestWithParam&lt;T&gt;</code>, which itself is derived from both <code>testing::Test</code> and <code>testing::WithParamInterface&lt;T&gt;</code>. <code>T</code> can be any copyable type. If it's a raw pointer, you are responsible for managing the lifespan of the pointed values.</p> <p>{: .callout .note} NOTE: If your test fixture defines <code>SetUpTestSuite()</code> or <code>TearDownTestSuite()</code> they must be declared public rather than protected in order to use <code>TEST_P</code>.</p> <pre><code>class FooTest :\n    public testing::TestWithParam&lt;const char*&gt; {\n  // You can implement all the usual fixture class members here.\n  // To access the test parameter, call GetParam() from class\n  // TestWithParam&lt;T&gt;.\n};\n\n// Or, when you want to add parameters to a pre-existing fixture class:\nclass BaseTest : public testing::Test {\n  ...\n};\nclass BarTest : public BaseTest,\n                public testing::WithParamInterface&lt;const char*&gt; {\n  ...\n};\n</code></pre> <p>Then, use the <code>TEST_P</code> macro to define as many test patterns using this fixture as you want. The <code>_P</code> suffix is for \"parameterized\" or \"pattern\", whichever you prefer to think.</p> <pre><code>TEST_P(FooTest, DoesBlah) {\n  // Inside a test, access the test parameter with the GetParam() method\n  // of the TestWithParam&lt;T&gt; class:\n  EXPECT_TRUE(foo.Blah(GetParam()));\n  ...\n}\n\nTEST_P(FooTest, HasBlahBlah) {\n  ...\n}\n</code></pre> <p>Finally, you can use the <code>INSTANTIATE_TEST_SUITE_P</code> macro to instantiate the test suite with any set of parameters you want. GoogleTest defines a number of functions for generating test parameters\u2014see details at <code>INSTANTIATE_TEST_SUITE_P</code> in the Testing Reference.</p> <p>For example, the following statement will instantiate tests from the <code>FooTest</code> test suite each with parameter values <code>\"meeny\"</code>, <code>\"miny\"</code>, and <code>\"moe\"</code> using the <code>Values</code> parameter generator:</p> <pre><code>INSTANTIATE_TEST_SUITE_P(MeenyMinyMoe,\n                         FooTest,\n                         testing::Values(\"meeny\", \"miny\", \"moe\"));\n</code></pre> <p>{: .callout .note} NOTE: The code above must be placed at global or namespace scope, not at function scope.</p> <p>The first argument to <code>INSTANTIATE_TEST_SUITE_P</code> is a unique name for the instantiation of the test suite. The next argument is the name of the test pattern, and the last is the parameter generator.</p> <p>You can instantiate a test pattern more than once, so to distinguish different instances of the pattern, the instantiation name is added as a prefix to the actual test suite name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:</p> <ul> <li><code>MeenyMinyMoe/FooTest.DoesBlah/0</code> for <code>\"meeny\"</code></li> <li><code>MeenyMinyMoe/FooTest.DoesBlah/1</code> for <code>\"miny\"</code></li> <li><code>MeenyMinyMoe/FooTest.DoesBlah/2</code> for <code>\"moe\"</code></li> <li><code>MeenyMinyMoe/FooTest.HasBlahBlah/0</code> for <code>\"meeny\"</code></li> <li><code>MeenyMinyMoe/FooTest.HasBlahBlah/1</code> for <code>\"miny\"</code></li> <li><code>MeenyMinyMoe/FooTest.HasBlahBlah/2</code> for <code>\"moe\"</code></li> </ul> <p>You can use these names in <code>--gtest_filter</code>.</p> <p>The following statement will instantiate all tests from <code>FooTest</code> again, each with parameter values <code>\"cat\"</code> and <code>\"dog\"</code> using the <code>ValuesIn</code> parameter generator:</p> <pre><code>const char* pets[] = {\"cat\", \"dog\"};\nINSTANTIATE_TEST_SUITE_P(Pets, FooTest, testing::ValuesIn(pets));\n</code></pre> <p>The tests from the instantiation above will have these names:</p> <ul> <li><code>Pets/FooTest.DoesBlah/0</code> for <code>\"cat\"</code></li> <li><code>Pets/FooTest.DoesBlah/1</code> for <code>\"dog\"</code></li> <li><code>Pets/FooTest.HasBlahBlah/0</code> for <code>\"cat\"</code></li> <li><code>Pets/FooTest.HasBlahBlah/1</code> for <code>\"dog\"</code></li> </ul> <p>Please note that <code>INSTANTIATE_TEST_SUITE_P</code> will instantiate all tests in the given test suite, whether their definitions come before or after the <code>INSTANTIATE_TEST_SUITE_P</code> statement.</p> <p>Additionally, by default, every <code>TEST_P</code> without a corresponding <code>INSTANTIATE_TEST_SUITE_P</code> causes a failing test in test suite <code>GoogleTestVerification</code>. If you have a test suite where that omission is not an error, for example it is in a library that may be linked in for other reasons or where the list of test cases is dynamic and may be empty, then this check can be suppressed by tagging the test suite:</p> <pre><code>GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(FooTest);\n</code></pre> <p>You can see sample7_unittest.cc and sample8_unittest.cc for more examples.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#creating-value-parameterized-abstract-tests","title":"Creating Value-Parameterized Abstract Tests","text":"<p>In the above, we define and instantiate <code>FooTest</code> in the same source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as abstract tests. As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, they can instantiate your suite to get all the interface-conformance tests for free.</p> <p>To define abstract tests, you should organize your code like this:</p> <ol> <li>Put the definition of the parameterized test fixture class (e.g. <code>FooTest</code>)     in a header file, say <code>foo_param_test.h</code>. Think of this as declaring your     abstract tests.</li> <li>Put the <code>TEST_P</code> definitions in <code>foo_param_test.cc</code>, which includes     <code>foo_param_test.h</code>. Think of this as implementing your abstract tests.</li> </ol> <p>Once they are defined, you can instantiate them by including <code>foo_param_test.h</code>, invoking <code>INSTANTIATE_TEST_SUITE_P()</code>, and depending on the library target that contains <code>foo_param_test.cc</code>. You can instantiate the same abstract test suite multiple times, possibly in different source files.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#specifying-names-for-value-parameterized-test-parameters","title":"Specifying Names for Value-Parameterized Test Parameters","text":"<p>The optional last argument to <code>INSTANTIATE_TEST_SUITE_P()</code> allows the user to specify a function or functor that generates custom test name suffixes based on the test parameters. The function should accept one argument of type <code>testing::TestParamInfo&lt;class ParamType&gt;</code>, and return <code>std::string</code>.</p> <p><code>testing::PrintToStringParamName</code> is a builtin test suffix generator that returns the value of <code>testing::PrintToString(GetParam())</code>. It does not work for <code>std::string</code> or C strings.</p> <p>{: .callout .note} NOTE: test names must be non-empty, unique, and may only contain ASCII alphanumeric characters. In particular, they should not contain underscores</p> <pre><code>class MyTestSuite : public testing::TestWithParam&lt;int&gt; {};\n\nTEST_P(MyTestSuite, MyTest)\n{\n  std::cout &lt;&lt; \"Example Test Param: \" &lt;&lt; GetParam() &lt;&lt; std::endl;\n}\n\nINSTANTIATE_TEST_SUITE_P(MyGroup, MyTestSuite, testing::Range(0, 10),\n                         testing::PrintToStringParamName());\n</code></pre> <p>Providing a custom functor allows for more control over test parameter name generation, especially for types where the automatic conversion does not generate helpful parameter names (e.g. strings as demonstrated above). The following example illustrates this for multiple parameters, an enumeration type and a string, and also demonstrates how to combine generators. It uses a lambda for conciseness:</p> <pre><code>enum class MyType { MY_FOO = 0, MY_BAR = 1 };\n\nclass MyTestSuite : public testing::TestWithParam&lt;std::tuple&lt;MyType, std::string&gt;&gt; {\n};\n\nINSTANTIATE_TEST_SUITE_P(\n    MyGroup, MyTestSuite,\n    testing::Combine(\n        testing::Values(MyType::MY_FOO, MyType::MY_BAR),\n        testing::Values(\"A\", \"B\")),\n    [](const testing::TestParamInfo&lt;MyTestSuite::ParamType&gt;&amp; info) {\n      std::string name = absl::StrCat(\n          std::get&lt;0&gt;(info.param) == MyType::MY_FOO ? \"Foo\" : \"Bar\",\n          std::get&lt;1&gt;(info.param));\n      absl::c_replace_if(name, [](char c) { return !std::isalnum(c); }, '_');\n      return name;\n    });\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#typed-tests","title":"Typed Tests","text":"<p>Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same \"concept\" and you want to verify it. In both cases, you want the same test logic repeated for different types.</p> <p>While you can write one <code>TEST</code> or <code>TEST_F</code> for each type you want to test (and you may even factor the test logic into a function template that you invoke from the <code>TEST</code>), it's tedious and doesn't scale: if you want <code>m</code> tests over <code>n</code> types, you'll end up writing <code>m*n</code> <code>TEST</code>s.</p> <p>Typed tests allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here's how you do it:</p> <p>First, define a fixture class template. It should be parameterized by a type. Remember to derive it from <code>::testing::Test</code>:</p> <pre><code>template &lt;typename T&gt;\nclass FooTest : public testing::Test {\n public:\n  ...\n  using List = std::list&lt;T&gt;;\n  static T shared_;\n  T value_;\n};\n</code></pre> <p>Next, associate a list of types with the test suite, which will be repeated for each type in the list:</p> <pre><code>using MyTypes = ::testing::Types&lt;char, int, unsigned int&gt;;\nTYPED_TEST_SUITE(FooTest, MyTypes);\n</code></pre> <p>The type alias (<code>using</code> or <code>typedef</code>) is necessary for the <code>TYPED_TEST_SUITE</code> macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.</p> <p>Then, use <code>TYPED_TEST()</code> instead of <code>TEST_F()</code> to define a typed test for this test suite. You can repeat this as many times as you want:</p> <pre><code>TYPED_TEST(FooTest, DoesBlah) {\n  // Inside a test, refer to the special name TypeParam to get the type\n  // parameter.  Since we are inside a derived class template, C++ requires\n  // us to visit the members of FooTest via 'this'.\n  TypeParam n = this-&gt;value_;\n\n  // To visit static members of the fixture, add the 'TestFixture::'\n  // prefix.\n  n += TestFixture::shared_;\n\n  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\n  // prefix.  The 'typename' is required to satisfy the compiler.\n  typename TestFixture::List values;\n\n  values.push_back(n);\n  ...\n}\n\nTYPED_TEST(FooTest, HasPropertyA) { ... }\n</code></pre> <p>You can see sample6_unittest.cc for a complete example.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#type-parameterized-tests","title":"Type-Parameterized Tests","text":"<p>Type-parameterized tests are like typed tests, except that they don't require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.</p> <p>If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with their type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here's an example:</p> <p>First, define a fixture class template, as we did with typed tests:</p> <pre><code>template &lt;typename T&gt;\nclass FooTest : public testing::Test {\n  ...\n};\n</code></pre> <p>Next, declare that you will define a type-parameterized test suite:</p> <pre><code>TYPED_TEST_SUITE_P(FooTest);\n</code></pre> <p>Then, use <code>TYPED_TEST_P()</code> to define a type-parameterized test. You can repeat this as many times as you want:</p> <pre><code>TYPED_TEST_P(FooTest, DoesBlah) {\n  // Inside a test, refer to TypeParam to get the type parameter.\n  TypeParam n = 0;\n  ...\n}\n\nTYPED_TEST_P(FooTest, HasPropertyA) { ... }\n</code></pre> <p>Now the tricky part: you need to register all test patterns using the <code>REGISTER_TYPED_TEST_SUITE_P</code> macro before you can instantiate them. The first argument of the macro is the test suite name; the rest are the names of the tests in this test suite:</p> <pre><code>REGISTER_TYPED_TEST_SUITE_P(FooTest,\n                            DoesBlah, HasPropertyA);\n</code></pre> <p>Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can <code>#include</code> it in multiple C++ source files and instantiate it multiple times.</p> <pre><code>using MyTypes = ::testing::Types&lt;char, int, unsigned int&gt;;\nINSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, MyTypes);\n</code></pre> <p>To distinguish different instances of the pattern, the first argument to the <code>INSTANTIATE_TYPED_TEST_SUITE_P</code> macro is a prefix that will be added to the actual test suite name. Remember to pick unique prefixes for different instances.</p> <p>In the special case where the type list contains only one type, you can write that type directly without <code>::testing::Types&lt;...&gt;</code>, like this:</p> <pre><code>INSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, int);\n</code></pre> <p>You can see sample6_unittest.cc for a complete example.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#testing-private-code","title":"Testing Private Code","text":"<p>If you change your software's internal implementation, your tests should not break as long as the change is not observable by users. Therefore, per the black-box testing principle, most of the time you should test your code through its public interfaces.</p> <p>If you still find yourself needing to test internal implementation code, consider if there's a better design. The desire to test internal implementation is often a sign that the class is doing too much. Consider extracting an implementation class, and testing it. Then use that implementation class in the original class.</p> <p>If you absolutely have to test non-public interface code though, you can. There are two cases to consider:</p> <ul> <li>Static functions ( not the same as static member functions!) or unnamed     namespaces, and</li> <li>Private or protected class members</li> </ul> <p>To test them, we use the following special techniques:</p> <ul> <li> <p>Both static functions and definitions/declarations in an unnamed namespace     are only visible within the same translation unit. To test them, you can     <code>#include</code> the entire <code>.cc</code> file being tested in your <code>*_test.cc</code> file.     (#including <code>.cc</code> files is not a good way to reuse code - you should not do     this in production code!)</p> <p>However, a better approach is to move the private code into the <code>foo::internal</code> namespace, where <code>foo</code> is the namespace your project normally uses, and put the private declarations in a <code>*-internal.h</code> file. Your production <code>.cc</code> files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.</p> </li> <li> <p>Private class members are only accessible from within the class or by     friends. To access a class' private members, you can declare your test     fixture as a friend to the class and define accessors in your fixture. Tests     using the fixture can then access the private members of your production     class via the accessors in the fixture. Note that even though your fixture     is a friend to your production class, your tests are not automatically     friends to it, as they are technically defined in sub-classes of the     fixture.</p> <p>Another way to test private members is to refactor them into an implementation class, which is then declared in a <code>*-internal.h</code> file. Your clients aren't allowed to include this header but your tests can. Such is called the Pimpl (Private Implementation) idiom.</p> <p>Or, you can declare an individual test as a friend of your class by adding this line in the class body:</p> <p><code>c++     FRIEND_TEST(TestSuiteName, TestName);</code></p> <p>For example,</p> <p>```c++ // foo.h class Foo {   ...  private:   FRIEND_TEST(FooTest, BarReturnsZeroOnNull);</p> <p>int Bar(void* x); };</p> <p>// foo_test.cc ... TEST(FooTest, BarReturnsZeroOnNull) {   Foo foo;   EXPECT_EQ(foo.Bar(NULL), 0);  // Uses Foo's private member Bar(). } ```</p> <p>Pay special attention when your class is defined in a namespace. If you want your test fixtures and tests to be friends of your class, then they must be defined in the exact same namespace (no anonymous or inline namespaces).</p> <p>For example, if the code to be tested looks like:</p> <p>```c++ namespace my_namespace {</p> <p>class Foo {   friend class FooTest;   FRIEND_TEST(FooTest, Bar);   FRIEND_TEST(FooTest, Baz);   ... definition of the class Foo ... };</p> <p>}  // namespace my_namespace ```</p> <p>Your test code should be something like:</p> <p>```c++ namespace my_namespace {</p> <p>class FooTest : public testing::Test {  protected:   ... };</p> <p>TEST_F(FooTest, Bar) { ... } TEST_F(FooTest, Baz) { ... }</p> <p>}  // namespace my_namespace ```</p> </li> </ul>"},{"location":"build/_deps/googletest-src/docs/advanced.html#catching-failures","title":"\"Catching\" Failures","text":"<p>If you are building a testing utility on top of googletest, you'll want to test your utility. What framework would you use to test it? googletest, of course.</p> <p>The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But googletest doesn't use exceptions, so how do we test that a piece of code generates an expected failure?</p> <p><code>\"gtest/gtest-spi.h\"</code> contains some constructs to do this. After #including this header, you can use</p> <pre><code>  EXPECT_FATAL_FAILURE(statement, substring);\n</code></pre> <p>to assert that <code>statement</code> generates a fatal (e.g. <code>ASSERT_*</code>) failure in the current thread whose message contains the given <code>substring</code>, or use</p> <pre><code>  EXPECT_NONFATAL_FAILURE(statement, substring);\n</code></pre> <p>if you are expecting a non-fatal (e.g. <code>EXPECT_*</code>) failure.</p> <p>Only failures in the current thread are checked to determine the result of this type of expectations. If <code>statement</code> creates new threads, failures in these threads are also ignored. If you want to catch failures in other threads as well, use one of the following macros instead:</p> <pre><code>  EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement, substring);\n  EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement, substring);\n</code></pre> <p>{: .callout .note} NOTE: Assertions from multiple threads are currently not supported on Windows.</p> <p>For technical reasons, there are some caveats:</p> <ol> <li> <p>You cannot stream a failure message to either macro.</p> </li> <li> <p><code>statement</code> in <code>EXPECT_FATAL_FAILURE{_ON_ALL_THREADS}()</code> cannot reference     local non-static variables or non-static members of <code>this</code> object.</p> </li> <li> <p><code>statement</code> in <code>EXPECT_FATAL_FAILURE{_ON_ALL_THREADS}()</code> cannot return a     value.</p> </li> </ol>"},{"location":"build/_deps/googletest-src/docs/advanced.html#registering-tests-programmatically","title":"Registering tests programmatically","text":"<p>The <code>TEST</code> macros handle the vast majority of all use cases, but there are few where runtime registration logic is required. For those cases, the framework provides the <code>::testing::RegisterTest</code> that allows callers to register arbitrary tests dynamically.</p> <p>This is an advanced API only to be used when the <code>TEST</code> macros are insufficient. The macros should be preferred when possible, as they avoid most of the complexity of calling this function.</p> <p>It provides the following signature:</p> <pre><code>template &lt;typename Factory&gt;\nTestInfo* RegisterTest(const char* test_suite_name, const char* test_name,\n                       const char* type_param, const char* value_param,\n                       const char* file, int line, Factory factory);\n</code></pre> <p>The <code>factory</code> argument is a factory callable (move-constructible) object or function pointer that creates a new instance of the Test object. It handles ownership to the caller. The signature of the callable is <code>Fixture*()</code>, where <code>Fixture</code> is the test fixture class for the test. All tests registered with the same <code>test_suite_name</code> must return the same fixture type. This is checked at runtime.</p> <p>The framework will infer the fixture class from the factory and will call the <code>SetUpTestSuite</code> and <code>TearDownTestSuite</code> for it.</p> <p>Must be called before <code>RUN_ALL_TESTS()</code> is invoked, otherwise behavior is undefined.</p> <p>Use case example:</p> <pre><code>class MyFixture : public testing::Test {\n public:\n  // All of these optional, just like in regular macro usage.\n  static void SetUpTestSuite() { ... }\n  static void TearDownTestSuite() { ... }\n  void SetUp() override { ... }\n  void TearDown() override { ... }\n};\n\nclass MyTest : public MyFixture {\n public:\n  explicit MyTest(int data) : data_(data) {}\n  void TestBody() override { ... }\n\n private:\n  int data_;\n};\n\nvoid RegisterMyTests(const std::vector&lt;int&gt;&amp; values) {\n  for (int v : values) {\n    testing::RegisterTest(\n        \"MyFixture\", (\"Test\" + std::to_string(v)).c_str(), nullptr,\n        std::to_string(v).c_str(),\n        __FILE__, __LINE__,\n        // Important to use the fixture type as the return type here.\n        [=]() -&gt; MyFixture* { return new MyTest(v); });\n  }\n}\n...\nint main(int argc, char** argv) {\n  std::vector&lt;int&gt; values_to_test = LoadValuesFromConfig();\n  RegisterMyTests(values_to_test);\n  ...\n  return RUN_ALL_TESTS();\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#getting-the-current-tests-name","title":"Getting the Current Test's Name","text":"<p>Sometimes a function may need to know the name of the currently running test. For example, you may be using the <code>SetUp()</code> method of your test fixture to set the golden file name based on which test is running. The <code>TestInfo</code> class has this information.</p> <p>To obtain a <code>TestInfo</code> object for the currently running test, call <code>current_test_info()</code> on the <code>UnitTest</code> singleton object:</p> <pre><code>  // Gets information about the currently running test.\n  // Do NOT delete the returned object - it's managed by the UnitTest class.\n  const testing::TestInfo* const test_info =\n      testing::UnitTest::GetInstance()-&gt;current_test_info();\n\n  printf(\"We are in test %s of test suite %s.\\n\",\n         test_info-&gt;name(),\n         test_info-&gt;test_suite_name());\n</code></pre> <p><code>current_test_info()</code> returns a null pointer if no test is running. In particular, you cannot find the test suite name in <code>SetUpTestSuite()</code>, <code>TearDownTestSuite()</code> (where you know the test suite name implicitly), or functions called from them.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#extending-googletest-by-handling-test-events","title":"Extending googletest by Handling Test Events","text":"<p>googletest provides an event listener API to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test suite, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#defining-event-listeners","title":"Defining Event Listeners","text":"<p>To define a event listener, you subclass either <code>testing::TestEventListener</code> or <code>testing::EmptyTestEventListener</code> The former is an (abstract) interface, where each pure virtual method can be overridden to handle a test event (For example, when a test starts, the <code>OnTestStart()</code> method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.</p> <p>When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:</p> <ul> <li>UnitTest reflects the state of the entire test program,</li> <li>TestSuite has information about a test suite, which can contain one or more     tests,</li> <li>TestInfo contains the state of a test, and</li> <li>TestPartResult represents the result of a test assertion.</li> </ul> <p>An event handler function can examine the argument it receives to find out interesting information about the event and the test program's state.</p> <p>Here's an example:</p> <pre><code>  class MinimalistPrinter : public testing::EmptyTestEventListener {\n    // Called before a test starts.\n    void OnTestStart(const testing::TestInfo&amp; test_info) override {\n      printf(\"*** Test %s.%s starting.\\n\",\n             test_info.test_suite_name(), test_info.name());\n    }\n\n    // Called after a failed assertion or a SUCCESS().\n    void OnTestPartResult(const testing::TestPartResult&amp; test_part_result) override {\n      printf(\"%s in %s:%d\\n%s\\n\",\n             test_part_result.failed() ? \"*** Failure\" : \"Success\",\n             test_part_result.file_name(),\n             test_part_result.line_number(),\n             test_part_result.summary());\n    }\n\n    // Called after a test ends.\n    void OnTestEnd(const testing::TestInfo&amp; test_info) override {\n      printf(\"*** Test %s.%s ending.\\n\",\n             test_info.test_suite_name(), test_info.name());\n    }\n  };\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/advanced.html#using-event-listeners","title":"Using Event Listeners","text":"<p>To use the event listener you have defined, add an instance of it to the googletest event listener list (represented by class <code>TestEventListeners</code> - note the \"s\" at the end of the name) in your <code>main()</code> function, before calling <code>RUN_ALL_TESTS()</code>:</p> <pre><code>int main(int argc, char** argv) {\n  testing::InitGoogleTest(&amp;argc, argv);\n  // Gets hold of the event listener list.\n  testing::TestEventListeners&amp; listeners =\n      testing::UnitTest::GetInstance()-&gt;listeners();\n  // Adds a listener to the end.  googletest takes the ownership.\n  listeners.Append(new MinimalistPrinter);\n  return RUN_ALL_TESTS();\n}\n</code></pre> <p>There's only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line:</p> <pre><code>  ...\n  delete listeners.Release(listeners.default_result_printer());\n  listeners.Append(new MinimalistPrinter);\n  return RUN_ALL_TESTS();\n</code></pre> <p>Now, sit back and enjoy a completely different output from your tests. For more details, see sample9_unittest.cc.</p> <p>You may append more than one listener to the list. When an <code>On*Start()</code> or <code>OnTestPartResult()</code> event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An <code>On*End()</code> event will be received by the listeners in the reverse order. This allows output by listeners added later to be framed by output from listeners added earlier.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#generating-failures-in-listeners","title":"Generating Failures in Listeners","text":"<p>You may use failure-raising macros (<code>EXPECT_*()</code>, <code>ASSERT_*()</code>, <code>FAIL()</code>, etc) when processing an event. There are some restrictions:</p> <ol> <li>You cannot generate any failure in <code>OnTestPartResult()</code> (otherwise it will     cause <code>OnTestPartResult()</code> to be called recursively).</li> <li>A listener that handles <code>OnTestPartResult()</code> is not allowed to generate any     failure.</li> </ol> <p>When you add listeners to the listener list, you should put listeners that handle <code>OnTestPartResult()</code> before listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.</p> <p>See sample10_unittest.cc for an example of a failure-raising listener.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#running-test-programs-advanced-options","title":"Running Test Programs: Advanced Options","text":"<p>googletest test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call <code>::testing::InitGoogleTest()</code> before calling <code>RUN_ALL_TESTS()</code>.</p> <p>To see a list of supported flags and their usage, please run your test program with the <code>--help</code> flag. You can also use <code>-h</code>, <code>-?</code>, or <code>/?</code> for short.</p> <p>If an option is specified both by an environment variable and by a flag, the latter takes precedence.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#selecting-tests","title":"Selecting Tests","text":""},{"location":"build/_deps/googletest-src/docs/advanced.html#listing-test-names","title":"Listing Test Names","text":"<p>Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag <code>--gtest_list_tests</code> overrides all other flags and lists tests in the following format:</p> <pre><code>TestSuite1.\n  TestName1\n  TestName2\nTestSuite2.\n  TestName\n</code></pre> <p>None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#running-a-subset-of-the-tests","title":"Running a Subset of the Tests","text":"<p>By default, a googletest program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the <code>GTEST_FILTER</code> environment variable or the <code>--gtest_filter</code> flag to a filter string, googletest will only run the tests whose full names (in the form of <code>TestSuiteName.TestName</code>) match the filter.</p> <p>The format of a filter is a '<code>:</code>'-separated list of wildcard patterns (called the positive patterns) optionally followed by a '<code>-</code>' and another '<code>:</code>'-separated pattern list (called the negative patterns). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.</p> <p>A pattern may contain <code>'*'</code> (matches any string) or <code>'?'</code> (matches any single character). For convenience, the filter <code>'*-NegativePatterns'</code> can be also written as <code>'-NegativePatterns'</code>.</p> <p>For example:</p> <ul> <li><code>./foo_test</code> Has no flag, and thus runs all its tests.</li> <li><code>./foo_test --gtest_filter=*</code> Also runs everything, due to the single     match-everything <code>*</code> value.</li> <li><code>./foo_test --gtest_filter=FooTest.*</code> Runs everything in test suite     <code>FooTest</code> .</li> <li><code>./foo_test --gtest_filter=*Null*:*Constructor*</code> Runs any test whose full     name contains either <code>\"Null\"</code> or <code>\"Constructor\"</code> .</li> <li><code>./foo_test --gtest_filter=-*DeathTest.*</code> Runs all non-death tests.</li> <li><code>./foo_test --gtest_filter=FooTest.*-FooTest.Bar</code> Runs everything in test     suite <code>FooTest</code> except <code>FooTest.Bar</code>.</li> <li><code>./foo_test --gtest_filter=FooTest.*:BarTest.*-FooTest.Bar:BarTest.Foo</code> Runs     everything in test suite <code>FooTest</code> except <code>FooTest.Bar</code> and everything in     test suite <code>BarTest</code> except <code>BarTest.Foo</code>.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/advanced.html#stop-test-execution-upon-first-failure","title":"Stop test execution upon first failure","text":"<p>By default, a googletest program runs all tests the user has defined. In some cases (e.g. iterative test development &amp; execution) it may be desirable stop test execution upon first failure (trading improved latency for completeness). If <code>GTEST_FAIL_FAST</code> environment variable or <code>--gtest_fail_fast</code> flag is set, the test runner will stop execution as soon as the first test failure is found.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#temporarily-disabling-tests","title":"Temporarily Disabling Tests","text":"<p>If you have a broken test that you cannot fix right away, you can add the <code>DISABLED_</code> prefix to its name. This will exclude it from execution. This is better than commenting out the code or using <code>#if 0</code>, as disabled tests are still compiled (and thus won't rot).</p> <p>If you need to disable all tests in a test suite, you can either add <code>DISABLED_</code> to the front of the name of each test, or alternatively add it to the front of the test suite name.</p> <p>For example, the following tests won't be run by googletest, even though they will still be compiled:</p> <pre><code>// Tests that Foo does Abc.\nTEST(FooTest, DISABLED_DoesAbc) { ... }\n\nclass DISABLED_BarTest : public testing::Test { ... };\n\n// Tests that Bar does Xyz.\nTEST_F(DISABLED_BarTest, DoesXyz) { ... }\n</code></pre> <p>{: .callout .note} NOTE: This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, googletest will print a banner warning you if a test program contains any disabled tests.</p> <p>{: .callout .tip} TIP: You can easily count the number of disabled tests you have using <code>grep</code>. This number can be used as a metric for improving your test quality.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#temporarily-enabling-disabled-tests","title":"Temporarily Enabling Disabled Tests","text":"<p>To include disabled tests in test execution, just invoke the test program with the <code>--gtest_also_run_disabled_tests</code> flag or set the <code>GTEST_ALSO_RUN_DISABLED_TESTS</code> environment variable to a value other than <code>0</code>. You can combine this with the <code>--gtest_filter</code> flag to further select which disabled tests to run.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#repeating-the-tests","title":"Repeating the Tests","text":"<p>Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.</p> <p>The <code>--gtest_repeat</code> flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here's how to use it:</p> <pre><code>$ foo_test --gtest_repeat=1000\nRepeat foo_test 1000 times and don't stop at failures.\n\n$ foo_test --gtest_repeat=-1\nA negative count means repeating forever.\n\n$ foo_test --gtest_repeat=1000 --gtest_break_on_failure\nRepeat foo_test 1000 times, stopping at the first failure.  This\nis especially useful when running under a debugger: when the test\nfails, it will drop into the debugger and you can then inspect\nvariables and stacks.\n\n$ foo_test --gtest_repeat=1000 --gtest_filter=FooBar.*\nRepeat the tests whose name matches the filter 1000 times.\n</code></pre> <p>If your test program contains global set-up/tear-down code, it will be repeated in each iteration as well, as the flakiness may be in it. You can also specify the repeat count by setting the <code>GTEST_REPEAT</code> environment variable.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#shuffling-the-tests","title":"Shuffling the Tests","text":"<p>You can specify the <code>--gtest_shuffle</code> flag (or set the <code>GTEST_SHUFFLE</code> environment variable to <code>1</code>) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.</p> <p>By default, googletest uses a random seed calculated from the current time. Therefore you'll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the <code>--gtest_random_seed=SEED</code> flag (or set the <code>GTEST_RANDOM_SEED</code> environment variable), where <code>SEED</code> is an integer in the range [0, 99999]. The seed value 0 is special: it tells googletest to do the default behavior of calculating the seed from the current time.</p> <p>If you combine this with <code>--gtest_repeat=N</code>, googletest will pick a different random seed and re-shuffle the tests in each iteration.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#controlling-test-output","title":"Controlling Test Output","text":""},{"location":"build/_deps/googletest-src/docs/advanced.html#colored-terminal-output","title":"Colored Terminal Output","text":"<p>googletest can use colors in its terminal output to make it easier to spot the important information:</p> <pre>...\n[----------] 1 test from FooTest\n[ RUN      ] FooTest.DoesAbc\n[       OK ] FooTest.DoesAbc\n[----------] 2 tests from BarTest\n[ RUN      ] BarTest.HasXyzProperty\n[       OK ] BarTest.HasXyzProperty\n[ RUN      ] BarTest.ReturnsTrueOnSuccess\n... some error messages ...\n[   FAILED ] BarTest.ReturnsTrueOnSuccess\n...\n[==========] 30 tests from 14 test suites ran.\n[   PASSED ] 28 tests.\n[   FAILED ] 2 tests, listed below:\n[   FAILED ] BarTest.ReturnsTrueOnSuccess\n[   FAILED ] AnotherTest.DoesXyz\n\n 2 FAILED TESTS\n</pre> <p>You can set the <code>GTEST_COLOR</code> environment variable or the <code>--gtest_color</code> command line flag to <code>yes</code>, <code>no</code>, or <code>auto</code> (the default) to enable colors, disable colors, or let googletest decide. When the value is <code>auto</code>, googletest will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the <code>TERM</code> environment variable is set to <code>xterm</code> or <code>xterm-color</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#suppressing-test-passes","title":"Suppressing test passes","text":"<p>By default, googletest prints 1 line of output for each test, indicating if it passed or failed. To show only test failures, run the test program with <code>--gtest_brief=1</code>, or set the GTEST_BRIEF environment variable to <code>1</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#suppressing-the-elapsed-time","title":"Suppressing the Elapsed Time","text":"<p>By default, googletest prints the time it takes to run each test. To disable that, run the test program with the <code>--gtest_print_time=0</code> command line flag, or set the GTEST_PRINT_TIME environment variable to <code>0</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#suppressing-utf-8-text-output","title":"Suppressing UTF-8 Text Output","text":"<p>In case of assertion failures, googletest prints expected and actual values of type <code>string</code> both as hex-encoded strings as well as in readable UTF-8 text if they contain valid non-ASCII UTF-8 characters. If you want to suppress the UTF-8 text because, for example, you don't have an UTF-8 compatible output medium, run the test program with <code>--gtest_print_utf8=0</code> or set the <code>GTEST_PRINT_UTF8</code> environment variable to <code>0</code>.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#generating-an-xml-report","title":"Generating an XML Report","text":"<p>googletest can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.</p> <p>To generate the XML report, set the <code>GTEST_OUTPUT</code> environment variable or the <code>--gtest_output</code> flag to the string <code>\"xml:path_to_output_file\"</code>, which will create the file at the given location. You can also just use the string <code>\"xml\"</code>, in which case the output can be found in the <code>test_detail.xml</code> file in the current directory.</p> <p>If you specify a directory (for example, <code>\"xml:output/directory/\"</code> on Linux or <code>\"xml:output\\directory\\\"</code> on Windows), googletest will create the XML file in that directory, named after the test executable (e.g. <code>foo_test.xml</code> for test program <code>foo_test</code> or <code>foo_test.exe</code>). If the file already exists (perhaps left over from a previous run), googletest will pick a different name (e.g. <code>foo_test_1.xml</code>) to avoid overwriting it.</p> <p>The report is based on the <code>junitreport</code> Ant task. Since that format was originally intended for Java, a little interpretation is required to make it apply to googletest tests, as shown here:</p> <pre><code>&lt;testsuites name=\"AllTests\" ...&gt;\n  &lt;testsuite name=\"test_case_name\" ...&gt;\n    &lt;testcase    name=\"test_name\" ...&gt;\n      &lt;failure message=\"...\"/&gt;\n      &lt;failure message=\"...\"/&gt;\n      &lt;failure message=\"...\"/&gt;\n    &lt;/testcase&gt;\n  &lt;/testsuite&gt;\n&lt;/testsuites&gt;\n</code></pre> <ul> <li>The root <code>&lt;testsuites&gt;</code> element corresponds to the entire test program.</li> <li><code>&lt;testsuite&gt;</code> elements correspond to googletest test suites.</li> <li><code>&lt;testcase&gt;</code> elements correspond to googletest test functions.</li> </ul> <p>For instance, the following program</p> <pre><code>TEST(MathTest, Addition) { ... }\nTEST(MathTest, Subtraction) { ... }\nTEST(LogicTest, NonContradiction) { ... }\n</code></pre> <p>could generate this report:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;testsuites tests=\"3\" failures=\"1\" errors=\"0\" time=\"0.035\" timestamp=\"2011-10-31T18:52:42\" name=\"AllTests\"&gt;\n  &lt;testsuite name=\"MathTest\" tests=\"2\" failures=\"1\" errors=\"0\" time=\"0.015\"&gt;\n    &lt;testcase name=\"Addition\" status=\"run\" time=\"0.007\" classname=\"\"&gt;\n      &lt;failure message=\"Value of: add(1, 1)&amp;#x0A;  Actual: 3&amp;#x0A;Expected: 2\" type=\"\"&gt;...&lt;/failure&gt;\n      &lt;failure message=\"Value of: add(1, -1)&amp;#x0A;  Actual: 1&amp;#x0A;Expected: 0\" type=\"\"&gt;...&lt;/failure&gt;\n    &lt;/testcase&gt;\n    &lt;testcase name=\"Subtraction\" status=\"run\" time=\"0.005\" classname=\"\"&gt;\n    &lt;/testcase&gt;\n  &lt;/testsuite&gt;\n  &lt;testsuite name=\"LogicTest\" tests=\"1\" failures=\"0\" errors=\"0\" time=\"0.005\"&gt;\n    &lt;testcase name=\"NonContradiction\" status=\"run\" time=\"0.005\" classname=\"\"&gt;\n    &lt;/testcase&gt;\n  &lt;/testsuite&gt;\n&lt;/testsuites&gt;\n</code></pre> <p>Things to note:</p> <ul> <li> <p>The <code>tests</code> attribute of a <code>&lt;testsuites&gt;</code> or <code>&lt;testsuite&gt;</code> element tells how     many test functions the googletest program or test suite contains, while the     <code>failures</code> attribute tells how many of them failed.</p> </li> <li> <p>The <code>time</code> attribute expresses the duration of the test, test suite, or     entire test program in seconds.</p> </li> <li> <p>The <code>timestamp</code> attribute records the local date and time of the test     execution.</p> </li> <li> <p>Each <code>&lt;failure&gt;</code> element corresponds to a single failed googletest     assertion.</p> </li> </ul>"},{"location":"build/_deps/googletest-src/docs/advanced.html#generating-a-json-report","title":"Generating a JSON Report","text":"<p>googletest can also emit a JSON report as an alternative format to XML. To generate the JSON report, set the <code>GTEST_OUTPUT</code> environment variable or the <code>--gtest_output</code> flag to the string <code>\"json:path_to_output_file\"</code>, which will create the file at the given location. You can also just use the string <code>\"json\"</code>, in which case the output can be found in the <code>test_detail.json</code> file in the current directory.</p> <p>The report format conforms to the following JSON Schema:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"type\": \"object\",\n  \"definitions\": {\n    \"TestCase\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"tests\": { \"type\": \"integer\" },\n        \"failures\": { \"type\": \"integer\" },\n        \"disabled\": { \"type\": \"integer\" },\n        \"time\": { \"type\": \"string\" },\n        \"testsuite\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/TestInfo\"\n          }\n        }\n      }\n    },\n    \"TestInfo\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"status\": {\n          \"type\": \"string\",\n          \"enum\": [\"RUN\", \"NOTRUN\"]\n        },\n        \"time\": { \"type\": \"string\" },\n        \"classname\": { \"type\": \"string\" },\n        \"failures\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Failure\"\n          }\n        }\n      }\n    },\n    \"Failure\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"failures\": { \"type\": \"string\" },\n        \"type\": { \"type\": \"string\" }\n      }\n    }\n  },\n  \"properties\": {\n    \"tests\": { \"type\": \"integer\" },\n    \"failures\": { \"type\": \"integer\" },\n    \"disabled\": { \"type\": \"integer\" },\n    \"errors\": { \"type\": \"integer\" },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"time\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"string\" },\n    \"testsuites\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/TestCase\"\n      }\n    }\n  }\n}\n</code></pre> <p>The report uses the format that conforms to the following Proto3 using the JSON encoding:</p> <pre><code>syntax = \"proto3\";\n\npackage googletest;\n\nimport \"google/protobuf/timestamp.proto\";\nimport \"google/protobuf/duration.proto\";\n\nmessage UnitTest {\n  int32 tests = 1;\n  int32 failures = 2;\n  int32 disabled = 3;\n  int32 errors = 4;\n  google.protobuf.Timestamp timestamp = 5;\n  google.protobuf.Duration time = 6;\n  string name = 7;\n  repeated TestCase testsuites = 8;\n}\n\nmessage TestCase {\n  string name = 1;\n  int32 tests = 2;\n  int32 failures = 3;\n  int32 disabled = 4;\n  int32 errors = 5;\n  google.protobuf.Duration time = 6;\n  repeated TestInfo testsuite = 7;\n}\n\nmessage TestInfo {\n  string name = 1;\n  enum Status {\n    RUN = 0;\n    NOTRUN = 1;\n  }\n  Status status = 2;\n  google.protobuf.Duration time = 3;\n  string classname = 4;\n  message Failure {\n    string failures = 1;\n    string type = 2;\n  }\n  repeated Failure failures = 5;\n}\n</code></pre> <p>For instance, the following program</p> <pre><code>TEST(MathTest, Addition) { ... }\nTEST(MathTest, Subtraction) { ... }\nTEST(LogicTest, NonContradiction) { ... }\n</code></pre> <p>could generate this report:</p> <pre><code>{\n  \"tests\": 3,\n  \"failures\": 1,\n  \"errors\": 0,\n  \"time\": \"0.035s\",\n  \"timestamp\": \"2011-10-31T18:52:42Z\",\n  \"name\": \"AllTests\",\n  \"testsuites\": [\n    {\n      \"name\": \"MathTest\",\n      \"tests\": 2,\n      \"failures\": 1,\n      \"errors\": 0,\n      \"time\": \"0.015s\",\n      \"testsuite\": [\n        {\n          \"name\": \"Addition\",\n          \"status\": \"RUN\",\n          \"time\": \"0.007s\",\n          \"classname\": \"\",\n          \"failures\": [\n            {\n              \"message\": \"Value of: add(1, 1)\\n  Actual: 3\\nExpected: 2\",\n              \"type\": \"\"\n            },\n            {\n              \"message\": \"Value of: add(1, -1)\\n  Actual: 1\\nExpected: 0\",\n              \"type\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Subtraction\",\n          \"status\": \"RUN\",\n          \"time\": \"0.005s\",\n          \"classname\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LogicTest\",\n      \"tests\": 1,\n      \"failures\": 0,\n      \"errors\": 0,\n      \"time\": \"0.005s\",\n      \"testsuite\": [\n        {\n          \"name\": \"NonContradiction\",\n          \"status\": \"RUN\",\n          \"time\": \"0.005s\",\n          \"classname\": \"\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>{: .callout .important} IMPORTANT: The exact format of the JSON document is subject to change.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#controlling-how-failures-are-reported","title":"Controlling How Failures Are Reported","text":""},{"location":"build/_deps/googletest-src/docs/advanced.html#detecting-test-premature-exit","title":"Detecting Test Premature Exit","text":"<p>Google Test implements the premature-exit-file protocol for test runners to catch any kind of unexpected exits of test programs. Upon start, Google Test creates the file which will be automatically deleted after all work has been finished. Then, the test runner can check if this file exists. In case the file remains undeleted, the inspected test has exited prematurely.</p> <p>This feature is enabled only if the <code>TEST_PREMATURE_EXIT_FILE</code> environment variable has been set.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#turning-assertion-failures-into-break-points","title":"Turning Assertion Failures into Break-Points","text":"<p>When running test programs under a debugger, it's very convenient if the debugger can catch an assertion failure and automatically drop into interactive mode. googletest's break-on-failure mode supports this behavior.</p> <p>To enable it, set the <code>GTEST_BREAK_ON_FAILURE</code> environment variable to a value other than <code>0</code>. Alternatively, you can use the <code>--gtest_break_on_failure</code> command line flag.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#disabling-catching-test-thrown-exceptions","title":"Disabling Catching Test-Thrown Exceptions","text":"<p>googletest can be used either with or without exceptions enabled. If a test throws a C++ exception or (on Windows) a structured exception (SEH), by default googletest catches it, reports it as a test failure, and continues with the next test method. This maximizes the coverage of a test run. Also, on Windows an uncaught exception will cause a pop-up window, so catching the exceptions allows you to run the tests automatically.</p> <p>When debugging the test failures, however, you may instead want the exceptions to be handled by the debugger, such that you can examine the call stack when an exception is thrown. To achieve that, set the <code>GTEST_CATCH_EXCEPTIONS</code> environment variable to <code>0</code>, or use the <code>--gtest_catch_exceptions=0</code> flag when running the tests.</p>"},{"location":"build/_deps/googletest-src/docs/advanced.html#sanitizer-integration","title":"Sanitizer Integration","text":"<p>The Undefined Behavior Sanitizer, Address Sanitizer, and Thread Sanitizer all provide weak functions that you can override to trigger explicit failures when they detect sanitizer errors, such as creating a reference from <code>nullptr</code>. To override these functions, place definitions for them in a source file that you compile as part of your main binary:</p> <pre><code>extern \"C\" {\nvoid __ubsan_on_report() {\n  FAIL() &lt;&lt; \"Encountered an undefined behavior sanitizer error\";\n}\nvoid __asan_on_error() {\n  FAIL() &lt;&lt; \"Encountered an address sanitizer error\";\n}\nvoid __tsan_on_report() {\n  FAIL() &lt;&lt; \"Encountered a thread sanitizer error\";\n}\n}  // extern \"C\"\n</code></pre> <p>After compiling your project with one of the sanitizers enabled, if a particular test triggers a sanitizer error, googletest will report that it failed.</p>"},{"location":"build/_deps/googletest-src/docs/community_created_documentation.html","title":"Community-Created Documentation","text":"<p>The following is a list, in no particular order, of links to documentation created by the Googletest community.</p> <ul> <li>Googlemock Insights,     by ElectricRCAircraftGuy</li> </ul>"},{"location":"build/_deps/googletest-src/docs/faq.html","title":"Googletest FAQ","text":""},{"location":"build/_deps/googletest-src/docs/faq.html#why-should-test-suite-names-and-test-names-not-contain-underscore","title":"Why should test suite names and test names not contain underscore?","text":"<p>{: .callout .note} Note: Googletest reserves underscore (<code>_</code>) for special purpose keywords, such as the <code>DISABLED_</code> prefix, in addition to the following rationale.</p> <p>Underscore (<code>_</code>) is special, as C++ reserves the following to be used by the compiler and the standard library:</p> <ol> <li>any identifier that starts with an <code>_</code> followed by an upper-case letter, and</li> <li>any identifier that contains two consecutive underscores (i.e. <code>__</code>)     anywhere in its name.</li> </ol> <p>User code is prohibited from using such identifiers.</p> <p>Now let's look at what this means for <code>TEST</code> and <code>TEST_F</code>.</p> <p>Currently <code>TEST(TestSuiteName, TestName)</code> generates a class named <code>TestSuiteName_TestName_Test</code>. What happens if <code>TestSuiteName</code> or <code>TestName</code> contains <code>_</code>?</p> <ol> <li>If <code>TestSuiteName</code> starts with an <code>_</code> followed by an upper-case letter (say,     <code>_Foo</code>), we end up with <code>_Foo_TestName_Test</code>, which is reserved and thus     invalid.</li> <li>If <code>TestSuiteName</code> ends with an <code>_</code> (say, <code>Foo_</code>), we get     <code>Foo__TestName_Test</code>, which is invalid.</li> <li>If <code>TestName</code> starts with an <code>_</code> (say, <code>_Bar</code>), we get     <code>TestSuiteName__Bar_Test</code>, which is invalid.</li> <li>If <code>TestName</code> ends with an <code>_</code> (say, <code>Bar_</code>), we get     <code>TestSuiteName_Bar__Test</code>, which is invalid.</li> </ol> <p>So clearly <code>TestSuiteName</code> and <code>TestName</code> cannot start or end with <code>_</code> (Actually, <code>TestSuiteName</code> can start with <code>_</code> -- as long as the <code>_</code> isn't followed by an upper-case letter. But that's getting complicated. So for simplicity we just say that it cannot start with <code>_</code>.).</p> <p>It may seem fine for <code>TestSuiteName</code> and <code>TestName</code> to contain <code>_</code> in the middle. However, consider this:</p> <pre><code>TEST(Time, Flies_Like_An_Arrow) { ... }\nTEST(Time_Flies, Like_An_Arrow) { ... }\n</code></pre> <p>Now, the two <code>TEST</code>s will both generate the same class (<code>Time_Flies_Like_An_Arrow_Test</code>). That's not good.</p> <p>So for simplicity, we just ask the users to avoid <code>_</code> in <code>TestSuiteName</code> and <code>TestName</code>. The rule is more constraining than necessary, but it's simple and easy to remember. It also gives googletest some wiggle room in case its implementation needs to change in the future.</p> <p>If you violate the rule, there may not be immediate consequences, but your test may (just may) break with a new compiler (or a new version of the compiler you are using) or with a new version of googletest. Therefore it's best to follow the rule.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#why-does-googletest-support-expect_eqnull-ptr-and-assert_eqnull-ptr-but-not-expect_nenull-ptr-and-assert_nenull-ptr","title":"Why does googletest support <code>EXPECT_EQ(NULL, ptr)</code> and <code>ASSERT_EQ(NULL, ptr)</code> but not <code>EXPECT_NE(NULL, ptr)</code> and <code>ASSERT_NE(NULL, ptr)</code>?","text":"<p>First of all, you can use <code>nullptr</code> with each of these macros, e.g. <code>EXPECT_EQ(ptr, nullptr)</code>, <code>EXPECT_NE(ptr, nullptr)</code>, <code>ASSERT_EQ(ptr, nullptr)</code>, <code>ASSERT_NE(ptr, nullptr)</code>. This is the preferred syntax in the style guide because <code>nullptr</code> does not have the type problems that <code>NULL</code> does.</p> <p>Due to some peculiarity of C++, it requires some non-trivial template meta programming tricks to support using <code>NULL</code> as an argument of the <code>EXPECT_XX()</code> and <code>ASSERT_XX()</code> macros. Therefore we only do it where it's most needed (otherwise we make the implementation of googletest harder to maintain and more error-prone than necessary).</p> <p>Historically, the <code>EXPECT_EQ()</code> macro took the expected value as its first argument and the actual value as the second, though this argument order is now discouraged. It was reasonable that someone wanted to write <code>EXPECT_EQ(NULL, some_expression)</code>, and this indeed was requested several times. Therefore we implemented it.</p> <p>The need for <code>EXPECT_NE(NULL, ptr)</code> wasn't nearly as strong. When the assertion fails, you already know that <code>ptr</code> must be <code>NULL</code>, so it doesn't add any information to print <code>ptr</code> in this case. That means <code>EXPECT_TRUE(ptr != NULL)</code> works just as well.</p> <p>If we were to support <code>EXPECT_NE(NULL, ptr)</code>, for consistency we'd have to support <code>EXPECT_NE(ptr, NULL)</code> as well. This means using the template meta programming tricks twice in the implementation, making it even harder to understand and maintain. We believe the benefit doesn't justify the cost.</p> <p>Finally, with the growth of the gMock matcher library, we are encouraging people to use the unified <code>EXPECT_THAT(value, matcher)</code> syntax more often in tests. One significant advantage of the matcher approach is that matchers can be easily combined to form new matchers, while the <code>EXPECT_NE</code>, etc, macros cannot be easily combined. Therefore we want to invest more in the matchers than in the <code>EXPECT_XX()</code> macros.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#i-need-to-test-that-different-implementations-of-an-interface-satisfy-some-common-requirements-should-i-use-typed-tests-or-value-parameterized-tests","title":"I need to test that different implementations of an interface satisfy some common requirements. Should I use typed tests or value-parameterized tests?","text":"<p>For testing various implementations of the same interface, either typed tests or value-parameterized tests can get it done. It's really up to you the user to decide which is more convenient for you, depending on your particular case. Some rough guidelines:</p> <ul> <li>Typed tests can be easier to write if instances of the different     implementations can be created the same way, modulo the type. For example,     if all these implementations have a public default constructor (such that     you can write <code>new TypeParam</code>), or if their factory functions have the same     form (e.g. <code>CreateInstance&lt;TypeParam&gt;()</code>).</li> <li>Value-parameterized tests can be easier to write if you need different code     patterns to create different implementations' instances, e.g. <code>new Foo</code> vs     <code>new Bar(5)</code>. To accommodate for the differences, you can write factory     function wrappers and pass these function pointers to the tests as their     parameters.</li> <li>When a typed test fails, the default output includes the name of the type,     which can help you quickly identify which implementation is wrong.     Value-parameterized tests only show the number of the failed iteration by     default. You will need to define a function that returns the iteration name     and pass it as the third parameter to INSTANTIATE_TEST_SUITE_P to have more     useful output.</li> <li>When using typed tests, you need to make sure you are testing against the     interface type, not the concrete types (in other words, you want to make     sure <code>implicit_cast&lt;MyInterface*&gt;(my_concrete_impl)</code> works, not just that     <code>my_concrete_impl</code> works). It's less likely to make mistakes in this area     when using value-parameterized tests.</li> </ul> <p>I hope I didn't confuse you more. :-) If you don't mind, I'd suggest you to give both approaches a try. Practice is a much better way to grasp the subtle differences between the two tools. Once you have some concrete experience, you can much more easily decide which one to use the next time.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#i-got-some-run-time-errors-about-invalid-proto-descriptors-when-using-protocolmessageequals-help","title":"I got some run-time errors about invalid proto descriptors when using <code>ProtocolMessageEquals</code>. Help!","text":"<p>{: .callout .note} Note: <code>ProtocolMessageEquals</code> and <code>ProtocolMessageEquiv</code> are deprecated now. Please use <code>EqualsProto</code>, etc instead.</p> <p><code>ProtocolMessageEquals</code> and <code>ProtocolMessageEquiv</code> were redefined recently and are now less tolerant of invalid protocol captured_cout definitions. In particular, if you have a <code>foo.proto</code> that doesn't fully qualify the type of a protocol message it references (e.g. <code>message&lt;Bar&gt;</code> where it should be <code>message&lt;blah.Bar&gt;</code>), you will now get run-time errors like:</p> <pre><code>... descriptor.cc:...] Invalid proto descriptor for file \"path/to/foo.proto\":\n... descriptor.cc:...]  blah.MyMessage.my_field: \".Bar\" is not defined.\n</code></pre> <p>If you see this, your <code>.proto</code> file is broken and needs to be fixed by making the types fully qualified. The new definition of <code>ProtocolMessageEquals</code> and <code>ProtocolMessageEquiv</code> just happen to reveal your bug.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#my-death-test-modifies-some-state-but-the-change-seems-lost-after-the-death-test-finishes-why","title":"My death test modifies some state, but the change seems lost after the death test finishes. Why?","text":"<p>Death tests (<code>EXPECT_DEATH</code>, etc) are executed in a sub-process s.t. the expected crash won't kill the test program (i.e. the parent process). As a result, any in-memory side effects they incur are observable in their respective sub-processes, but not in the parent process. You can think of them as running in a parallel universe, more or less.</p> <p>In particular, if you use mocking and the death test statement invokes some mock methods, the parent process will think the calls have never occurred. Therefore, you may want to move your <code>EXPECT_CALL</code> statements inside the <code>EXPECT_DEATH</code> macro.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#expect_eqhtonlblah-blah_blah-generates-weird-compiler-errors-in-opt-mode-is-this-a-googletest-bug","title":"EXPECT_EQ(htonl(blah), blah_blah) generates weird compiler errors in opt mode. Is this a googletest bug?","text":"<p>Actually, the bug is in <code>htonl()</code>.</p> <p>According to <code>'man htonl'</code>, <code>htonl()</code> is a function, which means it's valid to use <code>htonl</code> as a function pointer. However, in opt mode <code>htonl()</code> is defined as a macro, which breaks this usage.</p> <p>Worse, the macro definition of <code>htonl()</code> uses a <code>gcc</code> extension and is not standard C++. That hacky implementation has some ad hoc limitations. In particular, it prevents you from writing <code>Foo&lt;sizeof(htonl(x))&gt;()</code>, where <code>Foo</code> is a template that has an integral argument.</p> <p>The implementation of <code>EXPECT_EQ(a, b)</code> uses <code>sizeof(... a ...)</code> inside a template argument, and thus doesn't compile in opt mode when <code>a</code> contains a call to <code>htonl()</code>. It is difficult to make <code>EXPECT_EQ</code> bypass the <code>htonl()</code> bug, as the solution must work with different compilers on various platforms.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#the-compiler-complains-about-undefined-references-to-some-static-const-member-variables-but-i-did-define-them-in-the-class-body-whats-wrong","title":"The compiler complains about \"undefined references\" to some static const member variables, but I did define them in the class body. What's wrong?","text":"<p>If your class has a static data member:</p> <pre><code>// foo.h\nclass Foo {\n  ...\n  static const int kBar = 100;\n};\n</code></pre> <p>You also need to define it outside of the class body in <code>foo.cc</code>:</p> <pre><code>const int Foo::kBar;  // No initializer here.\n</code></pre> <p>Otherwise your code is invalid C++, and may break in unexpected ways. In particular, using it in googletest comparison assertions (<code>EXPECT_EQ</code>, etc) will generate an \"undefined reference\" linker error. The fact that \"it used to work\" doesn't mean it's valid. It just means that you were lucky. :-)</p> <p>If the declaration of the static data member is <code>constexpr</code> then it is implicitly an <code>inline</code> definition, and a separate definition in <code>foo.cc</code> is not needed:</p> <pre><code>// foo.h\nclass Foo {\n  ...\n  static constexpr int kBar = 100;  // Defines kBar, no need to do it in foo.cc.\n};\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/faq.html#can-i-derive-a-test-fixture-from-another","title":"Can I derive a test fixture from another?","text":"<p>Yes.</p> <p>Each test fixture has a corresponding and same named test suite. This means only one test suite can use a particular fixture. Sometimes, however, multiple test cases may want to use the same or slightly different fixtures. For example, you may want to make sure that all of a GUI library's test suites don't leak important system resources like fonts and brushes.</p> <p>In googletest, you share a fixture among test suites by putting the shared logic in a base test fixture, then deriving from that base a separate fixture for each test suite that wants to use this common logic. You then use <code>TEST_F()</code> to write tests using each derived fixture.</p> <p>Typically, your code looks like this:</p> <pre><code>// Defines a base test fixture.\nclass BaseTest : public ::testing::Test {\n protected:\n  ...\n};\n\n// Derives a fixture FooTest from BaseTest.\nclass FooTest : public BaseTest {\n protected:\n  void SetUp() override {\n    BaseTest::SetUp();  // Sets up the base fixture first.\n    ... additional set-up work ...\n  }\n\n  void TearDown() override {\n    ... clean-up work for FooTest ...\n    BaseTest::TearDown();  // Remember to tear down the base fixture\n                           // after cleaning up FooTest!\n  }\n\n  ... functions and variables for FooTest ...\n};\n\n// Tests that use the fixture FooTest.\nTEST_F(FooTest, Bar) { ... }\nTEST_F(FooTest, Baz) { ... }\n\n... additional fixtures derived from BaseTest ...\n</code></pre> <p>If necessary, you can continue to derive test fixtures from a derived fixture. googletest has no limit on how deep the hierarchy can be.</p> <p>For a complete example using derived test fixtures, see sample5_unittest.cc.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#my-compiler-complains-void-value-not-ignored-as-it-ought-to-be-what-does-this-mean","title":"My compiler complains \"void value not ignored as it ought to be.\" What does this mean?","text":"<p>You're probably using an <code>ASSERT_*()</code> in a function that doesn't return <code>void</code>. <code>ASSERT_*()</code> can only be used in <code>void</code> functions, due to exceptions being disabled by our build system. Please see more details here.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#my-death-test-hangs-or-seg-faults-how-do-i-fix-it","title":"My death test hangs (or seg-faults). How do I fix it?","text":"<p>In googletest, death tests are run in a child process and the way they work is delicate. To write death tests you really need to understand how they work\u2014see the details at Death Assertions in the Assertions Reference.</p> <p>In particular, death tests don't like having multiple threads in the parent process. So the first thing you can try is to eliminate creating threads outside of <code>EXPECT_DEATH()</code>. For example, you may want to use mocks or fake objects instead of real ones in your tests.</p> <p>Sometimes this is impossible as some library you must use may be creating threads before <code>main()</code> is even reached. In this case, you can try to minimize the chance of conflicts by either moving as many activities as possible inside <code>EXPECT_DEATH()</code> (in the extreme case, you want to move everything inside), or leaving as few things as possible in it. Also, you can try to set the death test style to <code>\"threadsafe\"</code>, which is safer but slower, and see if it helps.</p> <p>If you go with thread-safe death tests, remember that they rerun the test program from the beginning in the child process. Therefore make sure your program can run side-by-side with itself and is deterministic.</p> <p>In the end, this boils down to good concurrent programming. You have to make sure that there are no race conditions or deadlocks in your program. No silver bullet - sorry!</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#should-i-use-the-constructordestructor-of-the-test-fixture-or-setupteardown-ctorvssetup","title":"Should I use the constructor/destructor of the test fixture or SetUp()/TearDown()? {#CtorVsSetUp}","text":"<p>The first thing to remember is that googletest does not reuse the same test fixture object across multiple tests. For each <code>TEST_F</code>, googletest will create a fresh test fixture object, immediately call <code>SetUp()</code>, run the test body, call <code>TearDown()</code>, and then delete the test fixture object.</p> <p>When you need to write per-test set-up and tear-down logic, you have the choice between using the test fixture constructor/destructor or <code>SetUp()/TearDown()</code>. The former is usually preferred, as it has the following benefits:</p> <ul> <li>By initializing a member variable in the constructor, we have the option to     make it <code>const</code>, which helps prevent accidental changes to its value and     makes the tests more obviously correct.</li> <li>In case we need to subclass the test fixture class, the subclass'     constructor is guaranteed to call the base class' constructor first, and     the subclass' destructor is guaranteed to call the base class' destructor     afterward. With <code>SetUp()/TearDown()</code>, a subclass may make the mistake of     forgetting to call the base class' <code>SetUp()/TearDown()</code> or call them at the     wrong time.</li> </ul> <p>You may still want to use <code>SetUp()/TearDown()</code> in the following cases:</p> <ul> <li>C++ does not allow virtual function calls in constructors and destructors.     You can call a method declared as virtual, but it will not use dynamic     dispatch, it will use the definition from the class the constructor of which     is currently executing. This is because calling a virtual method before the     derived class constructor has a chance to run is very dangerous - the     virtual method might operate on uninitialized data. Therefore, if you need     to call a method that will be overridden in a derived class, you have to use     <code>SetUp()/TearDown()</code>.</li> <li>In the body of a constructor (or destructor), it's not possible to use the     <code>ASSERT_xx</code> macros. Therefore, if the set-up operation could cause a fatal     test failure that should prevent the test from running, it's necessary to     use <code>abort</code> and abort the whole test     executable, or to use <code>SetUp()</code> instead of a constructor.</li> <li>If the tear-down operation could throw an exception, you must use     <code>TearDown()</code> as opposed to the destructor, as throwing in a destructor leads     to undefined behavior and usually will kill your program right away. Note     that many standard libraries (like STL) may throw when exceptions are     enabled in the compiler. Therefore you should prefer <code>TearDown()</code> if you     want to write portable tests that work with or without exceptions.</li> <li>The googletest team is considering making the assertion macros throw on     platforms where exceptions are enabled (e.g. Windows, Mac OS, and Linux     client-side), which will eliminate the need for the user to propagate     failures from a subroutine to its caller. Therefore, you shouldn't use     googletest assertions in a destructor if your code could run on such a     platform.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/faq.html#the-compiler-complains-no-matching-function-to-call-when-i-use-assert_pred-how-do-i-fix-it","title":"The compiler complains \"no matching function to call\" when I use ASSERT_PRED*. How do I fix it?","text":"<p>See details for <code>EXPECT_PRED*</code> in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#my-compiler-complains-about-ignoring-return-value-when-i-call-run_all_tests-why","title":"My compiler complains about \"ignoring return value\" when I call RUN_ALL_TESTS(). Why?","text":"<p>Some people had been ignoring the return value of <code>RUN_ALL_TESTS()</code>. That is, instead of</p> <pre><code>  return RUN_ALL_TESTS();\n</code></pre> <p>they write</p> <pre><code>  RUN_ALL_TESTS();\n</code></pre> <p>This is wrong and dangerous. The testing services needs to see the return value of <code>RUN_ALL_TESTS()</code> in order to determine if a test has passed. If your <code>main()</code> function ignores it, your test will be considered successful even if it has a googletest assertion failure. Very bad.</p> <p>We have decided to fix this (thanks to Michael Chastain for the idea). Now, your code will no longer be able to ignore <code>RUN_ALL_TESTS()</code> when compiled with <code>gcc</code>. If you do so, you'll get a compiler error.</p> <p>If you see the compiler complaining about you ignoring the return value of <code>RUN_ALL_TESTS()</code>, the fix is simple: just make sure its value is used as the return value of <code>main()</code>.</p> <p>But how could we introduce a change that breaks existing tests? Well, in this case, the code was already broken in the first place, so we didn't break it. :-)</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#my-compiler-complains-that-a-constructor-or-destructor-cannot-return-a-value-whats-going-on","title":"My compiler complains that a constructor (or destructor) cannot return a value. What's going on?","text":"<p>Due to a peculiarity of C++, in order to support the syntax for streaming messages to an <code>ASSERT_*</code>, e.g.</p> <pre><code>  ASSERT_EQ(1, Foo()) &lt;&lt; \"blah blah\" &lt;&lt; foo;\n</code></pre> <p>we had to give up using <code>ASSERT*</code> and <code>FAIL*</code> (but not <code>EXPECT*</code> and <code>ADD_FAILURE*</code>) in constructors and destructors. The workaround is to move the content of your constructor/destructor to a private void member function, or switch to <code>EXPECT_*()</code> if that works. This section in the user's guide explains it.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#my-setup-function-is-not-called-why","title":"My SetUp() function is not called. Why?","text":"<p>C++ is case-sensitive. Did you spell it as <code>Setup()</code>?</p> <p>Similarly, sometimes people spell <code>SetUpTestSuite()</code> as <code>SetupTestSuite()</code> and wonder why it's never called.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#i-have-several-test-suites-which-share-the-same-test-fixture-logic-do-i-have-to-define-a-new-test-fixture-class-for-each-of-them-this-seems-pretty-tedious","title":"I have several test suites which share the same test fixture logic, do I have to define a new test fixture class for each of them? This seems pretty tedious.","text":"<p>You don't have to. Instead of</p> <pre><code>class FooTest : public BaseTest {};\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\nclass BarTest : public BaseTest {};\n\nTEST_F(BarTest, Abc) { ... }\nTEST_F(BarTest, Def) { ... }\n</code></pre> <p>you can simply <code>typedef</code> the test fixtures:</p> <pre><code>typedef BaseTest FooTest;\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\ntypedef BaseTest BarTest;\n\nTEST_F(BarTest, Abc) { ... }\nTEST_F(BarTest, Def) { ... }\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/faq.html#googletest-output-is-buried-in-a-whole-bunch-of-log-messages-what-do-i-do","title":"googletest output is buried in a whole bunch of LOG messages. What do I do?","text":"<p>The googletest output is meant to be a concise and human-friendly report. If your test generates textual output itself, it will mix with the googletest output, making it hard to read. However, there is an easy solution to this problem.</p> <p>Since <code>LOG</code> messages go to stderr, we decided to let googletest output go to stdout. This way, you can easily separate the two using redirection. For example:</p> <pre><code>$ ./my_test &gt; gtest_output.txt\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/faq.html#why-should-i-prefer-test-fixtures-over-global-variables","title":"Why should I prefer test fixtures over global variables?","text":"<p>There are several good reasons:</p> <ol> <li>It's likely your test needs to change the states of its global variables.     This makes it difficult to keep side effects from escaping one test and     contaminating others, making debugging difficult. By using fixtures, each     test has a fresh set of variables that's different (but with the same     names). Thus, tests are kept independent of each other.</li> <li>Global variables pollute the global namespace.</li> <li>Test fixtures can be reused via subclassing, which cannot be done easily     with global variables. This is useful if many test suites have something in     common.</li> </ol>"},{"location":"build/_deps/googletest-src/docs/faq.html#what-can-the-statement-argument-in-assert_death-be","title":"What can the statement argument in ASSERT_DEATH() be?","text":"<p><code>ASSERT_DEATH(statement, matcher)</code> (or any death assertion macro) can be used wherever <code>statement</code> is valid. So basically <code>statement</code> can be any C++ statement that makes sense in the current context. In particular, it can reference global and/or local variables, and can be:</p> <ul> <li>a simple function call (often the case),</li> <li>a complex expression, or</li> <li>a compound statement.</li> </ul> <p>Some examples are shown here:</p> <pre><code>// A death test can be a simple function call.\nTEST(MyDeathTest, FunctionCall) {\n  ASSERT_DEATH(Xyz(5), \"Xyz failed\");\n}\n\n// Or a complex expression that references variables and functions.\nTEST(MyDeathTest, ComplexExpression) {\n  const bool c = Condition();\n  ASSERT_DEATH((c ? Func1(0) : object2.Method(\"test\")),\n               \"(Func1|Method) failed\");\n}\n\n// Death assertions can be used anywhere in a function.  In\n// particular, they can be inside a loop.\nTEST(MyDeathTest, InsideLoop) {\n  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\n  for (int i = 0; i &lt; 5; i++) {\n    EXPECT_DEATH_M(Foo(i), \"Foo has \\\\d+ errors\",\n                   ::testing::Message() &lt;&lt; \"where i is \" &lt;&lt; i);\n  }\n}\n\n// A death assertion can contain a compound statement.\nTEST(MyDeathTest, CompoundStatement) {\n  // Verifies that at lease one of Bar(0), Bar(1), ..., and\n  // Bar(4) dies.\n  ASSERT_DEATH({\n    for (int i = 0; i &lt; 5; i++) {\n      Bar(i);\n    }\n  },\n  \"Bar has \\\\d+ errors\");\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/faq.html#i-have-a-fixture-class-footest-but-test_ffootest-bar-gives-me-error-no-matching-function-for-call-to-footestfootest-why","title":"I have a fixture class <code>FooTest</code>, but <code>TEST_F(FooTest, Bar)</code> gives me error <code>\"no matching function for call to `FooTest::FooTest()'\"</code>. Why?","text":"<p>Googletest needs to be able to create objects of your test fixture class, so it must have a default constructor. Normally the compiler will define one for you. However, there are cases where you have to define your own:</p> <ul> <li>If you explicitly declare a non-default constructor for class <code>FooTest</code>     (<code>DISALLOW_EVIL_CONSTRUCTORS()</code> does this), then you need to define a     default constructor, even if it would be empty.</li> <li>If <code>FooTest</code> has a const non-static data member, then you have to define the     default constructor and initialize the const member in the initializer     list of the constructor. (Early versions of <code>gcc</code> doesn't force you to     initialize the const member. It's a bug that has been fixed in <code>gcc 4</code>.)</li> </ul>"},{"location":"build/_deps/googletest-src/docs/faq.html#why-does-assert_death-complain-about-previous-threads-that-were-already-joined","title":"Why does ASSERT_DEATH complain about previous threads that were already joined?","text":"<p>With the Linux pthread library, there is no turning back once you cross the line from a single thread to multiple threads. The first time you create a thread, a manager thread is created in addition, so you get 3, not 2, threads. Later when the thread you create joins the main thread, the thread count decrements by 1, but the manager thread will never be killed, so you still have 2 threads, which means you cannot safely run a death test.</p> <p>The new NPTL thread library doesn't suffer from this problem, as it doesn't create a manager thread. However, if you don't control which machine your test runs on, you shouldn't depend on this.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#why-does-googletest-require-the-entire-test-suite-instead-of-individual-tests-to-be-named-deathtest-when-it-uses-assert_death","title":"Why does googletest require the entire test suite, instead of individual tests, to be named *DeathTest when it uses ASSERT_DEATH?","text":"<p>googletest does not interleave tests from different test suites. That is, it runs all tests in one test suite first, and then runs all tests in the next test suite, and so on. googletest does this because it needs to set up a test suite before the first test in it is run, and tear it down afterwards. Splitting up the test case would require multiple set-up and tear-down processes, which is inefficient and makes the semantics unclean.</p> <p>If we were to determine the order of tests based on test name instead of test case name, then we would have a problem with the following situation:</p> <pre><code>TEST_F(FooTest, AbcDeathTest) { ... }\nTEST_F(FooTest, Uvw) { ... }\n\nTEST_F(BarTest, DefDeathTest) { ... }\nTEST_F(BarTest, Xyz) { ... }\n</code></pre> <p>Since <code>FooTest.AbcDeathTest</code> needs to run before <code>BarTest.Xyz</code>, and we don't interleave tests from different test suites, we need to run all tests in the <code>FooTest</code> case before running any test in the <code>BarTest</code> case. This contradicts with the requirement to run <code>BarTest.DefDeathTest</code> before <code>FooTest.Uvw</code>.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#but-i-dont-like-calling-my-entire-test-suite-deathtest-when-it-contains-both-death-tests-and-non-death-tests-what-do-i-do","title":"But I don't like calling my entire test suite *DeathTest when it contains both death tests and non-death tests. What do I do?","text":"<p>You don't have to, but if you like, you may split up the test suite into <code>FooTest</code> and <code>FooDeathTest</code>, where the names make it clear that they are related:</p> <pre><code>class FooTest : public ::testing::Test { ... };\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\nusing FooDeathTest = FooTest;\n\nTEST_F(FooDeathTest, Uvw) { ... EXPECT_DEATH(...) ... }\nTEST_F(FooDeathTest, Xyz) { ... ASSERT_DEATH(...) ... }\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/faq.html#googletest-prints-the-log-messages-in-a-death-tests-child-process-only-when-the-test-fails-how-can-i-see-the-log-messages-when-the-death-test-succeeds","title":"googletest prints the LOG messages in a death test's child process only when the test fails. How can I see the LOG messages when the death test succeeds?","text":"<p>Printing the LOG messages generated by the statement inside <code>EXPECT_DEATH()</code> makes it harder to search for real problems in the parent's log. Therefore, googletest only prints them when the death test has failed.</p> <p>If you really need to see such LOG messages, a workaround is to temporarily break the death test (e.g. by changing the regex pattern it is expected to match). Admittedly, this is a hack. We'll consider a more permanent solution after the fork-and-exec-style death tests are implemented.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#the-compiler-complains-about-no-match-for-operator-when-i-use-an-assertion-what-gives","title":"The compiler complains about <code>no match for 'operator&lt;&lt;'</code> when I use an assertion. What gives?","text":"<p>If you use a user-defined type <code>FooType</code> in an assertion, you must make sure there is an <code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const FooType&amp;)</code> function defined such that we can print a value of <code>FooType</code>.</p> <p>In addition, if <code>FooType</code> is declared in a name space, the <code>&lt;&lt;</code> operator also needs to be defined in the same name space. See Tip of the Week #49 for details.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#how-do-i-suppress-the-memory-leak-messages-on-windows","title":"How do I suppress the memory leak messages on Windows?","text":"<p>Since the statically initialized googletest singleton requires allocations on the heap, the Visual C++ memory leak detector will report memory leaks at the end of the program run. The easiest way to avoid this is to use the <code>_CrtMemCheckpoint</code> and <code>_CrtMemDumpAllObjectsSince</code> calls to not report any statically initialized heap objects. See MSDN for more details and additional heap check/debug routines.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#how-can-my-code-detect-if-it-is-running-in-a-test","title":"How can my code detect if it is running in a test?","text":"<p>If you write code that sniffs whether it's running in a test and does different things accordingly, you are leaking test-only logic into production code and there is no easy way to ensure that the test-only code paths aren't run by mistake in production. Such cleverness also leads to Heisenbugs. Therefore we strongly advise against the practice, and googletest doesn't provide a way to do it.</p> <p>In general, the recommended way to cause the code to behave differently under test is Dependency Injection. You can inject different functionality from the test and from the production code. Since your production code doesn't link in the for-test logic at all (the <code>testonly</code> attribute for BUILD targets helps to ensure that), there is no danger in accidentally running it.</p> <p>However, if you really, really, really have no choice, and if you follow the rule of ending your test program names with <code>_test</code>, you can use the horrible hack of sniffing your executable name (<code>argv[0]</code> in <code>main()</code>) to know whether the code is under test.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#how-do-i-temporarily-disable-a-test","title":"How do I temporarily disable a test?","text":"<p>If you have a broken test that you cannot fix right away, you can add the <code>DISABLED_</code> prefix to its name. This will exclude it from execution. This is better than commenting out the code or using <code>#if 0</code>, as disabled tests are still compiled (and thus won't rot).</p> <p>To include disabled tests in test execution, just invoke the test program with the <code>--gtest_also_run_disabled_tests</code> flag.</p>"},{"location":"build/_deps/googletest-src/docs/faq.html#is-it-ok-if-i-have-two-separate-testfoo-bar-test-methods-defined-in-different-namespaces","title":"Is it OK if I have two separate <code>TEST(Foo, Bar)</code> test methods defined in different namespaces?","text":"<p>Yes.</p> <p>The rule is all test methods in the same test suite must use the same fixture class. This means that the following is allowed because both tests use the same fixture class (<code>::testing::Test</code>).</p> <pre><code>namespace foo {\nTEST(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n\nnamespace bar {\nTEST(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace bar\n</code></pre> <p>However, the following code is not allowed and will produce a runtime error from googletest because the test methods are using different test fixture classes with the same test suite name.</p> <pre><code>namespace foo {\nclass CoolTest : public ::testing::Test {};  // Fixture foo::CoolTest\nTEST_F(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n\nnamespace bar {\nclass CoolTest : public ::testing::Test {};  // Fixture: bar::CoolTest\nTEST_F(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace bar\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html","title":"gMock Cheat Sheet","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#defining-a-mock-class","title":"Defining a Mock Class","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#mocking-a-normal-class-mockclass","title":"Mocking a Normal Class {#MockClass}","text":"<p>Given</p> <pre><code>class Foo {\n  ...\n  virtual ~Foo();\n  virtual int GetSize() const = 0;\n  virtual string Describe(const char* name) = 0;\n  virtual string Describe(int type) = 0;\n  virtual bool Process(Bar elem, int count) = 0;\n};\n</code></pre> <p>(note that <code>~Foo()</code> must be virtual) we can define its mock as</p> <pre><code>#include \"gmock/gmock.h\"\n\nclass MockFoo : public Foo {\n  ...\n  MOCK_METHOD(int, GetSize, (), (const, override));\n  MOCK_METHOD(string, Describe, (const char* name), (override));\n  MOCK_METHOD(string, Describe, (int type), (override));\n  MOCK_METHOD(bool, Process, (Bar elem, int count), (override));\n};\n</code></pre> <p>To create a \"nice\" mock, which ignores all uninteresting calls, a \"naggy\" mock, which warns on all uninteresting calls, or a \"strict\" mock, which treats them as failures:</p> <pre><code>using ::testing::NiceMock;\nusing ::testing::NaggyMock;\nusing ::testing::StrictMock;\n\nNiceMock&lt;MockFoo&gt; nice_foo;      // The type is a subclass of MockFoo.\nNaggyMock&lt;MockFoo&gt; naggy_foo;    // The type is a subclass of MockFoo.\nStrictMock&lt;MockFoo&gt; strict_foo;  // The type is a subclass of MockFoo.\n</code></pre> <p>{: .callout .note} Note: A mock object is currently naggy by default. We may make it nice by default in the future.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#mocking-a-class-template-mocktemplate","title":"Mocking a Class Template {#MockTemplate}","text":"<p>Class templates can be mocked just like any class.</p> <p>To mock</p> <pre><code>template &lt;typename Elem&gt;\nclass StackInterface {\n  ...\n  virtual ~StackInterface();\n  virtual int GetSize() const = 0;\n  virtual void Push(const Elem&amp; x) = 0;\n};\n</code></pre> <p>(note that all member functions that are mocked, including <code>~StackInterface()</code> must be virtual).</p> <pre><code>template &lt;typename Elem&gt;\nclass MockStack : public StackInterface&lt;Elem&gt; {\n  ...\n  MOCK_METHOD(int, GetSize, (), (const, override));\n  MOCK_METHOD(void, Push, (const Elem&amp; x), (override));\n};\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#specifying-calling-conventions-for-mock-functions","title":"Specifying Calling Conventions for Mock Functions","text":"<p>If your mock function doesn't use the default calling convention, you can specify it by adding <code>Calltype(convention)</code> to <code>MOCK_METHOD</code>'s 4th parameter. For example,</p> <pre><code>  MOCK_METHOD(bool, Foo, (int n), (Calltype(STDMETHODCALLTYPE)));\n  MOCK_METHOD(int, Bar, (double x, double y),\n              (const, Calltype(STDMETHODCALLTYPE)));\n</code></pre> <p>where <code>STDMETHODCALLTYPE</code> is defined by <code>&lt;objbase.h&gt;</code> on Windows.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#using-mocks-in-tests-usingmocks","title":"Using Mocks in Tests {#UsingMocks}","text":"<p>The typical work flow is:</p> <ol> <li>Import the gMock names you need to use. All gMock symbols are in the     <code>testing</code> namespace unless they are macros or otherwise noted.</li> <li>Create the mock objects.</li> <li>Optionally, set the default actions of the mock objects.</li> <li>Set your expectations on the mock objects (How will they be called? What     will they do?).</li> <li>Exercise code that uses the mock objects; if necessary, check the result     using googletest assertions.</li> <li>When a mock object is destructed, gMock automatically verifies that all     expectations on it have been satisfied.</li> </ol> <p>Here's an example:</p> <pre><code>using ::testing::Return;                          // #1\n\nTEST(BarTest, DoesThis) {\n  MockFoo foo;                                    // #2\n\n  ON_CALL(foo, GetSize())                         // #3\n      .WillByDefault(Return(1));\n  // ... other default actions ...\n\n  EXPECT_CALL(foo, Describe(5))                   // #4\n      .Times(3)\n      .WillRepeatedly(Return(\"Category 5\"));\n  // ... other expectations ...\n\n  EXPECT_EQ(MyProductionFunction(&amp;foo), \"good\");  // #5\n}                                                 // #6\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#setting-default-actions-oncall","title":"Setting Default Actions {#OnCall}","text":"<p>gMock has a built-in default action for any function that returns <code>void</code>, <code>bool</code>, a numeric value, or a pointer. In C++11, it will additionally returns the default-constructed value, if one exists for the given type.</p> <p>To customize the default action for functions with return type <code>T</code>, use <code>DefaultValue&lt;T&gt;</code>. For example:</p> <pre><code>  // Sets the default action for return type std::unique_ptr&lt;Buzz&gt; to\n  // creating a new Buzz every time.\n  DefaultValue&lt;std::unique_ptr&lt;Buzz&gt;&gt;::SetFactory(\n      [] { return MakeUnique&lt;Buzz&gt;(AccessLevel::kInternal); });\n\n  // When this fires, the default action of MakeBuzz() will run, which\n  // will return a new Buzz object.\n  EXPECT_CALL(mock_buzzer_, MakeBuzz(\"hello\")).Times(AnyNumber());\n\n  auto buzz1 = mock_buzzer_.MakeBuzz(\"hello\");\n  auto buzz2 = mock_buzzer_.MakeBuzz(\"hello\");\n  EXPECT_NE(buzz1, nullptr);\n  EXPECT_NE(buzz2, nullptr);\n  EXPECT_NE(buzz1, buzz2);\n\n  // Resets the default action for return type std::unique_ptr&lt;Buzz&gt;,\n  // to avoid interfere with other tests.\n  DefaultValue&lt;std::unique_ptr&lt;Buzz&gt;&gt;::Clear();\n</code></pre> <p>To customize the default action for a particular method of a specific mock object, use <code>ON_CALL</code>. <code>ON_CALL</code> has a similar syntax to <code>EXPECT_CALL</code>, but it is used for setting default behaviors when you do not require that the mock method is called. See Knowing When to Expect for a more detailed discussion.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#setting-expectations-expectcall","title":"Setting Expectations {#ExpectCall}","text":"<p>See <code>EXPECT_CALL</code> in the Mocking Reference.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#matchers-matcherlist","title":"Matchers {#MatcherList}","text":"<p>See the Matchers Reference.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#actions-actionlist","title":"Actions {#ActionList}","text":"<p>See the Actions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#cardinalities-cardinalitylist","title":"Cardinalities {#CardinalityList}","text":"<p>See the <code>Times</code> clause of <code>EXPECT_CALL</code> in the Mocking Reference.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#expectation-order","title":"Expectation Order","text":"<p>By default, expectations can be matched in any order. If some or all expectations must be matched in a given order, you can use the <code>After</code> clause or <code>InSequence</code> clause of <code>EXPECT_CALL</code>, or use an <code>InSequence</code> object.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#verifying-and-resetting-a-mock","title":"Verifying and Resetting a Mock","text":"<p>gMock will verify the expectations on a mock object when it is destructed, or you can do it earlier:</p> <pre><code>using ::testing::Mock;\n...\n// Verifies and removes the expectations on mock_obj;\n// returns true if and only if successful.\nMock::VerifyAndClearExpectations(&amp;mock_obj);\n...\n// Verifies and removes the expectations on mock_obj;\n// also removes the default actions set by ON_CALL();\n// returns true if and only if successful.\nMock::VerifyAndClear(&amp;mock_obj);\n</code></pre> <p>Do not set new expectations after verifying and clearing a mock after its use. Setting expectations after code that exercises the mock has undefined behavior. See Using Mocks in Tests for more information.</p> <p>You can also tell gMock that a mock object can be leaked and doesn't need to be verified:</p> <pre><code>Mock::AllowLeak(&amp;mock_obj);\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#mock-classes","title":"Mock Classes","text":"<p>gMock defines a convenient mock class template</p> <pre><code>class MockFunction&lt;R(A1, ..., An)&gt; {\n public:\n  MOCK_METHOD(R, Call, (A1, ..., An));\n};\n</code></pre> <p>See this recipe for one application of it.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cheat_sheet.html#flags","title":"Flags","text":"Flag Description <code>--gmock_catch_leaked_mocks=0</code> Don't report leaked mock objects as failures. <code>--gmock_verbose=LEVEL</code> Sets the default verbosity level (<code>info</code>, <code>warning</code>, or <code>error</code>) of Google Mock messages."},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html","title":"gMock Cookbook","text":"<p>You can find recipes for using gMock here. If you haven't yet, please read the dummy guide first to make sure you understand the basics.</p> <p>{: .callout .note} Note: gMock lives in the <code>testing</code> name space. For readability, it is recommended to write <code>using ::testing::Foo;</code> once in your file before using the name <code>Foo</code> defined by gMock. We omit such <code>using</code> statements in this section for brevity, but you should do it in your own code.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#creating-mock-classes","title":"Creating Mock Classes","text":"<p>Mock classes are defined as normal classes, using the <code>MOCK_METHOD</code> macro to generate mocked methods. The macro gets 3 or 4 parameters:</p> <pre><code>class MyMock {\n public:\n  MOCK_METHOD(ReturnType, MethodName, (Args...));\n  MOCK_METHOD(ReturnType, MethodName, (Args...), (Specs...));\n};\n</code></pre> <p>The first 3 parameters are simply the method declaration, split into 3 parts. The 4th parameter accepts a closed list of qualifiers, which affect the generated method:</p> <ul> <li><code>const</code> - Makes the mocked method a <code>const</code> method. Required if     overriding a <code>const</code> method.</li> <li><code>override</code> - Marks the method with <code>override</code>. Recommended if overriding     a <code>virtual</code> method.</li> <li><code>noexcept</code> - Marks the method with <code>noexcept</code>. Required if overriding a     <code>noexcept</code> method.</li> <li><code>Calltype(...)</code> - Sets the call type for the method (e.g. to     <code>STDMETHODCALLTYPE</code>), useful in Windows.</li> <li><code>ref(...)</code> - Marks the method with the reference qualification     specified. Required if overriding a method that has reference     qualifications. Eg <code>ref(&amp;)</code> or <code>ref(&amp;&amp;)</code>.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#dealing-with-unprotected-commas","title":"Dealing with unprotected commas","text":"<p>Unprotected commas, i.e. commas which are not surrounded by parentheses, prevent <code>MOCK_METHOD</code> from parsing its arguments correctly:</p> <p>{: .bad}</p> <pre><code>class MockFoo {\n public:\n  MOCK_METHOD(std::pair&lt;bool, int&gt;, GetPair, ());  // Won't compile!\n  MOCK_METHOD(bool, CheckMap, (std::map&lt;int, double&gt;, bool));  // Won't compile!\n};\n</code></pre> <p>Solution 1 - wrap with parentheses:</p> <p>{: .good}</p> <pre><code>class MockFoo {\n public:\n  MOCK_METHOD((std::pair&lt;bool, int&gt;), GetPair, ());\n  MOCK_METHOD(bool, CheckMap, ((std::map&lt;int, double&gt;), bool));\n};\n</code></pre> <p>Note that wrapping a return or argument type with parentheses is, in general, invalid C++. <code>MOCK_METHOD</code> removes the parentheses.</p> <p>Solution 2 - define an alias:</p> <p>{: .good}</p> <pre><code>class MockFoo {\n public:\n  using BoolAndInt = std::pair&lt;bool, int&gt;;\n  MOCK_METHOD(BoolAndInt, GetPair, ());\n  using MapIntDouble = std::map&lt;int, double&gt;;\n  MOCK_METHOD(bool, CheckMap, (MapIntDouble, bool));\n};\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-private-or-protected-methods","title":"Mocking Private or Protected Methods","text":"<p>You must always put a mock method definition (<code>MOCK_METHOD</code>) in a <code>public:</code> section of the mock class, regardless of the method being mocked being <code>public</code>, <code>protected</code>, or <code>private</code> in the base class. This allows <code>ON_CALL</code> and <code>EXPECT_CALL</code> to reference the mock function from outside of the mock class. (Yes, C++ allows a subclass to change the access level of a virtual function in the base class.) Example:</p> <pre><code>class Foo {\n public:\n  ...\n  virtual bool Transform(Gadget* g) = 0;\n\n protected:\n  virtual void Resume();\n\n private:\n  virtual int GetTimeOut();\n};\n\nclass MockFoo : public Foo {\n public:\n  ...\n  MOCK_METHOD(bool, Transform, (Gadget* g), (override));\n\n  // The following must be in the public section, even though the\n  // methods are protected or private in the base class.\n  MOCK_METHOD(void, Resume, (), (override));\n  MOCK_METHOD(int, GetTimeOut, (), (override));\n};\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-overloaded-methods","title":"Mocking Overloaded Methods","text":"<p>You can mock overloaded functions as usual. No special attention is required:</p> <pre><code>class Foo {\n  ...\n\n  // Must be virtual as we'll inherit from Foo.\n  virtual ~Foo();\n\n  // Overloaded on the types and/or numbers of arguments.\n  virtual int Add(Element x);\n  virtual int Add(int times, Element x);\n\n  // Overloaded on the const-ness of this object.\n  virtual Bar&amp; GetBar();\n  virtual const Bar&amp; GetBar() const;\n};\n\nclass MockFoo : public Foo {\n  ...\n  MOCK_METHOD(int, Add, (Element x), (override));\n  MOCK_METHOD(int, Add, (int times, Element x), (override));\n\n  MOCK_METHOD(Bar&amp;, GetBar, (), (override));\n  MOCK_METHOD(const Bar&amp;, GetBar, (), (const, override));\n};\n</code></pre> <p>{: .callout .note} Note: if you don't mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use <code>using</code> to bring them in scope:</p> <pre><code>class MockFoo : public Foo {\n  ...\n  using Foo::Add;\n  MOCK_METHOD(int, Add, (Element x), (override));\n  // We don't want to mock int Add(int times, Element x);\n  ...\n};\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-class-templates","title":"Mocking Class Templates","text":"<p>You can mock class templates just like any class.</p> <pre><code>template &lt;typename Elem&gt;\nclass StackInterface {\n  ...\n  // Must be virtual as we'll inherit from StackInterface.\n  virtual ~StackInterface();\n\n  virtual int GetSize() const = 0;\n  virtual void Push(const Elem&amp; x) = 0;\n};\n\ntemplate &lt;typename Elem&gt;\nclass MockStack : public StackInterface&lt;Elem&gt; {\n  ...\n  MOCK_METHOD(int, GetSize, (), (override));\n  MOCK_METHOD(void, Push, (const Elem&amp; x), (override));\n};\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-non-virtual-methods-mockingnonvirtualmethods","title":"Mocking Non-virtual Methods {#MockingNonVirtualMethods}","text":"<p>gMock can mock non-virtual functions to be used in Hi-perf dependency injection.</p> <p>In this case, instead of sharing a common base class with the real class, your mock class will be unrelated to the real class, but contain methods with the same signatures. The syntax for mocking non-virtual methods is the same as mocking virtual methods (just don't add <code>override</code>):</p> <pre><code>// A simple packet stream class.  None of its members is virtual.\nclass ConcretePacketStream {\n public:\n  void AppendPacket(Packet* new_packet);\n  const Packet* GetPacket(size_t packet_number) const;\n  size_t NumberOfPackets() const;\n  ...\n};\n\n// A mock packet stream class.  It inherits from no other, but defines\n// GetPacket() and NumberOfPackets().\nclass MockPacketStream {\n public:\n  MOCK_METHOD(const Packet*, GetPacket, (size_t packet_number), (const));\n  MOCK_METHOD(size_t, NumberOfPackets, (), (const));\n  ...\n};\n</code></pre> <p>Note that the mock class doesn't define <code>AppendPacket()</code>, unlike the real class. That's fine as long as the test doesn't need to call it.</p> <p>Next, you need a way to say that you want to use <code>ConcretePacketStream</code> in production code, and use <code>MockPacketStream</code> in tests. Since the functions are not virtual and the two classes are unrelated, you must specify your choice at compile time (as opposed to run time).</p> <p>One way to do it is to templatize your code that needs to use a packet stream. More specifically, you will give your code a template type argument for the type of the packet stream. In production, you will instantiate your template with <code>ConcretePacketStream</code> as the type argument. In tests, you will instantiate the same template with <code>MockPacketStream</code>. For example, you may write:</p> <pre><code>template &lt;class PacketStream&gt;\nvoid CreateConnection(PacketStream* stream) { ... }\n\ntemplate &lt;class PacketStream&gt;\nclass PacketReader {\n public:\n  void ReadPackets(PacketStream* stream, size_t packet_num);\n};\n</code></pre> <p>Then you can use <code>CreateConnection&lt;ConcretePacketStream&gt;()</code> and <code>PacketReader&lt;ConcretePacketStream&gt;</code> in production code, and use <code>CreateConnection&lt;MockPacketStream&gt;()</code> and <code>PacketReader&lt;MockPacketStream&gt;</code> in tests.</p> <pre><code>  MockPacketStream mock_stream;\n  EXPECT_CALL(mock_stream, ...)...;\n  .. set more expectations on mock_stream ...\n  PacketReader&lt;MockPacketStream&gt; reader(&amp;mock_stream);\n  ... exercise reader ...\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-free-functions","title":"Mocking Free Functions","text":"<p>It is not possible to directly mock a free function (i.e. a C-style function or a static method). If you need to, you can rewrite your code to use an interface (abstract class).</p> <p>Instead of calling a free function (say, <code>OpenFile</code>) directly, introduce an interface for it and have a concrete subclass that calls the free function:</p> <pre><code>class FileInterface {\n public:\n  ...\n  virtual bool Open(const char* path, const char* mode) = 0;\n};\n\nclass File : public FileInterface {\n public:\n  ...\n  bool Open(const char* path, const char* mode) override {\n     return OpenFile(path, mode);\n  }\n};\n</code></pre> <p>Your code should talk to <code>FileInterface</code> to open a file. Now it's easy to mock out the function.</p> <p>This may seem like a lot of hassle, but in practice you often have multiple related functions that you can put in the same interface, so the per-function syntactic overhead will be much lower.</p> <p>If you are concerned about the performance overhead incurred by virtual functions, and profiling confirms your concern, you can combine this with the recipe for mocking non-virtual methods.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#old-style-mock_methodn-macros","title":"Old-Style <code>MOCK_METHODn</code> Macros","text":"<p>Before the generic <code>MOCK_METHOD</code> macro was introduced in 2018, mocks where created using a family of macros collectively called <code>MOCK_METHODn</code>. These macros are still supported, though migration to the new <code>MOCK_METHOD</code> is recommended.</p> <p>The macros in the <code>MOCK_METHODn</code> family differ from <code>MOCK_METHOD</code>:</p> <ul> <li>The general structure is <code>MOCK_METHODn(MethodName, ReturnType(Args))</code>,     instead of <code>MOCK_METHOD(ReturnType, MethodName, (Args))</code>.</li> <li>The number <code>n</code> must equal the number of arguments.</li> <li>When mocking a const method, one must use <code>MOCK_CONST_METHODn</code>.</li> <li>When mocking a class template, the macro name must be suffixed with <code>_T</code>.</li> <li>In order to specify the call type, the macro name must be suffixed with     <code>_WITH_CALLTYPE</code>, and the call type is the first macro argument.</li> </ul> <p>Old macros and their new equivalents:</p> Simple Old <code>MOCK_METHOD1(Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int))</code> Const Method Old <code>MOCK_CONST_METHOD1(Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int), (const))</code> Method in a Class Template Old <code>MOCK_METHOD1_T(Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int))</code> Const Method in a Class Template Old <code>MOCK_CONST_METHOD1_T(Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int), (const))</code> Method with Call Type Old <code>MOCK_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int), (Calltype(STDMETHODCALLTYPE)))</code> Const Method with Call Type Old <code>MOCK_CONST_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int), (const, Calltype(STDMETHODCALLTYPE)))</code> Method with Call Type in a Class Template Old <code>MOCK_METHOD1_T_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int), (Calltype(STDMETHODCALLTYPE)))</code> Const Method with Call Type in a Class Template Old <code>MOCK_CONST_METHOD1_T_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int))</code> New <code>MOCK_METHOD(bool, Foo, (int), (const, Calltype(STDMETHODCALLTYPE)))</code>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#the-nice-the-strict-and-the-naggy-nicestrictnaggy","title":"The Nice, the Strict, and the Naggy {#NiceStrictNaggy}","text":"<p>If a mock method has no <code>EXPECT_CALL</code> spec but is called, we say that it's an \"uninteresting call\", and the default action (which can be specified using <code>ON_CALL()</code>) of the method will be taken. Currently, an uninteresting call will also by default cause gMock to print a warning. (In the future, we might remove this warning by default.)</p> <p>However, sometimes you may want to ignore these uninteresting calls, and sometimes you may want to treat them as errors. gMock lets you make the decision on a per-mock-object basis.</p> <p>Suppose your test uses a mock class <code>MockFoo</code>:</p> <pre><code>TEST(...) {\n  MockFoo mock_foo;\n  EXPECT_CALL(mock_foo, DoThis());\n  ... code that uses mock_foo ...\n}\n</code></pre> <p>If a method of <code>mock_foo</code> other than <code>DoThis()</code> is called, you will get a warning. However, if you rewrite your test to use <code>NiceMock&lt;MockFoo&gt;</code> instead, you can suppress the warning:</p> <pre><code>using ::testing::NiceMock;\n\nTEST(...) {\n  NiceMock&lt;MockFoo&gt; mock_foo;\n  EXPECT_CALL(mock_foo, DoThis());\n  ... code that uses mock_foo ...\n}\n</code></pre> <p><code>NiceMock&lt;MockFoo&gt;</code> is a subclass of <code>MockFoo</code>, so it can be used wherever <code>MockFoo</code> is accepted.</p> <p>It also works if <code>MockFoo</code>'s constructor takes some arguments, as <code>NiceMock&lt;MockFoo&gt;</code> \"inherits\" <code>MockFoo</code>'s constructors:</p> <pre><code>using ::testing::NiceMock;\n\nTEST(...) {\n  NiceMock&lt;MockFoo&gt; mock_foo(5, \"hi\");  // Calls MockFoo(5, \"hi\").\n  EXPECT_CALL(mock_foo, DoThis());\n  ... code that uses mock_foo ...\n}\n</code></pre> <p>The usage of <code>StrictMock</code> is similar, except that it makes all uninteresting calls failures:</p> <pre><code>using ::testing::StrictMock;\n\nTEST(...) {\n  StrictMock&lt;MockFoo&gt; mock_foo;\n  EXPECT_CALL(mock_foo, DoThis());\n  ... code that uses mock_foo ...\n\n  // The test will fail if a method of mock_foo other than DoThis()\n  // is called.\n}\n</code></pre> <p>{: .callout .note} NOTE: <code>NiceMock</code> and <code>StrictMock</code> only affects uninteresting calls (calls of methods with no expectations); they do not affect unexpected calls (calls of methods with expectations, but they don't match). See Understanding Uninteresting vs Unexpected Calls.</p> <p>There are some caveats though (sadly they are side effects of C++'s limitations):</p> <ol> <li><code>NiceMock&lt;MockFoo&gt;</code> and <code>StrictMock&lt;MockFoo&gt;</code> only work for mock methods     defined using the <code>MOCK_METHOD</code> macro directly in the <code>MockFoo</code> class.     If a mock method is defined in a base class of <code>MockFoo</code>, the \"nice\" or     \"strict\" modifier may not affect it, depending on the compiler. In     particular, nesting <code>NiceMock</code> and <code>StrictMock</code> (e.g.     <code>NiceMock&lt;StrictMock&lt;MockFoo&gt; &gt;</code>) is not supported.</li> <li><code>NiceMock&lt;MockFoo&gt;</code> and <code>StrictMock&lt;MockFoo&gt;</code> may not work correctly if the     destructor of <code>MockFoo</code> is not virtual. We would like to fix this, but it     requires cleaning up existing tests.</li> </ol> <p>Finally, you should be very cautious about when to use naggy or strict mocks, as they tend to make tests more brittle and harder to maintain. When you refactor your code without changing its externally visible behavior, ideally you shouldn't need to update any tests. If your code interacts with a naggy mock, however, you may start to get spammed with warnings as the result of your change. Worse, if your code interacts with a strict mock, your tests may start to fail and you'll be forced to fix them. Our general recommendation is to use nice mocks (not yet the default) most of the time, use naggy mocks (the current default) when developing or debugging tests, and use strict mocks only as the last resort.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#simplifying-the-interface-without-breaking-existing-code-simplerinterfaces","title":"Simplifying the Interface without Breaking Existing Code {#SimplerInterfaces}","text":"<p>Sometimes a method has a long list of arguments that is mostly uninteresting. For example:</p> <pre><code>class LogSink {\n public:\n  ...\n  virtual void send(LogSeverity severity, const char* full_filename,\n                    const char* base_filename, int line,\n                    const struct tm* tm_time,\n                    const char* message, size_t message_len) = 0;\n};\n</code></pre> <p>This method's argument list is lengthy and hard to work with (the <code>message</code> argument is not even 0-terminated). If we mock it as is, using the mock will be awkward. If, however, we try to simplify this interface, we'll need to fix all clients depending on it, which is often infeasible.</p> <p>The trick is to redispatch the method in the mock class:</p> <pre><code>class ScopedMockLog : public LogSink {\n public:\n  ...\n  void send(LogSeverity severity, const char* full_filename,\n                    const char* base_filename, int line, const tm* tm_time,\n                    const char* message, size_t message_len) override {\n    // We are only interested in the log severity, full file name, and\n    // log message.\n    Log(severity, full_filename, std::string(message, message_len));\n  }\n\n  // Implements the mock method:\n  //\n  //   void Log(LogSeverity severity,\n  //            const string&amp; file_path,\n  //            const string&amp; message);\n  MOCK_METHOD(void, Log,\n              (LogSeverity severity, const string&amp; file_path,\n               const string&amp; message));\n};\n</code></pre> <p>By defining a new mock method with a trimmed argument list, we make the mock class more user-friendly.</p> <p>This technique may also be applied to make overloaded methods more amenable to mocking. For example, when overloads have been used to implement default arguments:</p> <pre><code>class MockTurtleFactory : public TurtleFactory {\n public:\n  Turtle* MakeTurtle(int length, int weight) override { ... }\n  Turtle* MakeTurtle(int length, int weight, int speed) override { ... }\n\n  // the above methods delegate to this one:\n  MOCK_METHOD(Turtle*, DoMakeTurtle, ());\n};\n</code></pre> <p>This allows tests that don't care which overload was invoked to avoid specifying argument matchers:</p> <pre><code>ON_CALL(factory, DoMakeTurtle)\n    .WillByDefault(Return(MakeMockTurtle()));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#alternative-to-mocking-concrete-classes","title":"Alternative to Mocking Concrete Classes","text":"<p>Often you may find yourself using classes that don't implement interfaces. In order to test your code that uses such a class (let's call it <code>Concrete</code>), you may be tempted to make the methods of <code>Concrete</code> virtual and then mock it.</p> <p>Try not to do that.</p> <p>Making a non-virtual function virtual is a big decision. It creates an extension point where subclasses can tweak your class' behavior. This weakens your control on the class because now it's harder to maintain the class invariants. You should make a function virtual only when there is a valid reason for a subclass to override it.</p> <p>Mocking concrete classes directly is problematic as it creates a tight coupling between the class and the tests - any small change in the class may invalidate your tests and make test maintenance a pain.</p> <p>To avoid such problems, many programmers have been practicing \"coding to interfaces\": instead of talking to the <code>Concrete</code> class, your code would define an interface and talk to it. Then you implement that interface as an adaptor on top of <code>Concrete</code>. In tests, you can easily mock that interface to observe how your code is doing.</p> <p>This technique incurs some overhead:</p> <ul> <li>You pay the cost of virtual function calls (usually not a problem).</li> <li>There is more abstraction for the programmers to learn.</li> </ul> <p>However, it can also bring significant benefits in addition to better testability:</p> <ul> <li><code>Concrete</code>'s API may not fit your problem domain very well, as you may not     be the only client it tries to serve. By designing your own interface, you     have a chance to tailor it to your need - you may add higher-level     functionalities, rename stuff, etc instead of just trimming the class. This     allows you to write your code (user of the interface) in a more natural way,     which means it will be more readable, more maintainable, and you'll be more     productive.</li> <li>If <code>Concrete</code>'s implementation ever has to change, you don't have to rewrite     everywhere it is used. Instead, you can absorb the change in your     implementation of the interface, and your other code and tests will be     insulated from this change.</li> </ul> <p>Some people worry that if everyone is practicing this technique, they will end up writing lots of redundant code. This concern is totally understandable. However, there are two reasons why it may not be the case:</p> <ul> <li>Different projects may need to use <code>Concrete</code> in different ways, so the best     interfaces for them will be different. Therefore, each of them will have its     own domain-specific interface on top of <code>Concrete</code>, and they will not be the     same code.</li> <li>If enough projects want to use the same interface, they can always share it,     just like they have been sharing <code>Concrete</code>. You can check in the interface     and the adaptor somewhere near <code>Concrete</code> (perhaps in a <code>contrib</code>     sub-directory) and let many projects use it.</li> </ul> <p>You need to weigh the pros and cons carefully for your particular problem, but I'd like to assure you that the Java community has been practicing this for a long time and it's a proven effective technique applicable in a wide variety of situations. :-)</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#delegating-calls-to-a-fake-delegatingtofake","title":"Delegating Calls to a Fake {#DelegatingToFake}","text":"<p>Some times you have a non-trivial fake implementation of an interface. For example:</p> <pre><code>class Foo {\n public:\n  virtual ~Foo() {}\n  virtual char DoThis(int n) = 0;\n  virtual void DoThat(const char* s, int* p) = 0;\n};\n\nclass FakeFoo : public Foo {\n public:\n  char DoThis(int n) override {\n    return (n &gt; 0) ? '+' :\n           (n &lt; 0) ? '-' : '0';\n  }\n\n  void DoThat(const char* s, int* p) override {\n    *p = strlen(s);\n  }\n};\n</code></pre> <p>Now you want to mock this interface such that you can set expectations on it. However, you also want to use <code>FakeFoo</code> for the default behavior, as duplicating it in the mock object is, well, a lot of work.</p> <p>When you define the mock class using gMock, you can have it delegate its default action to a fake class you already have, using this pattern:</p> <pre><code>class MockFoo : public Foo {\n public:\n  // Normal mock method definitions using gMock.\n  MOCK_METHOD(char, DoThis, (int n), (override));\n  MOCK_METHOD(void, DoThat, (const char* s, int* p), (override));\n\n  // Delegates the default actions of the methods to a FakeFoo object.\n  // This must be called *before* the custom ON_CALL() statements.\n  void DelegateToFake() {\n    ON_CALL(*this, DoThis).WillByDefault([this](int n) {\n      return fake_.DoThis(n);\n    });\n    ON_CALL(*this, DoThat).WillByDefault([this](const char* s, int* p) {\n      fake_.DoThat(s, p);\n    });\n  }\n\n private:\n  FakeFoo fake_;  // Keeps an instance of the fake in the mock.\n};\n</code></pre> <p>With that, you can use <code>MockFoo</code> in your tests as usual. Just remember that if you don't explicitly set an action in an <code>ON_CALL()</code> or <code>EXPECT_CALL()</code>, the fake will be called upon to do it.:</p> <pre><code>using ::testing::_;\n\nTEST(AbcTest, Xyz) {\n  MockFoo foo;\n\n  foo.DelegateToFake();  // Enables the fake for delegation.\n\n  // Put your ON_CALL(foo, ...)s here, if any.\n\n  // No action specified, meaning to use the default action.\n  EXPECT_CALL(foo, DoThis(5));\n  EXPECT_CALL(foo, DoThat(_, _));\n\n  int n = 0;\n  EXPECT_EQ('+', foo.DoThis(5));  // FakeFoo::DoThis() is invoked.\n  foo.DoThat(\"Hi\", &amp;n);  // FakeFoo::DoThat() is invoked.\n  EXPECT_EQ(2, n);\n}\n</code></pre> <p>Some tips:</p> <ul> <li>If you want, you can still override the default action by providing your own     <code>ON_CALL()</code> or using <code>.WillOnce()</code> / <code>.WillRepeatedly()</code> in <code>EXPECT_CALL()</code>.</li> <li> <p>In <code>DelegateToFake()</code>, you only need to delegate the methods whose fake     implementation you intend to use.</p> </li> <li> <p>The general technique discussed here works for overloaded methods, but     you'll need to tell the compiler which version you mean. To disambiguate a     mock function (the one you specify inside the parentheses of <code>ON_CALL()</code>),     use this technique; to disambiguate a fake function (the     one you place inside <code>Invoke()</code>), use a <code>static_cast</code> to specify the     function's type. For instance, if class <code>Foo</code> has methods <code>char DoThis(int     n)</code> and <code>bool DoThis(double x) const</code>, and you want to invoke the latter,     you need to write <code>Invoke(&amp;fake_, static_cast&lt;bool (FakeFoo::*)(double)     const&gt;(&amp;FakeFoo::DoThis))</code> instead of <code>Invoke(&amp;fake_, &amp;FakeFoo::DoThis)</code>     (The strange-looking thing inside the angled brackets of <code>static_cast</code> is     the type of a function pointer to the second <code>DoThis()</code> method.).</p> </li> <li> <p>Having to mix a mock and a fake is often a sign of something gone wrong.     Perhaps you haven't got used to the interaction-based way of testing yet. Or     perhaps your interface is taking on too many roles and should be split up.     Therefore, don't abuse this. We would only recommend to do it as an     intermediate step when you are refactoring your code.</p> </li> </ul> <p>Regarding the tip on mixing a mock and a fake, here's an example on why it may be a bad sign: Suppose you have a class <code>System</code> for low-level system operations. In particular, it does file and I/O operations. And suppose you want to test how your code uses <code>System</code> to do I/O, and you just want the file operations to work normally. If you mock out the entire <code>System</code> class, you'll have to provide a fake implementation for the file operation part, which suggests that <code>System</code> is taking on too many roles.</p> <p>Instead, you can define a <code>FileOps</code> interface and an <code>IOOps</code> interface and split <code>System</code>'s functionalities into the two. Then you can mock <code>IOOps</code> without mocking <code>FileOps</code>.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#delegating-calls-to-a-real-object","title":"Delegating Calls to a Real Object","text":"<p>When using testing doubles (mocks, fakes, stubs, and etc), sometimes their behaviors will differ from those of the real objects. This difference could be either intentional (as in simulating an error such that you can test the error handling code) or unintentional. If your mocks have different behaviors than the real objects by mistake, you could end up with code that passes the tests but fails in production.</p> <p>You can use the delegating-to-real technique to ensure that your mock has the same behavior as the real object while retaining the ability to validate calls. This technique is very similar to the delegating-to-fake technique, the difference being that we use a real object instead of a fake. Here's an example:</p> <pre><code>using ::testing::AtLeast;\n\nclass MockFoo : public Foo {\n public:\n  MockFoo() {\n    // By default, all calls are delegated to the real object.\n    ON_CALL(*this, DoThis).WillByDefault([this](int n) {\n      return real_.DoThis(n);\n    });\n    ON_CALL(*this, DoThat).WillByDefault([this](const char* s, int* p) {\n      real_.DoThat(s, p);\n    });\n    ...\n  }\n  MOCK_METHOD(char, DoThis, ...);\n  MOCK_METHOD(void, DoThat, ...);\n  ...\n private:\n  Foo real_;\n};\n\n...\n  MockFoo mock;\n  EXPECT_CALL(mock, DoThis())\n      .Times(3);\n  EXPECT_CALL(mock, DoThat(\"Hi\"))\n      .Times(AtLeast(1));\n  ... use mock in test ...\n</code></pre> <p>With this, gMock will verify that your code made the right calls (with the right arguments, in the right order, called the right number of times, etc), and a real object will answer the calls (so the behavior will be the same as in production). This gives you the best of both worlds.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#delegating-calls-to-a-parent-class","title":"Delegating Calls to a Parent Class","text":"<p>Ideally, you should code to interfaces, whose methods are all pure virtual. In reality, sometimes you do need to mock a virtual method that is not pure (i.e, it already has an implementation). For example:</p> <pre><code>class Foo {\n public:\n  virtual ~Foo();\n\n  virtual void Pure(int n) = 0;\n  virtual int Concrete(const char* str) { ... }\n};\n\nclass MockFoo : public Foo {\n public:\n  // Mocking a pure method.\n  MOCK_METHOD(void, Pure, (int n), (override));\n  // Mocking a concrete method.  Foo::Concrete() is shadowed.\n  MOCK_METHOD(int, Concrete, (const char* str), (override));\n};\n</code></pre> <p>Sometimes you may want to call <code>Foo::Concrete()</code> instead of <code>MockFoo::Concrete()</code>. Perhaps you want to do it as part of a stub action, or perhaps your test doesn't need to mock <code>Concrete()</code> at all (but it would be oh-so painful to have to define a new mock class whenever you don't need to mock one of its methods).</p> <p>You can call <code>Foo::Concrete()</code> inside an action by:</p> <pre><code>...\n  EXPECT_CALL(foo, Concrete).WillOnce([&amp;foo](const char* str) {\n    return foo.Foo::Concrete(str);\n  });\n</code></pre> <p>or tell the mock object that you don't want to mock <code>Concrete()</code>:</p> <pre><code>...\n  ON_CALL(foo, Concrete).WillByDefault([&amp;foo](const char* str) {\n    return foo.Foo::Concrete(str);\n  });\n</code></pre> <p>(Why don't we just write <code>{ return foo.Concrete(str); }</code>? If you do that, <code>MockFoo::Concrete()</code> will be called (and cause an infinite recursion) since <code>Foo::Concrete()</code> is virtual. That's just how C++ works.)</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-matchers","title":"Using Matchers","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#matching-argument-values-exactly","title":"Matching Argument Values Exactly","text":"<p>You can specify exactly which arguments a mock method is expecting:</p> <pre><code>using ::testing::Return;\n...\n  EXPECT_CALL(foo, DoThis(5))\n      .WillOnce(Return('a'));\n  EXPECT_CALL(foo, DoThat(\"Hello\", bar));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-simple-matchers","title":"Using Simple Matchers","text":"<p>You can use matchers to match arguments that have a certain property:</p> <pre><code>using ::testing::NotNull;\nusing ::testing::Return;\n...\n  EXPECT_CALL(foo, DoThis(Ge(5)))  // The argument must be &gt;= 5.\n      .WillOnce(Return('a'));\n  EXPECT_CALL(foo, DoThat(\"Hello\", NotNull()));\n      // The second argument must not be NULL.\n</code></pre> <p>A frequently used matcher is <code>_</code>, which matches anything:</p> <pre><code>  EXPECT_CALL(foo, DoThat(_, NotNull()));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#combining-matchers-combiningmatchers","title":"Combining Matchers {#CombiningMatchers}","text":"<p>You can build complex matchers from existing ones using <code>AllOf()</code>, <code>AllOfArray()</code>, <code>AnyOf()</code>, <code>AnyOfArray()</code> and <code>Not()</code>:</p> <pre><code>using ::testing::AllOf;\nusing ::testing::Gt;\nusing ::testing::HasSubstr;\nusing ::testing::Ne;\nusing ::testing::Not;\n...\n  // The argument must be &gt; 5 and != 10.\n  EXPECT_CALL(foo, DoThis(AllOf(Gt(5),\n                                Ne(10))));\n\n  // The first argument must not contain sub-string \"blah\".\n  EXPECT_CALL(foo, DoThat(Not(HasSubstr(\"blah\")),\n                          NULL));\n</code></pre> <p>Matchers are function objects, and parametrized matchers can be composed just like any other function. However because their types can be long and rarely provide meaningful information, it can be easier to express them with C++14 generic lambdas to avoid specifying types. For example,</p> <pre><code>using ::testing::Contains;\nusing ::testing::Property;\n\ninline constexpr auto HasFoo = [](const auto&amp; f) {\n  return Property(&amp;MyClass::foo, Contains(f));\n};\n...\n  EXPECT_THAT(x, HasFoo(\"blah\"));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#casting-matchers-safematchercast","title":"Casting Matchers {#SafeMatcherCast}","text":"<p>gMock matchers are statically typed, meaning that the compiler can catch your mistake if you use a matcher of the wrong type (for example, if you use <code>Eq(5)</code> to match a <code>string</code> argument). Good for you!</p> <p>Sometimes, however, you know what you're doing and want the compiler to give you some slack. One example is that you have a matcher for <code>long</code> and the argument you want to match is <code>int</code>. While the two types aren't exactly the same, there is nothing really wrong with using a <code>Matcher&lt;long&gt;</code> to match an <code>int</code> - after all, we can first convert the <code>int</code> argument to a <code>long</code> losslessly before giving it to the matcher.</p> <p>To support this need, gMock gives you the <code>SafeMatcherCast&lt;T&gt;(m)</code> function. It casts a matcher <code>m</code> to type <code>Matcher&lt;T&gt;</code>. To ensure safety, gMock checks that (let <code>U</code> be the type <code>m</code> accepts :</p> <ol> <li>Type <code>T</code> can be implicitly cast to type <code>U</code>;</li> <li>When both <code>T</code> and <code>U</code> are built-in arithmetic types (<code>bool</code>, integers, and     floating-point numbers), the conversion from <code>T</code> to <code>U</code> is not lossy (in     other words, any value representable by <code>T</code> can also be represented by <code>U</code>);     and</li> <li>When <code>U</code> is a reference, <code>T</code> must also be a reference (as the underlying     matcher may be interested in the address of the <code>U</code> value).</li> </ol> <p>The code won't compile if any of these conditions isn't met.</p> <p>Here's one example:</p> <pre><code>using ::testing::SafeMatcherCast;\n\n// A base class and a child class.\nclass Base { ... };\nclass Derived : public Base { ... };\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(void, DoThis, (Derived* derived), (override));\n};\n\n...\n  MockFoo foo;\n  // m is a Matcher&lt;Base*&gt; we got from somewhere.\n  EXPECT_CALL(foo, DoThis(SafeMatcherCast&lt;Derived*&gt;(m)));\n</code></pre> <p>If you find <code>SafeMatcherCast&lt;T&gt;(m)</code> too limiting, you can use a similar function <code>MatcherCast&lt;T&gt;(m)</code>. The difference is that <code>MatcherCast</code> works as long as you can <code>static_cast</code> type <code>T</code> to type <code>U</code>.</p> <p><code>MatcherCast</code> essentially lets you bypass C++'s type system (<code>static_cast</code> isn't always safe as it could throw away information, for example), so be careful not to misuse/abuse it.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#selecting-between-overloaded-functions-selectoverload","title":"Selecting Between Overloaded Functions {#SelectOverload}","text":"<p>If you expect an overloaded function to be called, the compiler may need some help on which overloaded version it is.</p> <p>To disambiguate functions overloaded on the const-ness of this object, use the <code>Const()</code> argument wrapper.</p> <pre><code>using ::testing::ReturnRef;\n\nclass MockFoo : public Foo {\n  ...\n  MOCK_METHOD(Bar&amp;, GetBar, (), (override));\n  MOCK_METHOD(const Bar&amp;, GetBar, (), (const, override));\n};\n\n...\n  MockFoo foo;\n  Bar bar1, bar2;\n  EXPECT_CALL(foo, GetBar())         // The non-const GetBar().\n      .WillOnce(ReturnRef(bar1));\n  EXPECT_CALL(Const(foo), GetBar())  // The const GetBar().\n      .WillOnce(ReturnRef(bar2));\n</code></pre> <p>(<code>Const()</code> is defined by gMock and returns a <code>const</code> reference to its argument.)</p> <p>To disambiguate overloaded functions with the same number of arguments but different argument types, you may need to specify the exact type of a matcher, either by wrapping your matcher in <code>Matcher&lt;type&gt;()</code>, or using a matcher whose type is fixed (<code>TypedEq&lt;type&gt;</code>, <code>An&lt;type&gt;()</code>, etc):</p> <pre><code>using ::testing::An;\nusing ::testing::Matcher;\nusing ::testing::TypedEq;\n\nclass MockPrinter : public Printer {\n public:\n  MOCK_METHOD(void, Print, (int n), (override));\n  MOCK_METHOD(void, Print, (char c), (override));\n};\n\nTEST(PrinterTest, Print) {\n  MockPrinter printer;\n\n  EXPECT_CALL(printer, Print(An&lt;int&gt;()));            // void Print(int);\n  EXPECT_CALL(printer, Print(Matcher&lt;int&gt;(Lt(5))));  // void Print(int);\n  EXPECT_CALL(printer, Print(TypedEq&lt;char&gt;('a')));   // void Print(char);\n\n  printer.Print(3);\n  printer.Print(6);\n  printer.Print('a');\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#performing-different-actions-based-on-the-arguments","title":"Performing Different Actions Based on the Arguments","text":"<p>When a mock method is called, the last matching expectation that's still active will be selected (think \"newer overrides older\"). So, you can make a method do different things depending on its argument values like this:</p> <pre><code>using ::testing::_;\nusing ::testing::Lt;\nusing ::testing::Return;\n...\n  // The default case.\n  EXPECT_CALL(foo, DoThis(_))\n      .WillRepeatedly(Return('b'));\n  // The more specific case.\n  EXPECT_CALL(foo, DoThis(Lt(5)))\n      .WillRepeatedly(Return('a'));\n</code></pre> <p>Now, if <code>foo.DoThis()</code> is called with a value less than 5, <code>'a'</code> will be returned; otherwise <code>'b'</code> will be returned.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#matching-multiple-arguments-as-a-whole","title":"Matching Multiple Arguments as a Whole","text":"<p>Sometimes it's not enough to match the arguments individually. For example, we may want to say that the first argument must be less than the second argument. The <code>With()</code> clause allows us to match all arguments of a mock function as a whole. For example,</p> <pre><code>using ::testing::_;\nusing ::testing::Ne;\nusing ::testing::Lt;\n...\n  EXPECT_CALL(foo, InRange(Ne(0), _))\n      .With(Lt());\n</code></pre> <p>says that the first argument of <code>InRange()</code> must not be 0, and must be less than the second argument.</p> <p>The expression inside <code>With()</code> must be a matcher of type <code>Matcher&lt;std::tuple&lt;A1, ..., An&gt;&gt;</code>, where <code>A1</code>, ..., <code>An</code> are the types of the function arguments.</p> <p>You can also write <code>AllArgs(m)</code> instead of <code>m</code> inside <code>.With()</code>. The two forms are equivalent, but <code>.With(AllArgs(Lt()))</code> is more readable than <code>.With(Lt())</code>.</p> <p>You can use <code>Args&lt;k1, ..., kn&gt;(m)</code> to match the <code>n</code> selected arguments (as a tuple) against <code>m</code>. For example,</p> <pre><code>using ::testing::_;\nusing ::testing::AllOf;\nusing ::testing::Args;\nusing ::testing::Lt;\n...\n  EXPECT_CALL(foo, Blah)\n      .With(AllOf(Args&lt;0, 1&gt;(Lt()), Args&lt;1, 2&gt;(Lt())));\n</code></pre> <p>says that <code>Blah</code> will be called with arguments <code>x</code>, <code>y</code>, and <code>z</code> where <code>x &lt; y &lt; z</code>. Note that in this example, it wasn't necessary specify the positional matchers.</p> <p>As a convenience and example, gMock provides some matchers for 2-tuples, including the <code>Lt()</code> matcher above. See Multi-argument Matchers for the complete list.</p> <p>Note that if you want to pass the arguments to a predicate of your own (e.g. <code>.With(Args&lt;0, 1&gt;(Truly(&amp;MyPredicate)))</code>), that predicate MUST be written to take a <code>std::tuple</code> as its argument; gMock will pass the <code>n</code> selected arguments as one single tuple to the predicate.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-matchers-as-predicates","title":"Using Matchers as Predicates","text":"<p>Have you noticed that a matcher is just a fancy predicate that also knows how to describe itself? Many existing algorithms take predicates as arguments (e.g. those defined in STL's <code>&lt;algorithm&gt;</code> header), and it would be a shame if gMock matchers were not allowed to participate.</p> <p>Luckily, you can use a matcher where a unary predicate functor is expected by wrapping it inside the <code>Matches()</code> function. For example,</p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nusing ::testing::Matches;\nusing ::testing::Ge;\n\nvector&lt;int&gt; v;\n...\n// How many elements in v are &gt;= 10?\nconst int count = count_if(v.begin(), v.end(), Matches(Ge(10)));\n</code></pre> <p>Since you can build complex matchers from simpler ones easily using gMock, this gives you a way to conveniently construct composite predicates (doing the same using STL's <code>&lt;functional&gt;</code> header is just painful). For example, here's a predicate that's satisfied by any number that is &gt;= 0, &lt;= 100, and != 50:</p> <pre><code>using testing::AllOf;\nusing testing::Ge;\nusing testing::Le;\nusing testing::Matches;\nusing testing::Ne;\n...\nMatches(AllOf(Ge(0), Le(100), Ne(50)))\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-matchers-in-googletest-assertions","title":"Using Matchers in googletest Assertions","text":"<p>See <code>EXPECT_THAT</code> in the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-predicates-as-matchers","title":"Using Predicates as Matchers","text":"<p>gMock provides a set of built-in matchers for matching arguments with expected values\u2014see the Matchers Reference for more information. In case you find the built-in set lacking, you can use an arbitrary unary predicate function or functor as a matcher - as long as the predicate accepts a value of the type you want. You do this by wrapping the predicate inside the <code>Truly()</code> function, for example:</p> <pre><code>using ::testing::Truly;\n\nint IsEven(int n) { return (n % 2) == 0 ? 1 : 0; }\n...\n  // Bar() must be called with an even number.\n  EXPECT_CALL(foo, Bar(Truly(IsEven)));\n</code></pre> <p>Note that the predicate function / functor doesn't have to return <code>bool</code>. It works as long as the return value can be used as the condition in in statement <code>if (condition) ...</code>.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#matching-arguments-that-are-not-copyable","title":"Matching Arguments that Are Not Copyable","text":"<p>When you do an <code>EXPECT_CALL(mock_obj, Foo(bar))</code>, gMock saves away a copy of <code>bar</code>. When <code>Foo()</code> is called later, gMock compares the argument to <code>Foo()</code> with the saved copy of <code>bar</code>. This way, you don't need to worry about <code>bar</code> being modified or destroyed after the <code>EXPECT_CALL()</code> is executed. The same is true when you use matchers like <code>Eq(bar)</code>, <code>Le(bar)</code>, and so on.</p> <p>But what if <code>bar</code> cannot be copied (i.e. has no copy constructor)? You could define your own matcher function or callback and use it with <code>Truly()</code>, as the previous couple of recipes have shown. Or, you may be able to get away from it if you can guarantee that <code>bar</code> won't be changed after the <code>EXPECT_CALL()</code> is executed. Just tell gMock that it should save a reference to <code>bar</code>, instead of a copy of it. Here's how:</p> <pre><code>using ::testing::Eq;\nusing ::testing::Lt;\n...\n  // Expects that Foo()'s argument == bar.\n  EXPECT_CALL(mock_obj, Foo(Eq(std::ref(bar))));\n\n  // Expects that Foo()'s argument &lt; bar.\n  EXPECT_CALL(mock_obj, Foo(Lt(std::ref(bar))));\n</code></pre> <p>Remember: if you do this, don't change <code>bar</code> after the <code>EXPECT_CALL()</code>, or the result is undefined.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#validating-a-member-of-an-object","title":"Validating a Member of an Object","text":"<p>Often a mock function takes a reference to object as an argument. When matching the argument, you may not want to compare the entire object against a fixed object, as that may be over-specification. Instead, you may need to validate a certain member variable or the result of a certain getter method of the object. You can do this with <code>Field()</code> and <code>Property()</code>. More specifically,</p> <pre><code>Field(&amp;Foo::bar, m)\n</code></pre> <p>is a matcher that matches a <code>Foo</code> object whose <code>bar</code> member variable satisfies matcher <code>m</code>.</p> <pre><code>Property(&amp;Foo::baz, m)\n</code></pre> <p>is a matcher that matches a <code>Foo</code> object whose <code>baz()</code> method returns a value that satisfies matcher <code>m</code>.</p> <p>For example:</p> Expression Description <code>Field(&amp;Foo::number, Ge(3))</code> Matches <code>x</code> where <code>x.number &gt;= 3</code>. <code>Property(&amp;Foo::name,  StartsWith(\"John \"))</code> Matches <code>x</code> where <code>x.name()</code> starts with  <code>\"John \"</code>. <p>Note that in <code>Property(&amp;Foo::baz, ...)</code>, method <code>baz()</code> must take no argument and be declared as <code>const</code>. Don't use <code>Property()</code> against member functions that you do not own, because taking addresses of functions is fragile and generally not part of the contract of the function.</p> <p><code>Field()</code> and <code>Property()</code> can also match plain pointers to objects. For instance,</p> <pre><code>using ::testing::Field;\nusing ::testing::Ge;\n...\nField(&amp;Foo::number, Ge(3))\n</code></pre> <p>matches a plain pointer <code>p</code> where <code>p-&gt;number &gt;= 3</code>. If <code>p</code> is <code>NULL</code>, the match will always fail regardless of the inner matcher.</p> <p>What if you want to validate more than one members at the same time? Remember that there are <code>AllOf()</code> and <code>AllOfArray()</code>.</p> <p>Finally <code>Field()</code> and <code>Property()</code> provide overloads that take the field or property names as the first argument to include it in the error message. This can be useful when creating combined matchers.</p> <pre><code>using ::testing::AllOf;\nusing ::testing::Field;\nusing ::testing::Matcher;\nusing ::testing::SafeMatcherCast;\n\nMatcher&lt;Foo&gt; IsFoo(const Foo&amp; foo) {\n  return AllOf(Field(\"some_field\", &amp;Foo::some_field, foo.some_field),\n               Field(\"other_field\", &amp;Foo::other_field, foo.other_field),\n               Field(\"last_field\", &amp;Foo::last_field, foo.last_field));\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#validating-the-value-pointed-to-by-a-pointer-argument","title":"Validating the Value Pointed to by a Pointer Argument","text":"<p>C++ functions often take pointers as arguments. You can use matchers like <code>IsNull()</code>, <code>NotNull()</code>, and other comparison matchers to match a pointer, but what if you want to make sure the value pointed to by the pointer, instead of the pointer itself, has a certain property? Well, you can use the <code>Pointee(m)</code> matcher.</p> <p><code>Pointee(m)</code> matches a pointer if and only if <code>m</code> matches the value the pointer points to. For example:</p> <pre><code>using ::testing::Ge;\nusing ::testing::Pointee;\n...\n  EXPECT_CALL(foo, Bar(Pointee(Ge(3))));\n</code></pre> <p>expects <code>foo.Bar()</code> to be called with a pointer that points to a value greater than or equal to 3.</p> <p>One nice thing about <code>Pointee()</code> is that it treats a <code>NULL</code> pointer as a match failure, so you can write <code>Pointee(m)</code> instead of</p> <pre><code>using ::testing::AllOf;\nusing ::testing::NotNull;\nusing ::testing::Pointee;\n...\n  AllOf(NotNull(), Pointee(m))\n</code></pre> <p>without worrying that a <code>NULL</code> pointer will crash your test.</p> <p>Also, did we tell you that <code>Pointee()</code> works with both raw pointers and smart pointers (<code>std::unique_ptr</code>, <code>std::shared_ptr</code>, etc)?</p> <p>What if you have a pointer to pointer? You guessed it - you can use nested <code>Pointee()</code> to probe deeper inside the value. For example, <code>Pointee(Pointee(Lt(3)))</code> matches a pointer that points to a pointer that points to a number less than 3 (what a mouthful...).</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#testing-a-certain-property-of-an-object","title":"Testing a Certain Property of an Object","text":"<p>Sometimes you want to specify that an object argument has a certain property, but there is no existing matcher that does this. If you want good error messages, you should define a matcher. If you want to do it quick and dirty, you could get away with writing an ordinary function.</p> <p>Let's say you have a mock function that takes an object of type <code>Foo</code>, which has an <code>int bar()</code> method and an <code>int baz()</code> method, and you want to constrain that the argument's <code>bar()</code> value plus its <code>baz()</code> value is a given number. Here's how you can define a matcher to do it:</p> <pre><code>using ::testing::Matcher;\n\nclass BarPlusBazEqMatcher {\n public:\n  explicit BarPlusBazEqMatcher(int expected_sum)\n      : expected_sum_(expected_sum) {}\n\n  bool MatchAndExplain(const Foo&amp; foo,\n                       std::ostream* /* listener */) const {\n    return (foo.bar() + foo.baz()) == expected_sum_;\n  }\n\n  void DescribeTo(std::ostream&amp; os) const {\n    os &lt;&lt; \"bar() + baz() equals \" &lt;&lt; expected_sum_;\n  }\n\n  void DescribeNegationTo(std::ostream&amp; os) const {\n    os &lt;&lt; \"bar() + baz() does not equal \" &lt;&lt; expected_sum_;\n  }\n private:\n  const int expected_sum_;\n};\n\nMatcher&lt;const Foo&amp;&gt; BarPlusBazEq(int expected_sum) {\n  return BarPlusBazEqMatcher(expected_sum);\n}\n\n...\n  EXPECT_CALL(..., DoThis(BarPlusBazEq(5)))...;\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#matching-containers","title":"Matching Containers","text":"<p>Sometimes an STL container (e.g. list, vector, map, ...) is passed to a mock function and you may want to validate it. Since most STL containers support the <code>==</code> operator, you can write <code>Eq(expected_container)</code> or simply <code>expected_container</code> to match a container exactly.</p> <p>Sometimes, though, you may want to be more flexible (for example, the first element must be an exact match, but the second element can be any positive number, and so on). Also, containers used in tests often have a small number of elements, and having to define the expected container out-of-line is a bit of a hassle.</p> <p>You can use the <code>ElementsAre()</code> or <code>UnorderedElementsAre()</code> matcher in such cases:</p> <pre><code>using ::testing::_;\nusing ::testing::ElementsAre;\nusing ::testing::Gt;\n...\n  MOCK_METHOD(void, Foo, (const vector&lt;int&gt;&amp; numbers), (override));\n...\n  EXPECT_CALL(mock, Foo(ElementsAre(1, Gt(0), _, 5)));\n</code></pre> <p>The above matcher says that the container must have 4 elements, which must be 1, greater than 0, anything, and 5 respectively.</p> <p>If you instead write:</p> <pre><code>using ::testing::_;\nusing ::testing::Gt;\nusing ::testing::UnorderedElementsAre;\n...\n  MOCK_METHOD(void, Foo, (const vector&lt;int&gt;&amp; numbers), (override));\n...\n  EXPECT_CALL(mock, Foo(UnorderedElementsAre(1, Gt(0), _, 5)));\n</code></pre> <p>It means that the container must have 4 elements, which (under some permutation) must be 1, greater than 0, anything, and 5 respectively.</p> <p>As an alternative you can place the arguments in a C-style array and use <code>ElementsAreArray()</code> or <code>UnorderedElementsAreArray()</code> instead:</p> <pre><code>using ::testing::ElementsAreArray;\n...\n  // ElementsAreArray accepts an array of element values.\n  const int expected_vector1[] = {1, 5, 2, 4, ...};\n  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector1)));\n\n  // Or, an array of element matchers.\n  Matcher&lt;int&gt; expected_vector2[] = {1, Gt(2), _, 3, ...};\n  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector2)));\n</code></pre> <p>In case the array needs to be dynamically created (and therefore the array size cannot be inferred by the compiler), you can give <code>ElementsAreArray()</code> an additional argument to specify the array size:</p> <pre><code>using ::testing::ElementsAreArray;\n...\n  int* const expected_vector3 = new int[count];\n  ... fill expected_vector3 with values ...\n  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector3, count)));\n</code></pre> <p>Use <code>Pair</code> when comparing maps or other associative containers.</p> <p>{% raw %}</p> <pre><code>using testing::ElementsAre;\nusing testing::Pair;\n...\n  std::map&lt;string, int&gt; m = {{\"a\", 1}, {\"b\", 2}, {\"c\", 3}};\n  EXPECT_THAT(m, ElementsAre(Pair(\"a\", 1), Pair(\"b\", 2), Pair(\"c\", 3)));\n</code></pre> <p>{% endraw %}</p> <p>Tips:</p> <ul> <li><code>ElementsAre*()</code> can be used to match any container that implements the     STL iterator pattern (i.e. it has a <code>const_iterator</code> type and supports     <code>begin()/end()</code>), not just the ones defined in STL. It will even work with     container types yet to be written - as long as they follows the above     pattern.</li> <li>You can use nested <code>ElementsAre*()</code> to match nested (multi-dimensional)     containers.</li> <li>If the container is passed by pointer instead of by reference, just write     <code>Pointee(ElementsAre*(...))</code>.</li> <li>The order of elements matters for <code>ElementsAre*()</code>. If you are using it     with containers whose element order are undefined (e.g. <code>hash_map</code>) you     should use <code>WhenSorted</code> around <code>ElementsAre</code>.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#sharing-matchers","title":"Sharing Matchers","text":"<p>Under the hood, a gMock matcher object consists of a pointer to a ref-counted implementation object. Copying matchers is allowed and very efficient, as only the pointer is copied. When the last matcher that references the implementation object dies, the implementation object will be deleted.</p> <p>Therefore, if you have some complex matcher that you want to use again and again, there is no need to build it everytime. Just assign it to a matcher variable and use that variable repeatedly! For example,</p> <pre><code>using ::testing::AllOf;\nusing ::testing::Gt;\nusing ::testing::Le;\nusing ::testing::Matcher;\n...\n  Matcher&lt;int&gt; in_range = AllOf(Gt(5), Le(10));\n  ... use in_range as a matcher in multiple EXPECT_CALLs ...\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#matchers-must-have-no-side-effects-purematchers","title":"Matchers must have no side-effects {#PureMatchers}","text":"<p>{: .callout .warning} WARNING: gMock does not guarantee when or how many times a matcher will be invoked. Therefore, all matchers must be purely functional: they cannot have any side effects, and the match result must not depend on anything other than the matcher's parameters and the value being matched.</p> <p>This requirement must be satisfied no matter how a matcher is defined (e.g., if it is one of the standard matchers, or a custom matcher). In particular, a matcher can never call a mock function, as that will affect the state of the mock object and gMock.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#setting-expectations","title":"Setting Expectations","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#knowing-when-to-expect-useoncall","title":"Knowing When to Expect {#UseOnCall}","text":"<p><code>ON_CALL</code> is likely the single most under-utilized construct in gMock.</p> <p>There are basically two constructs for defining the behavior of a mock object: <code>ON_CALL</code> and <code>EXPECT_CALL</code>. The difference? <code>ON_CALL</code> defines what happens when a mock method is called, but doesn't imply any expectation on the method being called. <code>EXPECT_CALL</code> not only defines the behavior, but also sets an expectation that the method will be called with the given arguments, for the given number of times (and in the given order when you specify the order too).</p> <p>Since <code>EXPECT_CALL</code> does more, isn't it better than <code>ON_CALL</code>? Not really. Every <code>EXPECT_CALL</code> adds a constraint on the behavior of the code under test. Having more constraints than necessary is baaad - even worse than not having enough constraints.</p> <p>This may be counter-intuitive. How could tests that verify more be worse than tests that verify less? Isn't verification the whole point of tests?</p> <p>The answer lies in what a test should verify. A good test verifies the contract of the code. If a test over-specifies, it doesn't leave enough freedom to the implementation. As a result, changing the implementation without breaking the contract (e.g. refactoring and optimization), which should be perfectly fine to do, can break such tests. Then you have to spend time fixing them, only to see them broken again the next time the implementation is changed.</p> <p>Keep in mind that one doesn't have to verify more than one property in one test. In fact, it's a good style to verify only one thing in one test. If you do that, a bug will likely break only one or two tests instead of dozens (which case would you rather debug?). If you are also in the habit of giving tests descriptive names that tell what they verify, you can often easily guess what's wrong just from the test log itself.</p> <p>So use <code>ON_CALL</code> by default, and only use <code>EXPECT_CALL</code> when you actually intend to verify that the call is made. For example, you may have a bunch of <code>ON_CALL</code>s in your test fixture to set the common mock behavior shared by all tests in the same group, and write (scarcely) different <code>EXPECT_CALL</code>s in different <code>TEST_F</code>s to verify different aspects of the code's behavior. Compared with the style where each <code>TEST</code> has many <code>EXPECT_CALL</code>s, this leads to tests that are more resilient to implementational changes (and thus less likely to require maintenance) and makes the intent of the tests more obvious (so they are easier to maintain when you do need to maintain them).</p> <p>If you are bothered by the \"Uninteresting mock function call\" message printed when a mock method without an <code>EXPECT_CALL</code> is called, you may use a <code>NiceMock</code> instead to suppress all such messages for the mock object, or suppress the message for specific methods by adding <code>EXPECT_CALL(...).Times(AnyNumber())</code>. DO NOT suppress it by blindly adding an <code>EXPECT_CALL(...)</code>, or you'll have a test that's a pain to maintain.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#ignoring-uninteresting-calls","title":"Ignoring Uninteresting Calls","text":"<p>If you are not interested in how a mock method is called, just don't say anything about it. In this case, if the method is ever called, gMock will perform its default action to allow the test program to continue. If you are not happy with the default action taken by gMock, you can override it using <code>DefaultValue&lt;T&gt;::Set()</code> (described here) or <code>ON_CALL()</code>.</p> <p>Please note that once you expressed interest in a particular mock method (via <code>EXPECT_CALL()</code>), all invocations to it must match some expectation. If this function is called but the arguments don't match any <code>EXPECT_CALL()</code> statement, it will be an error.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#disallowing-unexpected-calls","title":"Disallowing Unexpected Calls","text":"<p>If a mock method shouldn't be called at all, explicitly say so:</p> <pre><code>using ::testing::_;\n...\n  EXPECT_CALL(foo, Bar(_))\n      .Times(0);\n</code></pre> <p>If some calls to the method are allowed, but the rest are not, just list all the expected calls:</p> <pre><code>using ::testing::AnyNumber;\nusing ::testing::Gt;\n...\n  EXPECT_CALL(foo, Bar(5));\n  EXPECT_CALL(foo, Bar(Gt(10)))\n      .Times(AnyNumber());\n</code></pre> <p>A call to <code>foo.Bar()</code> that doesn't match any of the <code>EXPECT_CALL()</code> statements will be an error.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#understanding-uninteresting-vs-unexpected-calls-uninteresting-vs-unexpected","title":"Understanding Uninteresting vs Unexpected Calls {#uninteresting-vs-unexpected}","text":"<p>Uninteresting calls and unexpected calls are different concepts in gMock. Very different.</p> <p>A call <code>x.Y(...)</code> is uninteresting if there's not even a single <code>EXPECT_CALL(x, Y(...))</code> set. In other words, the test isn't interested in the <code>x.Y()</code> method at all, as evident in that the test doesn't care to say anything about it.</p> <p>A call <code>x.Y(...)</code> is unexpected if there are some <code>EXPECT_CALL(x, Y(...))</code>s set, but none of them matches the call. Put another way, the test is interested in the <code>x.Y()</code> method (therefore it explicitly sets some <code>EXPECT_CALL</code> to verify how it's called); however, the verification fails as the test doesn't expect this particular call to happen.</p> <p>An unexpected call is always an error, as the code under test doesn't behave the way the test expects it to behave.</p> <p>By default, an uninteresting call is not an error, as it violates no constraint specified by the test. (gMock's philosophy is that saying nothing means there is no constraint.) However, it leads to a warning, as it might indicate a problem (e.g. the test author might have forgotten to specify a constraint).</p> <p>In gMock, <code>NiceMock</code> and <code>StrictMock</code> can be used to make a mock class \"nice\" or \"strict\". How does this affect uninteresting calls and unexpected calls?</p> <p>A nice mock suppresses uninteresting call warnings. It is less chatty than the default mock, but otherwise is the same. If a test fails with a default mock, it will also fail using a nice mock instead. And vice versa. Don't expect making a mock nice to change the test's result.</p> <p>A strict mock turns uninteresting call warnings into errors. So making a mock strict may change the test's result.</p> <p>Let's look at an example:</p> <pre><code>TEST(...) {\n  NiceMock&lt;MockDomainRegistry&gt; mock_registry;\n  EXPECT_CALL(mock_registry, GetDomainOwner(\"google.com\"))\n          .WillRepeatedly(Return(\"Larry Page\"));\n\n  // Use mock_registry in code under test.\n  ... &amp;mock_registry ...\n}\n</code></pre> <p>The sole <code>EXPECT_CALL</code> here says that all calls to <code>GetDomainOwner()</code> must have <code>\"google.com\"</code> as the argument. If <code>GetDomainOwner(\"yahoo.com\")</code> is called, it will be an unexpected call, and thus an error. Having a nice mock doesn't change the severity of an unexpected call.</p> <p>So how do we tell gMock that <code>GetDomainOwner()</code> can be called with some other arguments as well? The standard technique is to add a \"catch all\" <code>EXPECT_CALL</code>:</p> <pre><code>  EXPECT_CALL(mock_registry, GetDomainOwner(_))\n        .Times(AnyNumber());  // catches all other calls to this method.\n  EXPECT_CALL(mock_registry, GetDomainOwner(\"google.com\"))\n        .WillRepeatedly(Return(\"Larry Page\"));\n</code></pre> <p>Remember that <code>_</code> is the wildcard matcher that matches anything. With this, if <code>GetDomainOwner(\"google.com\")</code> is called, it will do what the second <code>EXPECT_CALL</code> says; if it is called with a different argument, it will do what the first <code>EXPECT_CALL</code> says.</p> <p>Note that the order of the two <code>EXPECT_CALL</code>s is important, as a newer <code>EXPECT_CALL</code> takes precedence over an older one.</p> <p>For more on uninteresting calls, nice mocks, and strict mocks, read \"The Nice, the Strict, and the Naggy\".</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#ignoring-uninteresting-arguments-parameterlessexpectations","title":"Ignoring Uninteresting Arguments {#ParameterlessExpectations}","text":"<p>If your test doesn't care about the parameters (it only cares about the number or order of calls), you can often simply omit the parameter list:</p> <pre><code>  // Expect foo.Bar( ... ) twice with any arguments.\n  EXPECT_CALL(foo, Bar).Times(2);\n\n  // Delegate to the given method whenever the factory is invoked.\n  ON_CALL(foo_factory, MakeFoo)\n      .WillByDefault(&amp;BuildFooForTest);\n</code></pre> <p>This functionality is only available when a method is not overloaded; to prevent unexpected behavior it is a compilation error to try to set an expectation on a method where the specific overload is ambiguous. You can work around this by supplying a simpler mock interface than the mocked class provides.</p> <p>This pattern is also useful when the arguments are interesting, but match logic is substantially complex. You can leave the argument list unspecified and use SaveArg actions to save the values for later verification. If you do that, you can easily differentiate calling the method the wrong number of times from calling it with the wrong arguments.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#expecting-ordered-calls-orderedcalls","title":"Expecting Ordered Calls {#OrderedCalls}","text":"<p>Although an <code>EXPECT_CALL()</code> statement defined later takes precedence when gMock tries to match a function call with an expectation, by default calls don't have to happen in the order <code>EXPECT_CALL()</code> statements are written. For example, if the arguments match the matchers in the second <code>EXPECT_CALL()</code>, but not those in the first and third, then the second expectation will be used.</p> <p>If you would rather have all calls occur in the order of the expectations, put the <code>EXPECT_CALL()</code> statements in a block where you define a variable of type <code>InSequence</code>:</p> <pre><code>using ::testing::_;\nusing ::testing::InSequence;\n\n  {\n    InSequence s;\n\n    EXPECT_CALL(foo, DoThis(5));\n    EXPECT_CALL(bar, DoThat(_))\n        .Times(2);\n    EXPECT_CALL(foo, DoThis(6));\n  }\n</code></pre> <p>In this example, we expect a call to <code>foo.DoThis(5)</code>, followed by two calls to <code>bar.DoThat()</code> where the argument can be anything, which are in turn followed by a call to <code>foo.DoThis(6)</code>. If a call occurred out-of-order, gMock will report an error.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#expecting-partially-ordered-calls-partialorder","title":"Expecting Partially Ordered Calls {#PartialOrder}","text":"<p>Sometimes requiring everything to occur in a predetermined order can lead to brittle tests. For example, we may care about <code>A</code> occurring before both <code>B</code> and <code>C</code>, but aren't interested in the relative order of <code>B</code> and <code>C</code>. In this case, the test should reflect our real intent, instead of being overly constraining.</p> <p>gMock allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to use the <code>After</code> clause of <code>EXPECT_CALL</code>.</p> <p>Another way is via the <code>InSequence()</code> clause (not the same as the <code>InSequence</code> class), which we borrowed from jMock 2. It's less flexible than <code>After()</code>, but more convenient when you have long chains of sequential calls, as it doesn't require you to come up with different names for the expectations in the chains. Here's how it works:</p> <p>If we view <code>EXPECT_CALL()</code> statements as nodes in a graph, and add an edge from node A to node B wherever A must occur before B, we can get a DAG. We use the term \"sequence\" to mean a directed path in this DAG. Now, if we decompose the DAG into sequences, we just need to know which sequences each <code>EXPECT_CALL()</code> belongs to in order to be able to reconstruct the original DAG.</p> <p>So, to specify the partial order on the expectations we need to do two things: first to define some <code>Sequence</code> objects, and then for each <code>EXPECT_CALL()</code> say which <code>Sequence</code> objects it is part of.</p> <p>Expectations in the same sequence must occur in the order they are written. For example,</p> <pre><code>using ::testing::Sequence;\n...\n  Sequence s1, s2;\n\n  EXPECT_CALL(foo, A())\n      .InSequence(s1, s2);\n  EXPECT_CALL(bar, B())\n      .InSequence(s1);\n  EXPECT_CALL(bar, C())\n      .InSequence(s2);\n  EXPECT_CALL(foo, D())\n      .InSequence(s2);\n</code></pre> <p>specifies the following DAG (where <code>s1</code> is <code>A -&gt; B</code>, and <code>s2</code> is <code>A -&gt; C -&gt; D</code>):</p> <pre><code>       +---&gt; B\n       |\n  A ---|\n       |\n        +---&gt; C ---&gt; D\n</code></pre> <p>This means that A must occur before B and C, and C must occur before D. There's no restriction about the order other than these.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#controlling-when-an-expectation-retires","title":"Controlling When an Expectation Retires","text":"<p>When a mock method is called, gMock only considers expectations that are still active. An expectation is active when created, and becomes inactive (aka retires) when a call that has to occur later has occurred. For example, in</p> <pre><code>using ::testing::_;\nusing ::testing::Sequence;\n...\n  Sequence s1, s2;\n\n  EXPECT_CALL(log, Log(WARNING, _, \"File too large.\"))      // #1\n      .Times(AnyNumber())\n      .InSequence(s1, s2);\n  EXPECT_CALL(log, Log(WARNING, _, \"Data set is empty.\"))   // #2\n      .InSequence(s1);\n  EXPECT_CALL(log, Log(WARNING, _, \"User not found.\"))      // #3\n      .InSequence(s2);\n</code></pre> <p>as soon as either #2 or #3 is matched, #1 will retire. If a warning <code>\"File too large.\"</code> is logged after this, it will be an error.</p> <p>Note that an expectation doesn't retire automatically when it's saturated. For example,</p> <pre><code>using ::testing::_;\n...\n  EXPECT_CALL(log, Log(WARNING, _, _));                     // #1\n  EXPECT_CALL(log, Log(WARNING, _, \"File too large.\"));     // #2\n</code></pre> <p>says that there will be exactly one warning with the message <code>\"File too large.\"</code>. If the second warning contains this message too, #2 will match again and result in an upper-bound-violated error.</p> <p>If this is not what you want, you can ask an expectation to retire as soon as it becomes saturated:</p> <pre><code>using ::testing::_;\n...\n  EXPECT_CALL(log, Log(WARNING, _, _));                     // #1\n  EXPECT_CALL(log, Log(WARNING, _, \"File too large.\"))      // #2\n      .RetiresOnSaturation();\n</code></pre> <p>Here #2 can be used only once, so if you have two warnings with the message <code>\"File too large.\"</code>, the first will match #2 and the second will match #1 - there will be no error.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-actions","title":"Using Actions","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#returning-references-from-mock-methods","title":"Returning References from Mock Methods","text":"<p>If a mock function's return type is a reference, you need to use <code>ReturnRef()</code> instead of <code>Return()</code> to return a result:</p> <pre><code>using ::testing::ReturnRef;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(Bar&amp;, GetBar, (), (override));\n};\n...\n  MockFoo foo;\n  Bar bar;\n  EXPECT_CALL(foo, GetBar())\n      .WillOnce(ReturnRef(bar));\n...\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#returning-live-values-from-mock-methods","title":"Returning Live Values from Mock Methods","text":"<p>The <code>Return(x)</code> action saves a copy of <code>x</code> when the action is created, and always returns the same value whenever it's executed. Sometimes you may want to instead return the live value of <code>x</code> (i.e. its value at the time when the action is executed.). Use either <code>ReturnRef()</code> or <code>ReturnPointee()</code> for this purpose.</p> <p>If the mock function's return type is a reference, you can do it using <code>ReturnRef(x)</code>, as shown in the previous recipe (\"Returning References from Mock Methods\"). However, gMock doesn't let you use <code>ReturnRef()</code> in a mock function whose return type is not a reference, as doing that usually indicates a user error. So, what shall you do?</p> <p>Though you may be tempted, DO NOT use <code>std::ref()</code>:</p> <pre><code>using testing::Return;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(int, GetValue, (), (override));\n};\n...\n  int x = 0;\n  MockFoo foo;\n  EXPECT_CALL(foo, GetValue())\n      .WillRepeatedly(Return(std::ref(x)));  // Wrong!\n  x = 42;\n  EXPECT_EQ(42, foo.GetValue());\n</code></pre> <p>Unfortunately, it doesn't work here. The above code will fail with error:</p> <pre><code>Value of: foo.GetValue()\n  Actual: 0\nExpected: 42\n</code></pre> <p>The reason is that <code>Return(*value*)</code> converts <code>value</code> to the actual return type of the mock function at the time when the action is created, not when it is executed. (This behavior was chosen for the action to be safe when <code>value</code> is a proxy object that references some temporary objects.) As a result, <code>std::ref(x)</code> is converted to an <code>int</code> value (instead of a <code>const int&amp;</code>) when the expectation is set, and <code>Return(std::ref(x))</code> will always return 0.</p> <p><code>ReturnPointee(pointer)</code> was provided to solve this problem specifically. It returns the value pointed to by <code>pointer</code> at the time the action is executed:</p> <pre><code>using testing::ReturnPointee;\n...\n  int x = 0;\n  MockFoo foo;\n  EXPECT_CALL(foo, GetValue())\n      .WillRepeatedly(ReturnPointee(&amp;x));  // Note the &amp; here.\n  x = 42;\n  EXPECT_EQ(42, foo.GetValue());  // This will succeed now.\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#combining-actions","title":"Combining Actions","text":"<p>Want to do more than one thing when a function is called? That's fine. <code>DoAll()</code> allow you to do sequence of actions every time. Only the return value of the last action in the sequence will be used.</p> <pre><code>using ::testing::_;\nusing ::testing::DoAll;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(bool, Bar, (int n), (override));\n};\n...\n  EXPECT_CALL(foo, Bar(_))\n      .WillOnce(DoAll(action_1,\n                      action_2,\n                      ...\n                      action_n));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#verifying-complex-arguments-saveargverify","title":"Verifying Complex Arguments {#SaveArgVerify}","text":"<p>If you want to verify that a method is called with a particular argument but the match criteria is complex, it can be difficult to distinguish between cardinality failures (calling the method the wrong number of times) and argument match failures. Similarly, if you are matching multiple parameters, it may not be easy to distinguishing which argument failed to match. For example:</p> <pre><code>  // Not ideal: this could fail because of a problem with arg1 or arg2, or maybe\n  // just the method wasn't called.\n  EXPECT_CALL(foo, SendValues(_, ElementsAre(1, 4, 4, 7), EqualsProto( ... )));\n</code></pre> <p>You can instead save the arguments and test them individually:</p> <pre><code>  EXPECT_CALL(foo, SendValues)\n      .WillOnce(DoAll(SaveArg&lt;1&gt;(&amp;actual_array), SaveArg&lt;2&gt;(&amp;actual_proto)));\n  ... run the test\n  EXPECT_THAT(actual_array, ElementsAre(1, 4, 4, 7));\n  EXPECT_THAT(actual_proto, EqualsProto( ... ));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-side-effects-mockingsideeffects","title":"Mocking Side Effects {#MockingSideEffects}","text":"<p>Sometimes a method exhibits its effect not via returning a value but via side effects. For example, it may change some global state or modify an output argument. To mock side effects, in general you can define your own action by implementing <code>::testing::ActionInterface</code>.</p> <p>If all you need to do is to change an output argument, the built-in <code>SetArgPointee()</code> action is convenient:</p> <pre><code>using ::testing::_;\nusing ::testing::SetArgPointee;\n\nclass MockMutator : public Mutator {\n public:\n  MOCK_METHOD(void, Mutate, (bool mutate, int* value), (override));\n  ...\n}\n...\n  MockMutator mutator;\n  EXPECT_CALL(mutator, Mutate(true, _))\n      .WillOnce(SetArgPointee&lt;1&gt;(5));\n</code></pre> <p>In this example, when <code>mutator.Mutate()</code> is called, we will assign 5 to the <code>int</code> variable pointed to by argument #1 (0-based).</p> <p><code>SetArgPointee()</code> conveniently makes an internal copy of the value you pass to it, removing the need to keep the value in scope and alive. The implication however is that the value must have a copy constructor and assignment operator.</p> <p>If the mock method also needs to return a value as well, you can chain <code>SetArgPointee()</code> with <code>Return()</code> using <code>DoAll()</code>, remembering to put the <code>Return()</code> statement last:</p> <pre><code>using ::testing::_;\nusing ::testing::Return;\nusing ::testing::SetArgPointee;\n\nclass MockMutator : public Mutator {\n public:\n  ...\n  MOCK_METHOD(bool, MutateInt, (int* value), (override));\n}\n...\n  MockMutator mutator;\n  EXPECT_CALL(mutator, MutateInt(_))\n      .WillOnce(DoAll(SetArgPointee&lt;0&gt;(5),\n                      Return(true)));\n</code></pre> <p>Note, however, that if you use the <code>ReturnOKWith()</code> method, it will override the values provided by <code>SetArgPointee()</code> in the response parameters of your function call.</p> <p>If the output argument is an array, use the <code>SetArrayArgument&lt;N&gt;(first, last)</code> action instead. It copies the elements in source range <code>[first, last)</code> to the array pointed to by the <code>N</code>-th (0-based) argument:</p> <pre><code>using ::testing::NotNull;\nusing ::testing::SetArrayArgument;\n\nclass MockArrayMutator : public ArrayMutator {\n public:\n  MOCK_METHOD(void, Mutate, (int* values, int num_values), (override));\n  ...\n}\n...\n  MockArrayMutator mutator;\n  int values[5] = {1, 2, 3, 4, 5};\n  EXPECT_CALL(mutator, Mutate(NotNull(), 5))\n      .WillOnce(SetArrayArgument&lt;0&gt;(values, values + 5));\n</code></pre> <p>This also works when the argument is an output iterator:</p> <pre><code>using ::testing::_;\nusing ::testing::SetArrayArgument;\n\nclass MockRolodex : public Rolodex {\n public:\n  MOCK_METHOD(void, GetNames, (std::back_insert_iterator&lt;vector&lt;string&gt;&gt;),\n              (override));\n  ...\n}\n...\n  MockRolodex rolodex;\n  vector&lt;string&gt; names;\n  names.push_back(\"George\");\n  names.push_back(\"John\");\n  names.push_back(\"Thomas\");\n  EXPECT_CALL(rolodex, GetNames(_))\n      .WillOnce(SetArrayArgument&lt;0&gt;(names.begin(), names.end()));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#changing-a-mock-objects-behavior-based-on-the-state","title":"Changing a Mock Object's Behavior Based on the State","text":"<p>If you expect a call to change the behavior of a mock object, you can use <code>::testing::InSequence</code> to specify different behaviors before and after the call:</p> <pre><code>using ::testing::InSequence;\nusing ::testing::Return;\n\n...\n  {\n     InSequence seq;\n     EXPECT_CALL(my_mock, IsDirty())\n         .WillRepeatedly(Return(true));\n     EXPECT_CALL(my_mock, Flush());\n     EXPECT_CALL(my_mock, IsDirty())\n         .WillRepeatedly(Return(false));\n  }\n  my_mock.FlushIfDirty();\n</code></pre> <p>This makes <code>my_mock.IsDirty()</code> return <code>true</code> before <code>my_mock.Flush()</code> is called and return <code>false</code> afterwards.</p> <p>If the behavior change is more complex, you can store the effects in a variable and make a mock method get its return value from that variable:</p> <pre><code>using ::testing::_;\nusing ::testing::SaveArg;\nusing ::testing::Return;\n\nACTION_P(ReturnPointee, p) { return *p; }\n...\n  int previous_value = 0;\n  EXPECT_CALL(my_mock, GetPrevValue)\n      .WillRepeatedly(ReturnPointee(&amp;previous_value));\n  EXPECT_CALL(my_mock, UpdateValue)\n      .WillRepeatedly(SaveArg&lt;0&gt;(&amp;previous_value));\n  my_mock.DoSomethingToUpdateValue();\n</code></pre> <p>Here <code>my_mock.GetPrevValue()</code> will always return the argument of the last <code>UpdateValue()</code> call.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#setting-the-default-value-for-a-return-type-defaultvalue","title":"Setting the Default Value for a Return Type {#DefaultValue}","text":"<p>If a mock method's return type is a built-in C++ type or pointer, by default it will return 0 when invoked. Also, in C++ 11 and above, a mock method whose return type has a default constructor will return a default-constructed value by default. You only need to specify an action if this default value doesn't work for you.</p> <p>Sometimes, you may want to change this default value, or you may want to specify a default value for types gMock doesn't know about. You can do this using the <code>::testing::DefaultValue</code> class template:</p> <pre><code>using ::testing::DefaultValue;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(Bar, CalculateBar, (), (override));\n};\n\n\n...\n  Bar default_bar;\n  // Sets the default return value for type Bar.\n  DefaultValue&lt;Bar&gt;::Set(default_bar);\n\n  MockFoo foo;\n\n  // We don't need to specify an action here, as the default\n  // return value works for us.\n  EXPECT_CALL(foo, CalculateBar());\n\n  foo.CalculateBar();  // This should return default_bar.\n\n  // Unsets the default return value.\n  DefaultValue&lt;Bar&gt;::Clear();\n</code></pre> <p>Please note that changing the default value for a type can make your tests hard to understand. We recommend you to use this feature judiciously. For example, you may want to make sure the <code>Set()</code> and <code>Clear()</code> calls are right next to the code that uses your mock.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#setting-the-default-actions-for-a-mock-method","title":"Setting the Default Actions for a Mock Method","text":"<p>You've learned how to change the default value of a given type. However, this may be too coarse for your purpose: perhaps you have two mock methods with the same return type and you want them to have different behaviors. The <code>ON_CALL()</code> macro allows you to customize your mock's behavior at the method level:</p> <pre><code>using ::testing::_;\nusing ::testing::AnyNumber;\nusing ::testing::Gt;\nusing ::testing::Return;\n...\n  ON_CALL(foo, Sign(_))\n      .WillByDefault(Return(-1));\n  ON_CALL(foo, Sign(0))\n      .WillByDefault(Return(0));\n  ON_CALL(foo, Sign(Gt(0)))\n      .WillByDefault(Return(1));\n\n  EXPECT_CALL(foo, Sign(_))\n      .Times(AnyNumber());\n\n  foo.Sign(5);   // This should return 1.\n  foo.Sign(-9);  // This should return -1.\n  foo.Sign(0);   // This should return 0.\n</code></pre> <p>As you may have guessed, when there are more than one <code>ON_CALL()</code> statements, the newer ones in the order take precedence over the older ones. In other words, the last one that matches the function arguments will be used. This matching order allows you to set up the common behavior in a mock object's constructor or the test fixture's set-up phase and specialize the mock's behavior later.</p> <p>Note that both <code>ON_CALL</code> and <code>EXPECT_CALL</code> have the same \"later statements take precedence\" rule, but they don't interact. That is, <code>EXPECT_CALL</code>s have their own precedence order distinct from the <code>ON_CALL</code> precedence order.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-functionsmethodsfunctorslambdas-as-actions-functionsasactions","title":"Using Functions/Methods/Functors/Lambdas as Actions {#FunctionsAsActions}","text":"<p>If the built-in actions don't suit you, you can use an existing callable (function, <code>std::function</code>, method, functor, lambda) as an action.</p> <pre><code>using ::testing::_; using ::testing::Invoke;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(int, Sum, (int x, int y), (override));\n  MOCK_METHOD(bool, ComplexJob, (int x), (override));\n};\n\nint CalculateSum(int x, int y) { return x + y; }\nint Sum3(int x, int y, int z) { return x + y + z; }\n\nclass Helper {\n public:\n  bool ComplexJob(int x);\n};\n\n...\n  MockFoo foo;\n  Helper helper;\n  EXPECT_CALL(foo, Sum(_, _))\n      .WillOnce(&amp;CalculateSum)\n      .WillRepeatedly(Invoke(NewPermanentCallback(Sum3, 1)));\n  EXPECT_CALL(foo, ComplexJob(_))\n      .WillOnce(Invoke(&amp;helper, &amp;Helper::ComplexJob))\n      .WillOnce([] { return true; })\n      .WillRepeatedly([](int x) { return x &gt; 0; });\n\n  foo.Sum(5, 6);         // Invokes CalculateSum(5, 6).\n  foo.Sum(2, 3);         // Invokes Sum3(1, 2, 3).\n  foo.ComplexJob(10);    // Invokes helper.ComplexJob(10).\n  foo.ComplexJob(-1);    // Invokes the inline lambda.\n</code></pre> <p>The only requirement is that the type of the function, etc must be compatible with the signature of the mock function, meaning that the latter's arguments (if it takes any) can be implicitly converted to the corresponding arguments of the former, and the former's return type can be implicitly converted to that of the latter. So, you can invoke something whose type is not exactly the same as the mock function, as long as it's safe to do so - nice, huh?</p> <p>Note that:</p> <ul> <li>The action takes ownership of the callback and will delete it when the     action itself is destructed.</li> <li> <p>If the type of a callback is derived from a base callback type <code>C</code>, you need     to implicitly cast it to <code>C</code> to resolve the overloading, e.g.</p> <p>```cpp using ::testing::Invoke; ...   ResultCallback* is_ok = ...;   ... Invoke(is_ok) ...;  // This works. <p>BlockingClosure* done = new BlockingClosure;   ... Invoke(implicit_cast(done)) ...;  // The cast is necessary. ```"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-functions-with-extra-info-as-actions","title":"Using Functions with Extra Info as Actions","text":"<p>The function or functor you call using <code>Invoke()</code> must have the same number of arguments as the mock function you use it for. Sometimes you may have a function that takes more arguments, and you are willing to pass in the extra arguments yourself to fill the gap. You can do this in gMock using callbacks with pre-bound arguments. Here's an example:</p> <pre><code>using ::testing::Invoke;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(char, DoThis, (int n), (override));\n};\n\nchar SignOfSum(int x, int y) {\n  const int sum = x + y;\n  return (sum &gt; 0) ? '+' : (sum &lt; 0) ? '-' : '0';\n}\n\nTEST_F(FooTest, Test) {\n  MockFoo foo;\n\n  EXPECT_CALL(foo, DoThis(2))\n      .WillOnce(Invoke(NewPermanentCallback(SignOfSum, 5)));\n  EXPECT_EQ('+', foo.DoThis(2));  // Invokes SignOfSum(5, 2).\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#invoking-a-functionmethodfunctorlambdacallback-without-arguments","title":"Invoking a Function/Method/Functor/Lambda/Callback Without Arguments","text":"<p><code>Invoke()</code> passes the mock function's arguments to the function, etc being invoked such that the callee has the full context of the call to work with. If the invoked function is not interested in some or all of the arguments, it can simply ignore them.</p> <p>Yet, a common pattern is that a test author wants to invoke a function without the arguments of the mock function. She could do that using a wrapper function that throws away the arguments before invoking an underlining nullary function. Needless to say, this can be tedious and obscures the intent of the test.</p> <p>There are two solutions to this problem. First, you can pass any callable of zero args as an action. Alternatively, use <code>InvokeWithoutArgs()</code>, which is like <code>Invoke()</code> except that it doesn't pass the mock function's arguments to the callee. Here's an example of each:</p> <pre><code>using ::testing::_;\nusing ::testing::InvokeWithoutArgs;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(bool, ComplexJob, (int n), (override));\n};\n\nbool Job1() { ... }\nbool Job2(int n, char c) { ... }\n\n...\n  MockFoo foo;\n  EXPECT_CALL(foo, ComplexJob(_))\n      .WillOnce([] { Job1(); });\n      .WillOnce(InvokeWithoutArgs(NewPermanentCallback(Job2, 5, 'a')));\n\n  foo.ComplexJob(10);  // Invokes Job1().\n  foo.ComplexJob(20);  // Invokes Job2(5, 'a').\n</code></pre> <p>Note that:</p> <ul> <li>The action takes ownership of the callback and will delete it when the     action itself is destructed.</li> <li> <p>If the type of a callback is derived from a base callback type <code>C</code>, you need     to implicitly cast it to <code>C</code> to resolve the overloading, e.g.</p> <p>```cpp using ::testing::InvokeWithoutArgs; ...   ResultCallback* is_ok = ...;   ... InvokeWithoutArgs(is_ok) ...;  // This works. <p>BlockingClosure* done = ...;   ... InvokeWithoutArgs(implicit_cast(done)) ...;   // The cast is necessary. ```"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#invoking-an-argument-of-the-mock-function","title":"Invoking an Argument of the Mock Function","text":"<p>Sometimes a mock function will receive a function pointer, a functor (in other words, a \"callable\") as an argument, e.g.</p> <pre><code>class MockFoo : public Foo {\n public:\n  MOCK_METHOD(bool, DoThis, (int n, (ResultCallback1&lt;bool, int&gt;* callback)),\n              (override));\n};\n</code></pre> <p>and you may want to invoke this callable argument:</p> <pre><code>using ::testing::_;\n...\n  MockFoo foo;\n  EXPECT_CALL(foo, DoThis(_, _))\n      .WillOnce(...);\n      // Will execute callback-&gt;Run(5), where callback is the\n      // second argument DoThis() receives.\n</code></pre> <p>{: .callout .note} NOTE: The section below is legacy documentation from before C++ had lambdas:</p> <p>Arghh, you need to refer to a mock function argument but C++ has no lambda (yet), so you have to define your own action. :-( Or do you really?</p> <p>Well, gMock has an action to solve exactly this problem:</p> <pre><code>InvokeArgument&lt;N&gt;(arg_1, arg_2, ..., arg_m)\n</code></pre> <p>will invoke the <code>N</code>-th (0-based) argument the mock function receives, with <code>arg_1</code>, <code>arg_2</code>, ..., and <code>arg_m</code>. No matter if the argument is a function pointer, a functor, or a callback. gMock handles them all.</p> <p>With that, you could write:</p> <pre><code>using ::testing::_;\nusing ::testing::InvokeArgument;\n...\n  EXPECT_CALL(foo, DoThis(_, _))\n      .WillOnce(InvokeArgument&lt;1&gt;(5));\n      // Will execute callback-&gt;Run(5), where callback is the\n      // second argument DoThis() receives.\n</code></pre> <p>What if the callable takes an argument by reference? No problem - just wrap it inside <code>std::ref()</code>:</p> <pre><code>  ...\n  MOCK_METHOD(bool, Bar,\n              ((ResultCallback2&lt;bool, int, const Helper&amp;&gt;* callback)),\n              (override));\n  ...\n  using ::testing::_;\n  using ::testing::InvokeArgument;\n  ...\n  MockFoo foo;\n  Helper helper;\n  ...\n  EXPECT_CALL(foo, Bar(_))\n      .WillOnce(InvokeArgument&lt;0&gt;(5, std::ref(helper)));\n      // std::ref(helper) guarantees that a reference to helper, not a copy of\n      // it, will be passed to the callback.\n</code></pre> <p>What if the callable takes an argument by reference and we do not wrap the argument in <code>std::ref()</code>? Then <code>InvokeArgument()</code> will make a copy of the argument, and pass a reference to the copy, instead of a reference to the original value, to the callable. This is especially handy when the argument is a temporary value:</p> <pre><code>  ...\n  MOCK_METHOD(bool, DoThat, (bool (*f)(const double&amp; x, const string&amp; s)),\n              (override));\n  ...\n  using ::testing::_;\n  using ::testing::InvokeArgument;\n  ...\n  MockFoo foo;\n  ...\n  EXPECT_CALL(foo, DoThat(_))\n      .WillOnce(InvokeArgument&lt;0&gt;(5.0, string(\"Hi\")));\n      // Will execute (*f)(5.0, string(\"Hi\")), where f is the function pointer\n      // DoThat() receives.  Note that the values 5.0 and string(\"Hi\") are\n      // temporary and dead once the EXPECT_CALL() statement finishes.  Yet\n      // it's fine to perform this action later, since a copy of the values\n      // are kept inside the InvokeArgument action.\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#ignoring-an-actions-result","title":"Ignoring an Action's Result","text":"<p>Sometimes you have an action that returns something, but you need an action that returns <code>void</code> (perhaps you want to use it in a mock function that returns <code>void</code>, or perhaps it needs to be used in <code>DoAll()</code> and it's not the last in the list). <code>IgnoreResult()</code> lets you do that. For example:</p> <pre><code>using ::testing::_;\nusing ::testing::DoAll;\nusing ::testing::IgnoreResult;\nusing ::testing::Return;\n\nint Process(const MyData&amp; data);\nstring DoSomething();\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(void, Abc, (const MyData&amp; data), (override));\n  MOCK_METHOD(bool, Xyz, (), (override));\n};\n\n  ...\n  MockFoo foo;\n  EXPECT_CALL(foo, Abc(_))\n      // .WillOnce(Invoke(Process));\n      // The above line won't compile as Process() returns int but Abc() needs\n      // to return void.\n      .WillOnce(IgnoreResult(Process));\n  EXPECT_CALL(foo, Xyz())\n      .WillOnce(DoAll(IgnoreResult(DoSomething),\n                      // Ignores the string DoSomething() returns.\n                      Return(true)));\n</code></pre> <p>Note that you cannot use <code>IgnoreResult()</code> on an action that already returns <code>void</code>. Doing so will lead to ugly compiler errors.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#selecting-an-actions-arguments-selectingargs","title":"Selecting an Action's Arguments {#SelectingArgs}","text":"<p>Say you have a mock function <code>Foo()</code> that takes seven arguments, and you have a custom action that you want to invoke when <code>Foo()</code> is called. Trouble is, the custom action only wants three arguments:</p> <pre><code>using ::testing::_;\nusing ::testing::Invoke;\n...\n  MOCK_METHOD(bool, Foo,\n              (bool visible, const string&amp; name, int x, int y,\n               (const map&lt;pair&lt;int, int&gt;&gt;), double&amp; weight, double min_weight,\n               double max_wight));\n...\nbool IsVisibleInQuadrant1(bool visible, int x, int y) {\n  return visible &amp;&amp; x &gt;= 0 &amp;&amp; y &gt;= 0;\n}\n...\n  EXPECT_CALL(mock, Foo)\n      .WillOnce(Invoke(IsVisibleInQuadrant1));  // Uh, won't compile. :-(\n</code></pre> <p>To please the compiler God, you need to define an \"adaptor\" that has the same signature as <code>Foo()</code> and calls the custom action with the right arguments:</p> <pre><code>using ::testing::_;\nusing ::testing::Invoke;\n...\nbool MyIsVisibleInQuadrant1(bool visible, const string&amp; name, int x, int y,\n                            const map&lt;pair&lt;int, int&gt;, double&gt;&amp; weight,\n                            double min_weight, double max_wight) {\n  return IsVisibleInQuadrant1(visible, x, y);\n}\n...\n  EXPECT_CALL(mock, Foo)\n      .WillOnce(Invoke(MyIsVisibleInQuadrant1));  // Now it works.\n</code></pre> <p>But isn't this awkward?</p> <p>gMock provides a generic action adaptor, so you can spend your time minding more important business than writing your own adaptors. Here's the syntax:</p> <pre><code>WithArgs&lt;N1, N2, ..., Nk&gt;(action)\n</code></pre> <p>creates an action that passes the arguments of the mock function at the given indices (0-based) to the inner <code>action</code> and performs it. Using <code>WithArgs</code>, our original example can be written as:</p> <pre><code>using ::testing::_;\nusing ::testing::Invoke;\nusing ::testing::WithArgs;\n...\n  EXPECT_CALL(mock, Foo)\n      .WillOnce(WithArgs&lt;0, 2, 3&gt;(Invoke(IsVisibleInQuadrant1)));  // No need to define your own adaptor.\n</code></pre> <p>For better readability, gMock also gives you:</p> <ul> <li><code>WithoutArgs(action)</code> when the inner <code>action</code> takes no argument, and</li> <li><code>WithArg&lt;N&gt;(action)</code> (no <code>s</code> after <code>Arg</code>) when the inner <code>action</code> takes     one argument.</li> </ul> <p>As you may have realized, <code>InvokeWithoutArgs(...)</code> is just syntactic sugar for <code>WithoutArgs(Invoke(...))</code>.</p> <p>Here are more tips:</p> <ul> <li>The inner action used in <code>WithArgs</code> and friends does not have to be     <code>Invoke()</code> -- it can be anything.</li> <li>You can repeat an argument in the argument list if necessary, e.g.     <code>WithArgs&lt;2, 3, 3, 5&gt;(...)</code>.</li> <li>You can change the order of the arguments, e.g. <code>WithArgs&lt;3, 2, 1&gt;(...)</code>.</li> <li>The types of the selected arguments do not have to match the signature of     the inner action exactly. It works as long as they can be implicitly     converted to the corresponding arguments of the inner action. For example,     if the 4-th argument of the mock function is an <code>int</code> and <code>my_action</code> takes     a <code>double</code>, <code>WithArg&lt;4&gt;(my_action)</code> will work.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#ignoring-arguments-in-action-functions","title":"Ignoring Arguments in Action Functions","text":"<p>The selecting-an-action's-arguments recipe showed us one way to make a mock function and an action with incompatible argument lists fit together. The downside is that wrapping the action in <code>WithArgs&lt;...&gt;()</code> can get tedious for people writing the tests.</p> <p>If you are defining a function (or method, functor, lambda, callback) to be used with <code>Invoke*()</code>, and you are not interested in some of its arguments, an alternative to <code>WithArgs</code> is to declare the uninteresting arguments as <code>Unused</code>. This makes the definition less cluttered and less fragile in case the types of the uninteresting arguments change. It could also increase the chance the action function can be reused. For example, given</p> <pre><code> public:\n  MOCK_METHOD(double, Foo, double(const string&amp; label, double x, double y),\n              (override));\n  MOCK_METHOD(double, Bar, (int index, double x, double y), (override));\n</code></pre> <p>instead of</p> <pre><code>using ::testing::_;\nusing ::testing::Invoke;\n\ndouble DistanceToOriginWithLabel(const string&amp; label, double x, double y) {\n  return sqrt(x*x + y*y);\n}\ndouble DistanceToOriginWithIndex(int index, double x, double y) {\n  return sqrt(x*x + y*y);\n}\n...\n  EXPECT_CALL(mock, Foo(\"abc\", _, _))\n      .WillOnce(Invoke(DistanceToOriginWithLabel));\n  EXPECT_CALL(mock, Bar(5, _, _))\n      .WillOnce(Invoke(DistanceToOriginWithIndex));\n</code></pre> <p>you could write</p> <pre><code>using ::testing::_;\nusing ::testing::Invoke;\nusing ::testing::Unused;\n\ndouble DistanceToOrigin(Unused, double x, double y) {\n  return sqrt(x*x + y*y);\n}\n...\n  EXPECT_CALL(mock, Foo(\"abc\", _, _))\n      .WillOnce(Invoke(DistanceToOrigin));\n  EXPECT_CALL(mock, Bar(5, _, _))\n      .WillOnce(Invoke(DistanceToOrigin));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#sharing-actions","title":"Sharing Actions","text":"<p>Just like matchers, a gMock action object consists of a pointer to a ref-counted implementation object. Therefore copying actions is also allowed and very efficient. When the last action that references the implementation object dies, the implementation object will be deleted.</p> <p>If you have some complex action that you want to use again and again, you may not have to build it from scratch everytime. If the action doesn't have an internal state (i.e. if it always does the same thing no matter how many times it has been called), you can assign it to an action variable and use that variable repeatedly. For example:</p> <pre><code>using ::testing::Action;\nusing ::testing::DoAll;\nusing ::testing::Return;\nusing ::testing::SetArgPointee;\n...\n  Action&lt;bool(int*)&gt; set_flag = DoAll(SetArgPointee&lt;0&gt;(5),\n                                      Return(true));\n  ... use set_flag in .WillOnce() and .WillRepeatedly() ...\n</code></pre> <p>However, if the action has its own state, you may be surprised if you share the action object. Suppose you have an action factory <code>IncrementCounter(init)</code> which creates an action that increments and returns a counter whose initial value is <code>init</code>, using two actions created from the same expression and using a shared action will exhibit different behaviors. Example:</p> <pre><code>  EXPECT_CALL(foo, DoThis())\n      .WillRepeatedly(IncrementCounter(0));\n  EXPECT_CALL(foo, DoThat())\n      .WillRepeatedly(IncrementCounter(0));\n  foo.DoThis();  // Returns 1.\n  foo.DoThis();  // Returns 2.\n  foo.DoThat();  // Returns 1 - Blah() uses a different\n                 // counter than Bar()'s.\n</code></pre> <p>versus</p> <pre><code>using ::testing::Action;\n...\n  Action&lt;int()&gt; increment = IncrementCounter(0);\n  EXPECT_CALL(foo, DoThis())\n      .WillRepeatedly(increment);\n  EXPECT_CALL(foo, DoThat())\n      .WillRepeatedly(increment);\n  foo.DoThis();  // Returns 1.\n  foo.DoThis();  // Returns 2.\n  foo.DoThat();  // Returns 3 - the counter is shared.\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#testing-asynchronous-behavior","title":"Testing Asynchronous Behavior","text":"<p>One oft-encountered problem with gMock is that it can be hard to test asynchronous behavior. Suppose you had a <code>EventQueue</code> class that you wanted to test, and you created a separate <code>EventDispatcher</code> interface so that you could easily mock it out. However, the implementation of the class fired all the events on a background thread, which made test timings difficult. You could just insert <code>sleep()</code> statements and hope for the best, but that makes your test behavior nondeterministic. A better way is to use gMock actions and <code>Notification</code> objects to force your asynchronous test to behave synchronously.</p> <pre><code>class MockEventDispatcher : public EventDispatcher {\n  MOCK_METHOD(bool, DispatchEvent, (int32), (override));\n};\n\nTEST(EventQueueTest, EnqueueEventTest) {\n  MockEventDispatcher mock_event_dispatcher;\n  EventQueue event_queue(&amp;mock_event_dispatcher);\n\n  const int32 kEventId = 321;\n  absl::Notification done;\n  EXPECT_CALL(mock_event_dispatcher, DispatchEvent(kEventId))\n      .WillOnce([&amp;done] { done.Notify(); });\n\n  event_queue.EnqueueEvent(kEventId);\n  done.WaitForNotification();\n}\n</code></pre> <p>In the example above, we set our normal gMock expectations, but then add an additional action to notify the <code>Notification</code> object. Now we can just call <code>Notification::WaitForNotification()</code> in the main thread to wait for the asynchronous call to finish. After that, our test suite is complete and we can safely exit.</p> <p>{: .callout .note} Note: this example has a downside: namely, if the expectation is not satisfied, our test will run forever. It will eventually time-out and fail, but it will take longer and be slightly harder to debug. To alleviate this problem, you can use <code>WaitForNotificationWithTimeout(ms)</code> instead of <code>WaitForNotification()</code>.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#misc-recipes-on-using-gmock","title":"Misc Recipes on Using gMock","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-methods-that-use-move-only-types","title":"Mocking Methods That Use Move-Only Types","text":"<p>C++11 introduced move-only types. A move-only-typed value can be moved from one object to another, but cannot be copied. <code>std::unique_ptr&lt;T&gt;</code> is probably the most commonly used move-only type.</p> <p>Mocking a method that takes and/or returns move-only types presents some challenges, but nothing insurmountable. This recipe shows you how you can do it. Note that the support for move-only method arguments was only introduced to gMock in April 2017; in older code, you may find more complex workarounds for lack of this feature.</p> <p>Let\u2019s say we are working on a fictional project that lets one post and share snippets called \u201cbuzzes\u201d. Your code uses these types:</p> <pre><code>enum class AccessLevel { kInternal, kPublic };\n\nclass Buzz {\n public:\n  explicit Buzz(AccessLevel access) { ... }\n  ...\n};\n\nclass Buzzer {\n public:\n  virtual ~Buzzer() {}\n  virtual std::unique_ptr&lt;Buzz&gt; MakeBuzz(StringPiece text) = 0;\n  virtual bool ShareBuzz(std::unique_ptr&lt;Buzz&gt; buzz, int64_t timestamp) = 0;\n  ...\n};\n</code></pre> <p>A <code>Buzz</code> object represents a snippet being posted. A class that implements the <code>Buzzer</code> interface is capable of creating and sharing <code>Buzz</code>es. Methods in <code>Buzzer</code> may return a <code>unique_ptr&lt;Buzz&gt;</code> or take a <code>unique_ptr&lt;Buzz&gt;</code>. Now we need to mock <code>Buzzer</code> in our tests.</p> <p>To mock a method that accepts or returns move-only types, you just use the familiar <code>MOCK_METHOD</code> syntax as usual:</p> <pre><code>class MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(std::unique_ptr&lt;Buzz&gt;, MakeBuzz, (StringPiece text), (override));\n  MOCK_METHOD(bool, ShareBuzz, (std::unique_ptr&lt;Buzz&gt; buzz, int64_t timestamp),\n              (override));\n};\n</code></pre> <p>Now that we have the mock class defined, we can use it in tests. In the following code examples, we assume that we have defined a <code>MockBuzzer</code> object named <code>mock_buzzer_</code>:</p> <pre><code>  MockBuzzer mock_buzzer_;\n</code></pre> <p>First let\u2019s see how we can set expectations on the <code>MakeBuzz()</code> method, which returns a <code>unique_ptr&lt;Buzz&gt;</code>.</p> <p>As usual, if you set an expectation without an action (i.e. the <code>.WillOnce()</code> or <code>.WillRepeatedly()</code> clause), when that expectation fires, the default action for that method will be taken. Since <code>unique_ptr&lt;&gt;</code> has a default constructor that returns a null <code>unique_ptr</code>, that\u2019s what you\u2019ll get if you don\u2019t specify an action:</p> <pre><code>  // Use the default action.\n  EXPECT_CALL(mock_buzzer_, MakeBuzz(\"hello\"));\n\n  // Triggers the previous EXPECT_CALL.\n  EXPECT_EQ(nullptr, mock_buzzer_.MakeBuzz(\"hello\"));\n</code></pre> <p>If you are not happy with the default action, you can tweak it as usual; see Setting Default Actions.</p> <p>If you just need to return a pre-defined move-only value, you can use the <code>Return(ByMove(...))</code> action:</p> <pre><code>  // When this fires, the unique_ptr&lt;&gt; specified by ByMove(...) will\n  // be returned.\n  EXPECT_CALL(mock_buzzer_, MakeBuzz(\"world\"))\n      .WillOnce(Return(ByMove(MakeUnique&lt;Buzz&gt;(AccessLevel::kInternal))));\n\n  EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz(\"world\"));\n</code></pre> <p>Note that <code>ByMove()</code> is essential here - if you drop it, the code won\u2019t compile.</p> <p>Quiz time! What do you think will happen if a <code>Return(ByMove(...))</code> action is performed more than once (e.g. you write <code>... .WillRepeatedly(Return(ByMove(...)));</code>)? Come think of it, after the first time the action runs, the source value will be consumed (since it\u2019s a move-only value), so the next time around, there\u2019s no value to move from -- you\u2019ll get a run-time error that <code>Return(ByMove(...))</code> can only be run once.</p> <p>If you need your mock method to do more than just moving a pre-defined value, remember that you can always use a lambda or a callable object, which can do pretty much anything you want:</p> <pre><code>  EXPECT_CALL(mock_buzzer_, MakeBuzz(\"x\"))\n      .WillRepeatedly([](StringPiece text) {\n        return MakeUnique&lt;Buzz&gt;(AccessLevel::kInternal);\n      });\n\n  EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz(\"x\"));\n  EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz(\"x\"));\n</code></pre> <p>Every time this <code>EXPECT_CALL</code> fires, a new <code>unique_ptr&lt;Buzz&gt;</code> will be created and returned. You cannot do this with <code>Return(ByMove(...))</code>.</p> <p>That covers returning move-only values; but how do we work with methods accepting move-only arguments? The answer is that they work normally, although some actions will not compile when any of method's arguments are move-only. You can always use <code>Return</code>, or a lambda or functor:</p> <pre><code>  using ::testing::Unused;\n\n  EXPECT_CALL(mock_buzzer_, ShareBuzz(NotNull(), _)).WillOnce(Return(true));\n  EXPECT_TRUE(mock_buzzer_.ShareBuzz(MakeUnique&lt;Buzz&gt;(AccessLevel::kInternal)),\n              0);\n\n  EXPECT_CALL(mock_buzzer_, ShareBuzz(_, _)).WillOnce(\n      [](std::unique_ptr&lt;Buzz&gt; buzz, Unused) { return buzz != nullptr; });\n  EXPECT_FALSE(mock_buzzer_.ShareBuzz(nullptr, 0));\n</code></pre> <p>Many built-in actions (<code>WithArgs</code>, <code>WithoutArgs</code>,<code>DeleteArg</code>, <code>SaveArg</code>, ...) could in principle support move-only arguments, but the support for this is not implemented yet. If this is blocking you, please file a bug.</p> <p>A few actions (e.g. <code>DoAll</code>) copy their arguments internally, so they can never work with non-copyable objects; you'll have to use functors instead.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#legacy-workarounds-for-move-only-types-legacymoveonly","title":"Legacy workarounds for move-only types {#LegacyMoveOnly}","text":"<p>Support for move-only function arguments was only introduced to gMock in April of 2017. In older code, you may encounter the following workaround for the lack of this feature (it is no longer necessary - we're including it just for reference):</p> <pre><code>class MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr&lt;Buzz&gt; buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n</code></pre> <p>The trick is to delegate the <code>ShareBuzz()</code> method to a mock method (let\u2019s call it <code>DoShareBuzz()</code>) that does not take move-only parameters. Then, instead of setting expectations on <code>ShareBuzz()</code>, you set them on the <code>DoShareBuzz()</code> mock method:</p> <pre><code>  MockBuzzer mock_buzzer_;\n  EXPECT_CALL(mock_buzzer_, DoShareBuzz(NotNull(), _));\n\n  // When one calls ShareBuzz() on the MockBuzzer like this, the call is\n  // forwarded to DoShareBuzz(), which is mocked.  Therefore this statement\n  // will trigger the above EXPECT_CALL.\n  mock_buzzer_.ShareBuzz(MakeUnique&lt;Buzz&gt;(AccessLevel::kInternal), 0);\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#making-the-compilation-faster","title":"Making the Compilation Faster","text":"<p>Believe it or not, the vast majority of the time spent on compiling a mock class is in generating its constructor and destructor, as they perform non-trivial tasks (e.g. verification of the expectations). What's more, mock methods with different signatures have different types and thus their constructors/destructors need to be generated by the compiler separately. As a result, if you mock many different types of methods, compiling your mock class can get really slow.</p> <p>If you are experiencing slow compilation, you can move the definition of your mock class' constructor and destructor out of the class body and into a <code>.cc</code> file. This way, even if you <code>#include</code> your mock class in N files, the compiler only needs to generate its constructor and destructor once, resulting in a much faster compilation.</p> <p>Let's illustrate the idea using an example. Here's the definition of a mock class before applying this recipe:</p> <pre><code>// File mock_foo.h.\n...\nclass MockFoo : public Foo {\n public:\n  // Since we don't declare the constructor or the destructor,\n  // the compiler will generate them in every translation unit\n  // where this mock class is used.\n\n  MOCK_METHOD(int, DoThis, (), (override));\n  MOCK_METHOD(bool, DoThat, (const char* str), (override));\n  ... more mock methods ...\n};\n</code></pre> <p>After the change, it would look like:</p> <pre><code>// File mock_foo.h.\n...\nclass MockFoo : public Foo {\n public:\n  // The constructor and destructor are declared, but not defined, here.\n  MockFoo();\n  virtual ~MockFoo();\n\n  MOCK_METHOD(int, DoThis, (), (override));\n  MOCK_METHOD(bool, DoThat, (const char* str), (override));\n  ... more mock methods ...\n};\n</code></pre> <p>and</p> <pre><code>// File mock_foo.cc.\n#include \"path/to/mock_foo.h\"\n\n// The definitions may appear trivial, but the functions actually do a\n// lot of things through the constructors/destructors of the member\n// variables used to implement the mock methods.\nMockFoo::MockFoo() {}\nMockFoo::~MockFoo() {}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#forcing-a-verification","title":"Forcing a Verification","text":"<p>When it's being destroyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, and will generate googletest failures if not. This is convenient as it leaves you with one less thing to worry about. That is, unless you are not sure if your mock object will be destroyed.</p> <p>How could it be that your mock object won't eventually be destroyed? Well, it might be created on the heap and owned by the code you are testing. Suppose there's a bug in that code and it doesn't delete the mock object properly - you could end up with a passing test when there's actually a bug.</p> <p>Using a heap checker is a good idea and can alleviate the concern, but its implementation is not 100% reliable. So, sometimes you do want to force gMock to verify a mock object before it is (hopefully) destructed. You can do this with <code>Mock::VerifyAndClearExpectations(&amp;mock_object)</code>:</p> <pre><code>TEST(MyServerTest, ProcessesRequest) {\n  using ::testing::Mock;\n\n  MockFoo* const foo = new MockFoo;\n  EXPECT_CALL(*foo, ...)...;\n  // ... other expectations ...\n\n  // server now owns foo.\n  MyServer server(foo);\n  server.ProcessRequest(...);\n\n  // In case that server's destructor will forget to delete foo,\n  // this will verify the expectations anyway.\n  Mock::VerifyAndClearExpectations(foo);\n}  // server is destroyed when it goes out of scope here.\n</code></pre> <p>{: .callout .tip} Tip: The <code>Mock::VerifyAndClearExpectations()</code> function returns a <code>bool</code> to indicate whether the verification was successful (<code>true</code> for yes), so you can wrap that function call inside a <code>ASSERT_TRUE()</code> if there is no point going further when the verification has failed.</p> <p>Do not set new expectations after verifying and clearing a mock after its use. Setting expectations after code that exercises the mock has undefined behavior. See Using Mocks in Tests for more information.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-checkpoints-usingcheckpoints","title":"Using Checkpoints {#UsingCheckPoints}","text":"<p>Sometimes you might want to test a mock object's behavior in phases whose sizes are each manageable, or you might want to set more detailed expectations about which API calls invoke which mock functions.</p> <p>A technique you can use is to put the expectations in a sequence and insert calls to a dummy \"checkpoint\" function at specific places. Then you can verify that the mock function calls do happen at the right time. For example, if you are exercising the code:</p> <pre><code>  Foo(1);\n  Foo(2);\n  Foo(3);\n</code></pre> <p>and want to verify that <code>Foo(1)</code> and <code>Foo(3)</code> both invoke <code>mock.Bar(\"a\")</code>, but <code>Foo(2)</code> doesn't invoke anything, you can write:</p> <pre><code>using ::testing::MockFunction;\n\nTEST(FooTest, InvokesBarCorrectly) {\n  MyMock mock;\n  // Class MockFunction&lt;F&gt; has exactly one mock method.  It is named\n  // Call() and has type F.\n  MockFunction&lt;void(string check_point_name)&gt; check;\n  {\n    InSequence s;\n\n    EXPECT_CALL(mock, Bar(\"a\"));\n    EXPECT_CALL(check, Call(\"1\"));\n    EXPECT_CALL(check, Call(\"2\"));\n    EXPECT_CALL(mock, Bar(\"a\"));\n  }\n  Foo(1);\n  check.Call(\"1\");\n  Foo(2);\n  check.Call(\"2\");\n  Foo(3);\n}\n</code></pre> <p>The expectation spec says that the first <code>Bar(\"a\")</code> call must happen before checkpoint \"1\", the second <code>Bar(\"a\")</code> call must happen after checkpoint \"2\", and nothing should happen between the two checkpoints. The explicit checkpoints make it clear which <code>Bar(\"a\")</code> is called by which call to <code>Foo()</code>.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mocking-destructors","title":"Mocking Destructors","text":"<p>Sometimes you want to make sure a mock object is destructed at the right time, e.g. after <code>bar-&gt;A()</code> is called but before <code>bar-&gt;B()</code> is called. We already know that you can specify constraints on the order of mock function calls, so all we need to do is to mock the destructor of the mock function.</p> <p>This sounds simple, except for one problem: a destructor is a special function with special syntax and special semantics, and the <code>MOCK_METHOD</code> macro doesn't work for it:</p> <pre><code>MOCK_METHOD(void, ~MockFoo, ());  // Won't compile!\n</code></pre> <p>The good news is that you can use a simple pattern to achieve the same effect. First, add a mock function <code>Die()</code> to your mock class and call it in the destructor, like this:</p> <pre><code>class MockFoo : public Foo {\n  ...\n  // Add the following two lines to the mock class.\n  MOCK_METHOD(void, Die, ());\n  ~MockFoo() override { Die(); }\n};\n</code></pre> <p>(If the name <code>Die()</code> clashes with an existing symbol, choose another name.) Now, we have translated the problem of testing when a <code>MockFoo</code> object dies to testing when its <code>Die()</code> method is called:</p> <pre><code>  MockFoo* foo = new MockFoo;\n  MockBar* bar = new MockBar;\n  ...\n  {\n    InSequence s;\n\n    // Expects *foo to die after bar-&gt;A() and before bar-&gt;B().\n    EXPECT_CALL(*bar, A());\n    EXPECT_CALL(*foo, Die());\n    EXPECT_CALL(*bar, B());\n  }\n</code></pre> <p>And that's that.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-gmock-and-threads-usingthreads","title":"Using gMock and Threads {#UsingThreads}","text":"<p>In a unit test, it's best if you could isolate and test a piece of code in a single-threaded context. That avoids race conditions and dead locks, and makes debugging your test much easier.</p> <p>Yet most programs are multi-threaded, and sometimes to test something we need to pound on it from more than one thread. gMock works for this purpose too.</p> <p>Remember the steps for using a mock:</p> <ol> <li>Create a mock object <code>foo</code>.</li> <li>Set its default actions and expectations using <code>ON_CALL()</code> and     <code>EXPECT_CALL()</code>.</li> <li>The code under test calls methods of <code>foo</code>.</li> <li>Optionally, verify and reset the mock.</li> <li>Destroy the mock yourself, or let the code under test destroy it. The     destructor will automatically verify it.</li> </ol> <p>If you follow the following simple rules, your mocks and threads can live happily together:</p> <ul> <li>Execute your test code (as opposed to the code being tested) in one     thread. This makes your test easy to follow.</li> <li>Obviously, you can do step #1 without locking.</li> <li>When doing step #2 and #5, make sure no other thread is accessing <code>foo</code>.     Obvious too, huh?</li> <li> </li> </ul> <p>If you violate the rules (for example, if you set expectations on a mock while another thread is calling its methods), you get undefined behavior. That's not fun, so don't do it.</p> <p>gMock guarantees that the action for a mock function is done in the same thread that called the mock function. For example, in</p> <pre><code>  EXPECT_CALL(mock, Foo(1))\n      .WillOnce(action1);\n  EXPECT_CALL(mock, Foo(2))\n      .WillOnce(action2);\n</code></pre> <p>if <code>Foo(1)</code> is called in thread 1 and <code>Foo(2)</code> is called in thread 2, gMock will execute <code>action1</code> in thread 1 and <code>action2</code> in thread 2.</p> <p>gMock does not impose a sequence on actions performed in different threads (doing so may create deadlocks as the actions may need to cooperate). This means that the execution of <code>action1</code> and <code>action2</code> in the above example may interleave. If this is a problem, you should add proper synchronization logic to <code>action1</code> and <code>action2</code> to make the test thread-safe.</p> <p>Also, remember that <code>DefaultValue&lt;T&gt;</code> is a global resource that potentially affects all living mock objects in your program. Naturally, you won't want to mess with it from multiple threads or when there still are mocks in action.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#3-and-4-can-be-done-either-in-one-thread-or-in-multiple-threads-anyway","title":"3 and #4 can be done either in one thread or in multiple threads - anyway","text":"<p>you want. gMock takes care of the locking, so you don't have to do any - unless required by your test logic.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#controlling-how-much-information-gmock-prints","title":"Controlling How Much Information gMock Prints","text":"<p>When gMock sees something that has the potential of being an error (e.g. a mock function with no expectation is called, a.k.a. an uninteresting call, which is allowed but perhaps you forgot to explicitly ban the call), it prints some warning messages, including the arguments of the function, the return value, and the stack trace. Hopefully this will remind you to take a look and see if there is indeed a problem.</p> <p>Sometimes you are confident that your tests are correct and may not appreciate such friendly messages. Some other times, you are debugging your tests or learning about the behavior of the code you are testing, and wish you could observe every mock call that happens (including argument values, the return value, and the stack trace). Clearly, one size doesn't fit all.</p> <p>You can control how much gMock tells you using the <code>--gmock_verbose=LEVEL</code> command-line flag, where <code>LEVEL</code> is a string with three possible values:</p> <ul> <li><code>info</code>: gMock will print all informational messages, warnings, and errors     (most verbose). At this setting, gMock will also log any calls to the     <code>ON_CALL/EXPECT_CALL</code> macros. It will include a stack trace in     \"uninteresting call\" warnings.</li> <li><code>warning</code>: gMock will print both warnings and errors (less verbose); it will     omit the stack traces in \"uninteresting call\" warnings. This is the default.</li> <li><code>error</code>: gMock will print errors only (least verbose).</li> </ul> <p>Alternatively, you can adjust the value of that flag from within your tests like so:</p> <pre><code>  ::testing::FLAGS_gmock_verbose = \"error\";\n</code></pre> <p>If you find gMock printing too many stack frames with its informational or warning messages, remember that you can control their amount with the <code>--gtest_stack_trace_depth=max_depth</code> flag.</p> <p>Now, judiciously use the right flag to enable gMock serve you better!</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#gaining-super-vision-into-mock-calls","title":"Gaining Super Vision into Mock Calls","text":"<p>You have a test using gMock. It fails: gMock tells you some expectations aren't satisfied. However, you aren't sure why: Is there a typo somewhere in the matchers? Did you mess up the order of the <code>EXPECT_CALL</code>s? Or is the code under test doing something wrong? How can you find out the cause?</p> <p>Won't it be nice if you have X-ray vision and can actually see the trace of all <code>EXPECT_CALL</code>s and mock method calls as they are made? For each call, would you like to see its actual argument values and which <code>EXPECT_CALL</code> gMock thinks it matches? If you still need some help to figure out who made these calls, how about being able to see the complete stack trace at each mock call?</p> <p>You can unlock this power by running your test with the <code>--gmock_verbose=info</code> flag. For example, given the test program:</p> <pre><code>#include \"gmock/gmock.h\"\n\nusing testing::_;\nusing testing::HasSubstr;\nusing testing::Return;\n\nclass MockFoo {\n public:\n  MOCK_METHOD(void, F, (const string&amp; x, const string&amp; y));\n};\n\nTEST(Foo, Bar) {\n  MockFoo mock;\n  EXPECT_CALL(mock, F(_, _)).WillRepeatedly(Return());\n  EXPECT_CALL(mock, F(\"a\", \"b\"));\n  EXPECT_CALL(mock, F(\"c\", HasSubstr(\"d\")));\n\n  mock.F(\"a\", \"good\");\n  mock.F(\"a\", \"b\");\n}\n</code></pre> <p>if you run it with <code>--gmock_verbose=info</code>, you will see this output:</p> <pre><code>[ RUN       ] Foo.Bar\n\nfoo_test.cc:14: EXPECT_CALL(mock, F(_, _)) invoked\nStack trace: ...\n\nfoo_test.cc:15: EXPECT_CALL(mock, F(\"a\", \"b\")) invoked\nStack trace: ...\n\nfoo_test.cc:16: EXPECT_CALL(mock, F(\"c\", HasSubstr(\"d\"))) invoked\nStack trace: ...\n\nfoo_test.cc:14: Mock function call matches EXPECT_CALL(mock, F(_, _))...\n    Function call: F(@0x7fff7c8dad40\"a\",@0x7fff7c8dad10\"good\")\nStack trace: ...\n\nfoo_test.cc:15: Mock function call matches EXPECT_CALL(mock, F(\"a\", \"b\"))...\n    Function call: F(@0x7fff7c8dada0\"a\",@0x7fff7c8dad70\"b\")\nStack trace: ...\n\nfoo_test.cc:16: Failure\nActual function call count doesn't match EXPECT_CALL(mock, F(\"c\", HasSubstr(\"d\")))...\n         Expected: to be called once\n           Actual: never called - unsatisfied and active\n[  FAILED  ] Foo.Bar\n</code></pre> <p>Suppose the bug is that the <code>\"c\"</code> in the third <code>EXPECT_CALL</code> is a typo and should actually be <code>\"a\"</code>. With the above message, you should see that the actual <code>F(\"a\", \"good\")</code> call is matched by the first <code>EXPECT_CALL</code>, not the third as you thought. From that it should be obvious that the third <code>EXPECT_CALL</code> is written wrong. Case solved.</p> <p>If you are interested in the mock call trace but not the stack traces, you can combine <code>--gmock_verbose=info</code> with <code>--gtest_stack_trace_depth=0</code> on the test command line.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#running-tests-in-emacs","title":"Running Tests in Emacs","text":"<p>If you build and run your tests in Emacs using the <code>M-x google-compile</code> command (as many googletest users do), the source file locations of gMock and googletest errors will be highlighted. Just press <code>&lt;Enter&gt;</code> on one of them and you'll be taken to the offending line. Or, you can just type `C-x`` to jump to the next error.</p> <p>To make it even easier, you can add the following lines to your <code>~/.emacs</code> file:</p> <pre><code>(global-set-key \"\\M-m\"  'google-compile)  ; m is for make\n(global-set-key [M-down] 'next-error)\n(global-set-key [M-up]  '(lambda () (interactive) (next-error -1)))\n</code></pre> <p>Then you can type <code>M-m</code> to start a build (if you want to run the test as well, just make sure <code>foo_test.run</code> or <code>runtests</code> is in the build command you supply after typing <code>M-m</code>), or <code>M-up</code>/<code>M-down</code> to move back and forth between errors.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#extending-gmock","title":"Extending gMock","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-matchers-quickly-newmatchers","title":"Writing New Matchers Quickly {#NewMatchers}","text":"<p>{: .callout .warning} WARNING: gMock does not guarantee when or how many times a matcher will be invoked. Therefore, all matchers must be functionally pure. See this section for more details.</p> <p>The <code>MATCHER*</code> family of macros can be used to define custom matchers easily. The syntax:</p> <pre><code>MATCHER(name, description_string_expression) { statements; }\n</code></pre> <p>will define a matcher with the given name that executes the statements, which must return a <code>bool</code> to indicate if the match succeeds. Inside the statements, you can refer to the value being matched by <code>arg</code>, and refer to its type by <code>arg_type</code>.</p> <p>The description string is a <code>string</code>-typed expression that documents what the matcher does, and is used to generate the failure message when the match fails. It can (and should) reference the special <code>bool</code> variable <code>negation</code>, and should evaluate to the description of the matcher when <code>negation</code> is <code>false</code>, or that of the matcher's negation when <code>negation</code> is <code>true</code>.</p> <p>For convenience, we allow the description string to be empty (<code>\"\"</code>), in which case gMock will use the sequence of words in the matcher name as the description.</p> <p>For example:</p> <pre><code>MATCHER(IsDivisibleBy7, \"\") { return (arg % 7) == 0; }\n</code></pre> <p>allows you to write</p> <pre><code>  // Expects mock_foo.Bar(n) to be called where n is divisible by 7.\n  EXPECT_CALL(mock_foo, Bar(IsDivisibleBy7()));\n</code></pre> <p>or,</p> <pre><code>  using ::testing::Not;\n  ...\n  // Verifies that a value is divisible by 7 and the other is not.\n  EXPECT_THAT(some_expression, IsDivisibleBy7());\n  EXPECT_THAT(some_other_expression, Not(IsDivisibleBy7()));\n</code></pre> <p>If the above assertions fail, they will print something like:</p> <pre><code>  Value of: some_expression\n  Expected: is divisible by 7\n    Actual: 27\n  ...\n  Value of: some_other_expression\n  Expected: not (is divisible by 7)\n    Actual: 21\n</code></pre> <p>where the descriptions <code>\"is divisible by 7\"</code> and <code>\"not (is divisible by 7)\"</code> are automatically calculated from the matcher name <code>IsDivisibleBy7</code>.</p> <p>As you may have noticed, the auto-generated descriptions (especially those for the negation) may not be so great. You can always override them with a <code>string</code> expression of your own:</p> <pre><code>MATCHER(IsDivisibleBy7,\n        absl::StrCat(negation ? \"isn't\" : \"is\", \" divisible by 7\")) {\n  return (arg % 7) == 0;\n}\n</code></pre> <p>Optionally, you can stream additional information to a hidden argument named <code>result_listener</code> to explain the match result. For example, a better definition of <code>IsDivisibleBy7</code> is:</p> <pre><code>MATCHER(IsDivisibleBy7, \"\") {\n  if ((arg % 7) == 0)\n    return true;\n\n  *result_listener &lt;&lt; \"the remainder is \" &lt;&lt; (arg % 7);\n  return false;\n}\n</code></pre> <p>With this definition, the above assertion will give a better message:</p> <pre><code>  Value of: some_expression\n  Expected: is divisible by 7\n    Actual: 27 (the remainder is 6)\n</code></pre> <p>You should let <code>MatchAndExplain()</code> print any additional information that can help a user understand the match result. Note that it should explain why the match succeeds in case of a success (unless it's obvious) - this is useful when the matcher is used inside <code>Not()</code>. There is no need to print the argument value itself, as gMock already prints it for you.</p> <p>{: .callout .note} NOTE: The type of the value being matched (<code>arg_type</code>) is determined by the context in which you use the matcher and is supplied to you by the compiler, so you don't need to worry about declaring it (nor can you). This allows the matcher to be polymorphic. For example, <code>IsDivisibleBy7()</code> can be used to match any type where the value of <code>(arg % 7) == 0</code> can be implicitly converted to a <code>bool</code>. In the <code>Bar(IsDivisibleBy7())</code> example above, if method <code>Bar()</code> takes an <code>int</code>, <code>arg_type</code> will be <code>int</code>; if it takes an <code>unsigned long</code>, <code>arg_type</code> will be <code>unsigned long</code>; and so on.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-parameterized-matchers-quickly","title":"Writing New Parameterized Matchers Quickly","text":"<p>Sometimes you'll want to define a matcher that has parameters. For that you can use the macro:</p> <pre><code>MATCHER_P(name, param_name, description_string) { statements; }\n</code></pre> <p>where the description string can be either <code>\"\"</code> or a <code>string</code> expression that references <code>negation</code> and <code>param_name</code>.</p> <p>For example:</p> <pre><code>MATCHER_P(HasAbsoluteValue, value, \"\") { return abs(arg) == value; }\n</code></pre> <p>will allow you to write:</p> <pre><code>  EXPECT_THAT(Blah(\"a\"), HasAbsoluteValue(n));\n</code></pre> <p>which may lead to this message (assuming <code>n</code> is 10):</p> <pre><code>  Value of: Blah(\"a\")\n  Expected: has absolute value 10\n    Actual: -9\n</code></pre> <p>Note that both the matcher description and its parameter are printed, making the message human-friendly.</p> <p>In the matcher definition body, you can write <code>foo_type</code> to reference the type of a parameter named <code>foo</code>. For example, in the body of <code>MATCHER_P(HasAbsoluteValue, value)</code> above, you can write <code>value_type</code> to refer to the type of <code>value</code>.</p> <p>gMock also provides <code>MATCHER_P2</code>, <code>MATCHER_P3</code>, ..., up to <code>MATCHER_P10</code> to support multi-parameter matchers:</p> <pre><code>MATCHER_Pk(name, param_1, ..., param_k, description_string) { statements; }\n</code></pre> <p>Please note that the custom description string is for a particular instance of the matcher, where the parameters have been bound to actual values. Therefore usually you'll want the parameter values to be part of the description. gMock lets you do that by referencing the matcher parameters in the description string expression.</p> <p>For example,</p> <pre><code>using ::testing::PrintToString;\nMATCHER_P2(InClosedRange, low, hi,\n           absl::StrFormat(\"%s in range [%s, %s]\", negation ? \"isn't\" : \"is\",\n                           PrintToString(low), PrintToString(hi))) {\n  return low &lt;= arg &amp;&amp; arg &lt;= hi;\n}\n...\nEXPECT_THAT(3, InClosedRange(4, 6));\n</code></pre> <p>would generate a failure that contains the message:</p> <pre><code>  Expected: is in range [4, 6]\n</code></pre> <p>If you specify <code>\"\"</code> as the description, the failure message will contain the sequence of words in the matcher name followed by the parameter values printed as a tuple. For example,</p> <pre><code>  MATCHER_P2(InClosedRange, low, hi, \"\") { ... }\n  ...\n  EXPECT_THAT(3, InClosedRange(4, 6));\n</code></pre> <p>would generate a failure that contains the text:</p> <pre><code>  Expected: in closed range (4, 6)\n</code></pre> <p>For the purpose of typing, you can view</p> <pre><code>MATCHER_Pk(Foo, p1, ..., pk, description_string) { ... }\n</code></pre> <p>as shorthand for</p> <pre><code>template &lt;typename p1_type, ..., typename pk_type&gt;\nFooMatcherPk&lt;p1_type, ..., pk_type&gt;\nFoo(p1_type p1, ..., pk_type pk) { ... }\n</code></pre> <p>When you write <code>Foo(v1, ..., vk)</code>, the compiler infers the types of the parameters <code>v1</code>, ..., and <code>vk</code> for you. If you are not happy with the result of the type inference, you can specify the types by explicitly instantiating the template, as in <code>Foo&lt;long, bool&gt;(5, false)</code>. As said earlier, you don't get to (or need to) specify <code>arg_type</code> as that's determined by the context in which the matcher is used.</p> <p>You can assign the result of expression <code>Foo(p1, ..., pk)</code> to a variable of type <code>FooMatcherPk&lt;p1_type, ..., pk_type&gt;</code>. This can be useful when composing matchers. Matchers that don't have a parameter or have only one parameter have special types: you can assign <code>Foo()</code> to a <code>FooMatcher</code>-typed variable, and assign <code>Foo(p)</code> to a <code>FooMatcherP&lt;p_type&gt;</code>-typed variable.</p> <p>While you can instantiate a matcher template with reference types, passing the parameters by pointer usually makes your code more readable. If, however, you still want to pass a parameter by reference, be aware that in the failure message generated by the matcher you will see the value of the referenced object but not its address.</p> <p>You can overload matchers with different numbers of parameters:</p> <pre><code>MATCHER_P(Blah, a, description_string_1) { ... }\nMATCHER_P2(Blah, a, b, description_string_2) { ... }\n</code></pre> <p>While it's tempting to always use the <code>MATCHER*</code> macros when defining a new matcher, you should also consider implementing the matcher interface directly instead (see the recipes that follow), especially if you need to use the matcher a lot. While these approaches require more work, they give you more control on the types of the value being matched and the matcher parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading matchers based on parameter types (as opposed to just based on the number of parameters).</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-monomorphic-matchers","title":"Writing New Monomorphic Matchers","text":"<p>A matcher of argument type <code>T</code> implements the matcher interface for <code>T</code> and does two things: it tests whether a value of type <code>T</code> matches the matcher, and can describe what kind of values it matches. The latter ability is used for generating readable error messages when expectations are violated.</p> <p>A matcher of <code>T</code> must declare a typedef like:</p> <pre><code>using is_gtest_matcher = void;\n</code></pre> <p>and supports the following operations:</p> <pre><code>// Match a value and optionally explain into an ostream.\nbool matched = matcher.MatchAndExplain(value, maybe_os);\n// where `value` is of type `T` and\n// `maybe_os` is of type `std::ostream*`, where it can be null if the caller\n// is not interested in there textual explanation.\n\nmatcher.DescribeTo(os);\nmatcher.DescribeNegationTo(os);\n// where `os` is of type `std::ostream*`.\n</code></pre> <p>If you need a custom matcher but <code>Truly()</code> is not a good option (for example, you may not be happy with the way <code>Truly(predicate)</code> describes itself, or you may want your matcher to be polymorphic as <code>Eq(value)</code> is), you can define a matcher to do whatever you want in two steps: first implement the matcher interface, and then define a factory function to create a matcher instance. The second step is not strictly needed but it makes the syntax of using the matcher nicer.</p> <p>For example, you can define a matcher to test whether an <code>int</code> is divisible by 7 and then use it like this:</p> <pre><code>using ::testing::Matcher;\n\nclass DivisibleBy7Matcher {\n public:\n  using is_gtest_matcher = void;\n\n  bool MatchAndExplain(int n, std::ostream*) const {\n    return (n % 7) == 0;\n  }\n\n  void DescribeTo(std::ostream* os) const {\n    *os &lt;&lt; \"is divisible by 7\";\n  }\n\n  void DescribeNegationTo(std::ostream* os) const {\n    *os &lt;&lt; \"is not divisible by 7\";\n  }\n};\n\nMatcher&lt;int&gt; DivisibleBy7() {\n  return DivisibleBy7Matcher();\n}\n\n...\n  EXPECT_CALL(foo, Bar(DivisibleBy7()));\n</code></pre> <p>You may improve the matcher message by streaming additional information to the <code>os</code> argument in <code>MatchAndExplain()</code>:</p> <pre><code>class DivisibleBy7Matcher {\n public:\n  bool MatchAndExplain(int n, std::ostream* os) const {\n    const int remainder = n % 7;\n    if (remainder != 0 &amp;&amp; os != nullptr) {\n      *os &lt;&lt; \"the remainder is \" &lt;&lt; remainder;\n    }\n    return remainder == 0;\n  }\n  ...\n};\n</code></pre> <p>Then, <code>EXPECT_THAT(x, DivisibleBy7());</code> may generate a message like this:</p> <pre><code>Value of: x\nExpected: is divisible by 7\n  Actual: 23 (the remainder is 2)\n</code></pre> <p>{: .callout .tip} Tip: for convenience, <code>MatchAndExplain()</code> can take a <code>MatchResultListener*</code> instead of <code>std::ostream*</code>.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-polymorphic-matchers","title":"Writing New Polymorphic Matchers","text":"<p>Expanding what we learned above to polymorphic matchers is now just as simple as adding templates in the right place.</p> <pre><code>\nclass NotNullMatcher {\n public:\n  using is_gtest_matcher = void;\n\n  // To implement a polymorphic matcher, we just need to make MatchAndExplain a\n  // template on its first argument.\n\n  // In this example, we want to use NotNull() with any pointer, so\n  // MatchAndExplain() accepts a pointer of any type as its first argument.\n  // In general, you can define MatchAndExplain() as an ordinary method or\n  // a method template, or even overload it.\n  template &lt;typename T&gt;\n  bool MatchAndExplain(T* p, std::ostream*) const {\n    return p != nullptr;\n  }\n\n  // Describes the property of a value matching this matcher.\n  void DescribeTo(std::ostream* os) const { *os &lt;&lt; \"is not NULL\"; }\n\n  // Describes the property of a value NOT matching this matcher.\n  void DescribeNegationTo(std::ostream* os) const { *os &lt;&lt; \"is NULL\"; }\n};\n\nNotNullMatcher NotNull() {\n  return NotNullMatcher();\n}\n\n...\n\n  EXPECT_CALL(foo, Bar(NotNull()));  // The argument must be a non-NULL pointer.\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#legacy-matcher-implementation","title":"Legacy Matcher Implementation","text":"<p>Defining matchers used to be somewhat more complicated, in which it required several supporting classes and virtual functions. To implement a matcher for type <code>T</code> using the legacy API you have to derive from <code>MatcherInterface&lt;T&gt;</code> and call <code>MakeMatcher</code> to construct the object.</p> <p>The interface looks like this:</p> <pre><code>class MatchResultListener {\n public:\n  ...\n  // Streams x to the underlying ostream; does nothing if the ostream\n  // is NULL.\n  template &lt;typename T&gt;\n  MatchResultListener&amp; operator&lt;&lt;(const T&amp; x);\n\n  // Returns the underlying ostream.\n  std::ostream* stream();\n};\n\ntemplate &lt;typename T&gt;\nclass MatcherInterface {\n public:\n  virtual ~MatcherInterface();\n\n  // Returns true if and only if the matcher matches x; also explains the match\n  // result to 'listener'.\n  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;\n\n  // Describes this matcher to an ostream.\n  virtual void DescribeTo(std::ostream* os) const = 0;\n\n  // Describes the negation of this matcher to an ostream.\n  virtual void DescribeNegationTo(std::ostream* os) const;\n};\n</code></pre> <p>Fortunately, most of the time you can define a polymorphic matcher easily with the help of <code>MakePolymorphicMatcher()</code>. Here's how you can define <code>NotNull()</code> as an example:</p> <pre><code>using ::testing::MakePolymorphicMatcher;\nusing ::testing::MatchResultListener;\nusing ::testing::PolymorphicMatcher;\n\nclass NotNullMatcher {\n public:\n  // To implement a polymorphic matcher, first define a COPYABLE class\n  // that has three members MatchAndExplain(), DescribeTo(), and\n  // DescribeNegationTo(), like the following.\n\n  // In this example, we want to use NotNull() with any pointer, so\n  // MatchAndExplain() accepts a pointer of any type as its first argument.\n  // In general, you can define MatchAndExplain() as an ordinary method or\n  // a method template, or even overload it.\n  template &lt;typename T&gt;\n  bool MatchAndExplain(T* p,\n                       MatchResultListener* /* listener */) const {\n    return p != NULL;\n  }\n\n  // Describes the property of a value matching this matcher.\n  void DescribeTo(std::ostream* os) const { *os &lt;&lt; \"is not NULL\"; }\n\n  // Describes the property of a value NOT matching this matcher.\n  void DescribeNegationTo(std::ostream* os) const { *os &lt;&lt; \"is NULL\"; }\n};\n\n// To construct a polymorphic matcher, pass an instance of the class\n// to MakePolymorphicMatcher().  Note the return type.\nPolymorphicMatcher&lt;NotNullMatcher&gt; NotNull() {\n  return MakePolymorphicMatcher(NotNullMatcher());\n}\n\n...\n\n  EXPECT_CALL(foo, Bar(NotNull()));  // The argument must be a non-NULL pointer.\n</code></pre> <p>{: .callout .note} Note: Your polymorphic matcher class does not need to inherit from <code>MatcherInterface</code> or any other class, and its methods do not need to be virtual.</p> <p>Like in a monomorphic matcher, you may explain the match result by streaming additional information to the <code>listener</code> argument in <code>MatchAndExplain()</code>.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-cardinalities","title":"Writing New Cardinalities","text":"<p>A cardinality is used in <code>Times()</code> to tell gMock how many times you expect a call to occur. It doesn't have to be exact. For example, you can say <code>AtLeast(5)</code> or <code>Between(2, 4)</code>.</p> <p>If the built-in set of cardinalities doesn't suit you, you are free to define your own by implementing the following interface (in namespace <code>testing</code>):</p> <pre><code>class CardinalityInterface {\n public:\n  virtual ~CardinalityInterface();\n\n  // Returns true if and only if call_count calls will satisfy this cardinality.\n  virtual bool IsSatisfiedByCallCount(int call_count) const = 0;\n\n  // Returns true if and only if call_count calls will saturate this\n  // cardinality.\n  virtual bool IsSaturatedByCallCount(int call_count) const = 0;\n\n  // Describes self to an ostream.\n  virtual void DescribeTo(std::ostream* os) const = 0;\n};\n</code></pre> <p>For example, to specify that a call must occur even number of times, you can write</p> <pre><code>using ::testing::Cardinality;\nusing ::testing::CardinalityInterface;\nusing ::testing::MakeCardinality;\n\nclass EvenNumberCardinality : public CardinalityInterface {\n public:\n  bool IsSatisfiedByCallCount(int call_count) const override {\n    return (call_count % 2) == 0;\n  }\n\n  bool IsSaturatedByCallCount(int call_count) const override {\n    return false;\n  }\n\n  void DescribeTo(std::ostream* os) const {\n    *os &lt;&lt; \"called even number of times\";\n  }\n};\n\nCardinality EvenNumber() {\n  return MakeCardinality(new EvenNumberCardinality);\n}\n\n...\n  EXPECT_CALL(foo, Bar(3))\n      .Times(EvenNumber());\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-actions-quickly-quicknewactions","title":"Writing New Actions Quickly {#QuickNewActions}","text":"<p>If the built-in actions don't work for you, you can easily define your own one. Just define a functor class with a (possibly templated) call operator, matching the signature of your action.</p> <pre><code>struct Increment {\n  template &lt;typename T&gt;\n  T operator()(T* arg) {\n    return ++(*arg);\n  }\n}\n</code></pre> <p>The same approach works with stateful functors (or any callable, really):</p> <pre><code>struct MultiplyBy {\n  template &lt;typename T&gt;\n  T operator()(T arg) { return arg * multiplier; }\n\n  int multiplier;\n}\n\n// Then use:\n// EXPECT_CALL(...).WillOnce(MultiplyBy{7});\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#legacy-macro-based-actions","title":"Legacy macro-based Actions","text":"<p>Before C++11, the functor-based actions were not supported; the old way of writing actions was through a set of <code>ACTION*</code> macros. We suggest to avoid them in new code; they hide a lot of logic behind the macro, potentially leading to harder-to-understand compiler errors. Nevertheless, we cover them here for completeness.</p> <p>By writing</p> <pre><code>ACTION(name) { statements; }\n</code></pre> <p>in a namespace scope (i.e. not inside a class or function), you will define an action with the given name that executes the statements. The value returned by <code>statements</code> will be used as the return value of the action. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as <code>argK</code>. For example:</p> <pre><code>ACTION(IncrementArg1) { return ++(*arg1); }\n</code></pre> <p>allows you to write</p> <pre><code>... WillOnce(IncrementArg1());\n</code></pre> <p>Note that you don't need to specify the types of the mock function arguments. Rest assured that your code is type-safe though: you'll get a compiler error if <code>*arg1</code> doesn't support the <code>++</code> operator, or if the type of <code>++(*arg1)</code> isn't compatible with the mock function's return type.</p> <p>Another example:</p> <pre><code>ACTION(Foo) {\n  (*arg2)(5);\n  Blah();\n  *arg1 = 0;\n  return arg0;\n}\n</code></pre> <p>defines an action <code>Foo()</code> that invokes argument #2 (a function pointer) with 5, calls function <code>Blah()</code>, sets the value pointed to by argument #1 to 0, and returns argument #0.</p> <p>For more convenience and flexibility, you can also use the following pre-defined symbols in the body of <code>ACTION</code>:</p> <code>argK_type</code> The type of the K-th (0-based) argument of the mock function <code>args</code> All arguments of the mock function as a tuple <code>args_type</code> The type of all arguments of the mock function as a tuple <code>return_type</code> The return type of the mock function <code>function_type</code> The type of the mock function <p>For example, when using an <code>ACTION</code> as a stub action for mock function:</p> <pre><code>int DoSomething(bool flag, int* ptr);\n</code></pre> <p>we have:</p> Pre-defined Symbol Is Bound To <code>arg0</code> the value of <code>flag</code> <code>arg0_type</code> the type <code>bool</code> <code>arg1</code> the value of <code>ptr</code> <code>arg1_type</code> the type <code>int*</code> <code>args</code> the tuple <code>(flag, ptr)</code> <code>args_type</code> the type <code>std::tuple&lt;bool, int*&gt;</code> <code>return_type</code> the type <code>int</code> <code>function_type</code> the type <code>int(bool, int*)</code>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#legacy-macro-based-parameterized-actions","title":"Legacy macro-based parameterized Actions","text":"<p>Sometimes you'll want to parameterize an action you define. For that we have another macro</p> <pre><code>ACTION_P(name, param) { statements; }\n</code></pre> <p>For example,</p> <pre><code>ACTION_P(Add, n) { return arg0 + n; }\n</code></pre> <p>will allow you to write</p> <pre><code>// Returns argument #0 + 5.\n... WillOnce(Add(5));\n</code></pre> <p>For convenience, we use the term arguments for the values used to invoke the mock function, and the term parameters for the values used to instantiate an action.</p> <p>Note that you don't need to provide the type of the parameter either. Suppose the parameter is named <code>param</code>, you can also use the gMock-defined symbol <code>param_type</code> to refer to the type of the parameter as inferred by the compiler. For example, in the body of <code>ACTION_P(Add, n)</code> above, you can write <code>n_type</code> for the type of <code>n</code>.</p> <p>gMock also provides <code>ACTION_P2</code>, <code>ACTION_P3</code>, and etc to support multi-parameter actions. For example,</p> <pre><code>ACTION_P2(ReturnDistanceTo, x, y) {\n  double dx = arg0 - x;\n  double dy = arg1 - y;\n  return sqrt(dx*dx + dy*dy);\n}\n</code></pre> <p>lets you write</p> <pre><code>... WillOnce(ReturnDistanceTo(5.0, 26.5));\n</code></pre> <p>You can view <code>ACTION</code> as a degenerated parameterized action where the number of parameters is 0.</p> <p>You can also easily define actions overloaded on the number of parameters:</p> <pre><code>ACTION_P(Plus, a) { ... }\nACTION_P2(Plus, a, b) { ... }\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#restricting-the-type-of-an-argument-or-parameter-in-an-action","title":"Restricting the Type of an Argument or Parameter in an ACTION","text":"<p>For maximum brevity and reusability, the <code>ACTION*</code> macros don't ask you to provide the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.</p> <p>Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example:</p> <pre><code>ACTION(Foo) {\n  // Makes sure arg0 can be converted to int.\n  int n = arg0;\n  ... use n instead of arg0 here ...\n}\n\nACTION_P(Bar, param) {\n  // Makes sure the type of arg1 is const char*.\n  ::testing::StaticAssertTypeEq&lt;const char*, arg1_type&gt;();\n\n  // Makes sure param can be converted to bool.\n  bool flag = param;\n}\n</code></pre> <p>where <code>StaticAssertTypeEq</code> is a compile-time assertion in googletest that verifies two types are the same.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-action-templates-quickly","title":"Writing New Action Templates Quickly","text":"<p>Sometimes you want to give an action explicit template parameters that cannot be inferred from its value parameters. <code>ACTION_TEMPLATE()</code> supports that and can be viewed as an extension to <code>ACTION()</code> and <code>ACTION_P*()</code>.</p> <p>The syntax:</p> <pre><code>ACTION_TEMPLATE(ActionName,\n                HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),\n                AND_n_VALUE_PARAMS(p1, ..., p_n)) { statements; }\n</code></pre> <p>defines an action template that takes m explicit template parameters and n value parameters, where m is in [1, 10] and n is in [0, 10]. <code>name_i</code> is the name of the i-th template parameter, and <code>kind_i</code> specifies whether it's a <code>typename</code>, an integral constant, or a template. <code>p_i</code> is the name of the i-th value parameter.</p> <p>Example:</p> <pre><code>// DuplicateArg&lt;k, T&gt;(output) converts the k-th argument of the mock\n// function to type T and copies it to *output.\nACTION_TEMPLATE(DuplicateArg,\n                // Note the comma between int and k:\n                HAS_2_TEMPLATE_PARAMS(int, k, typename, T),\n                AND_1_VALUE_PARAMS(output)) {\n  *output = T(std::get&lt;k&gt;(args));\n}\n</code></pre> <p>To create an instance of an action template, write:</p> <pre><code>ActionName&lt;t1, ..., t_m&gt;(v1, ..., v_n)\n</code></pre> <p>where the <code>t</code>s are the template arguments and the <code>v</code>s are the value arguments. The value argument types are inferred by the compiler. For example:</p> <pre><code>using ::testing::_;\n...\n  int n;\n  EXPECT_CALL(mock, Foo).WillOnce(DuplicateArg&lt;1, unsigned char&gt;(&amp;n));\n</code></pre> <p>If you want to explicitly specify the value argument types, you can provide additional template arguments:</p> <pre><code>ActionName&lt;t1, ..., t_m, u1, ..., u_k&gt;(v1, ..., v_n)\n</code></pre> <p>where <code>u_i</code> is the desired type of <code>v_i</code>.</p> <p><code>ACTION_TEMPLATE</code> and <code>ACTION</code>/<code>ACTION_P*</code> can be overloaded on the number of value parameters, but not on the number of template parameters. Without the restriction, the meaning of the following is unclear:</p> <pre><code>  OverloadedAction&lt;int, bool&gt;(x);\n</code></pre> <p>Are we using a single-template-parameter action where <code>bool</code> refers to the type of <code>x</code>, or a two-template-parameter action where the compiler is asked to infer the type of <code>x</code>?</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#using-the-action-objects-type","title":"Using the ACTION Object's Type","text":"<p>If you are writing a function that returns an <code>ACTION</code> object, you'll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple:</p> Given Definition Expression Has Type <code>ACTION(Foo)</code> <code>Foo()</code> <code>FooAction</code> <code>ACTION_TEMPLATE(Foo, HAS_m_TEMPLATE_PARAMS(...), AND_0_VALUE_PARAMS())</code> <code>Foo&lt;t1, ..., t_m&gt;()</code> <code>FooAction&lt;t1, ..., t_m&gt;</code> <code>ACTION_P(Bar, param)</code> <code>Bar(int_value)</code> <code>BarActionP&lt;int&gt;</code> <code>ACTION_TEMPLATE(Bar, HAS_m_TEMPLATE_PARAMS(...), AND_1_VALUE_PARAMS(p1))</code> <code>Bar&lt;t1, ..., t_m&gt;(int_value)</code> <code>BarActionP&lt;t1, ..., t_m, int&gt;</code> <code>ACTION_P2(Baz, p1, p2)</code> <code>Baz(bool_value, int_value)</code> <code>BazActionP2&lt;bool, int&gt;</code> <code>ACTION_TEMPLATE(Baz, HAS_m_TEMPLATE_PARAMS(...), AND_2_VALUE_PARAMS(p1, p2))</code> <code>Baz&lt;t1, ..., t_m&gt;(bool_value, int_value)</code> <code>BazActionP2&lt;t1, ..., t_m, bool, int&gt;</code> ... ... ... <p>Note that we have to pick different suffixes (<code>Action</code>, <code>ActionP</code>, <code>ActionP2</code>, and etc) for actions with different numbers of value parameters, or the action definitions cannot be overloaded on the number of them.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-monomorphic-actions-newmonoactions","title":"Writing New Monomorphic Actions {#NewMonoActions}","text":"<p>While the <code>ACTION*</code> macros are very convenient, sometimes they are inappropriate. For example, despite the tricks shown in the previous recipes, they don't let you directly specify the types of the mock function arguments and the action parameters, which in general leads to unoptimized compiler error messages that can baffle unfamiliar users. They also don't allow overloading actions based on parameter types without jumping through some hoops.</p> <p>An alternative to the <code>ACTION*</code> macros is to implement <code>::testing::ActionInterface&lt;F&gt;</code>, where <code>F</code> is the type of the mock function in which the action will be used. For example:</p> <pre><code>template &lt;typename F&gt;\nclass ActionInterface {\n public:\n  virtual ~ActionInterface();\n\n  // Performs the action.  Result is the return type of function type\n  // F, and ArgumentTuple is the tuple of arguments of F.\n  //\n\n  // For example, if F is int(bool, const string&amp;), then Result would\n  // be int, and ArgumentTuple would be std::tuple&lt;bool, const string&amp;&gt;.\n  virtual Result Perform(const ArgumentTuple&amp; args) = 0;\n};\n</code></pre> <pre><code>using ::testing::_;\nusing ::testing::Action;\nusing ::testing::ActionInterface;\nusing ::testing::MakeAction;\n\ntypedef int IncrementMethod(int*);\n\nclass IncrementArgumentAction : public ActionInterface&lt;IncrementMethod&gt; {\n public:\n  int Perform(const std::tuple&lt;int*&gt;&amp; args) override {\n    int* p = std::get&lt;0&gt;(args);  // Grabs the first argument.\n    return *p++;\n  }\n};\n\nAction&lt;IncrementMethod&gt; IncrementArgument() {\n  return MakeAction(new IncrementArgumentAction);\n}\n\n...\n  EXPECT_CALL(foo, Baz(_))\n      .WillOnce(IncrementArgument());\n\n  int n = 5;\n  foo.Baz(&amp;n);  // Should return 5 and change n to 6.\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#writing-new-polymorphic-actions-newpolyactions","title":"Writing New Polymorphic Actions {#NewPolyActions}","text":"<p>The previous recipe showed you how to define your own action. This is all good, except that you need to know the type of the function in which the action will be used. Sometimes that can be a problem. For example, if you want to use the action in functions with different types (e.g. like <code>Return()</code> and <code>SetArgPointee()</code>).</p> <p>If an action can be used in several types of mock functions, we say it's polymorphic. The <code>MakePolymorphicAction()</code> function template makes it easy to define such an action:</p> <pre><code>namespace testing {\ntemplate &lt;typename Impl&gt;\nPolymorphicAction&lt;Impl&gt; MakePolymorphicAction(const Impl&amp; impl);\n}  // namespace testing\n</code></pre> <p>As an example, let's define an action that returns the second argument in the mock function's argument list. The first step is to define an implementation class:</p> <pre><code>class ReturnSecondArgumentAction {\n public:\n  template &lt;typename Result, typename ArgumentTuple&gt;\n  Result Perform(const ArgumentTuple&amp; args) const {\n    // To get the i-th (0-based) argument, use std::get(args).\n    return std::get&lt;1&gt;(args);\n  }\n};\n</code></pre> <p>This implementation class does not need to inherit from any particular class. What matters is that it must have a <code>Perform()</code> method template. This method template takes the mock function's arguments as a tuple in a single argument, and returns the result of the action. It can be either <code>const</code> or not, but must be invokable with exactly one template argument, which is the result type. In other words, you must be able to call <code>Perform&lt;R&gt;(args)</code> where <code>R</code> is the mock function's return type and <code>args</code> is its arguments in a tuple.</p> <p>Next, we use <code>MakePolymorphicAction()</code> to turn an instance of the implementation class into the polymorphic action we need. It will be convenient to have a wrapper for this:</p> <pre><code>using ::testing::MakePolymorphicAction;\nusing ::testing::PolymorphicAction;\n\nPolymorphicAction&lt;ReturnSecondArgumentAction&gt; ReturnSecondArgument() {\n  return MakePolymorphicAction(ReturnSecondArgumentAction());\n}\n</code></pre> <p>Now, you can use this polymorphic action the same way you use the built-in ones:</p> <pre><code>using ::testing::_;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(int, DoThis, (bool flag, int n), (override));\n  MOCK_METHOD(string, DoThat, (int x, const char* str1, const char* str2),\n              (override));\n};\n\n  ...\n  MockFoo foo;\n  EXPECT_CALL(foo, DoThis).WillOnce(ReturnSecondArgument());\n  EXPECT_CALL(foo, DoThat).WillOnce(ReturnSecondArgument());\n  ...\n  foo.DoThis(true, 5);  // Will return 5.\n  foo.DoThat(1, \"Hi\", \"Bye\");  // Will return \"Hi\".\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#teaching-gmock-how-to-print-your-values","title":"Teaching gMock How to Print Your Values","text":"<p>When an uninteresting or unexpected call occurs, gMock prints the argument values and the stack trace to help you debug. Assertion macros like <code>EXPECT_THAT</code> and <code>EXPECT_EQ</code> also print the values in question when the assertion fails. gMock and googletest do this using googletest's user-extensible value printer.</p> <p>This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the <code>&lt;&lt;</code> operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out. The GoogleTest advanced guide explains how to extend the printer to do a better job at printing your particular type than to dump the bytes.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#useful-mocks-created-using-gmock","title":"Useful Mocks Created Using gMock","text":""},{"location":"build/_deps/googletest-src/docs/gmock_cook_book.html#mock-stdfunction-mockfunction","title":"Mock std::function {#MockFunction}","text":"<p><code>std::function</code> is a general function type introduced in C++11. It is a preferred way of passing callbacks to new interfaces. Functions are copiable, and are not usually passed around by pointer, which makes them tricky to mock. But fear not - <code>MockFunction</code> can help you with that.</p> <p><code>MockFunction&lt;R(T1, ..., Tn)&gt;</code> has a mock method <code>Call()</code> with the signature:</p> <pre><code>  R Call(T1, ..., Tn);\n</code></pre> <p>It also has a <code>AsStdFunction()</code> method, which creates a <code>std::function</code> proxy forwarding to Call:</p> <pre><code>  std::function&lt;R(T1, ..., Tn)&gt; AsStdFunction();\n</code></pre> <p>To use <code>MockFunction</code>, first create <code>MockFunction</code> object and set up expectations on its <code>Call</code> method. Then pass proxy obtained from <code>AsStdFunction()</code> to the code you are testing. For example:</p> <pre><code>TEST(FooTest, RunsCallbackWithBarArgument) {\n  // 1. Create a mock object.\n  MockFunction&lt;int(string)&gt; mock_function;\n\n  // 2. Set expectations on Call() method.\n  EXPECT_CALL(mock_function, Call(\"bar\")).WillOnce(Return(1));\n\n  // 3. Exercise code that uses std::function.\n  Foo(mock_function.AsStdFunction());\n  // Foo's signature can be either of:\n  // void Foo(const std::function&lt;int(string)&gt;&amp; fun);\n  // void Foo(std::function&lt;int(string)&gt; fun);\n\n  // 4. All expectations will be verified when mock_function\n  //     goes out of scope and is destroyed.\n}\n</code></pre> <p>Remember that function objects created with <code>AsStdFunction()</code> are just forwarders. If you create multiple of them, they will share the same set of expectations.</p> <p>Although <code>std::function</code> supports unlimited number of arguments, <code>MockFunction</code> implementation is limited to ten. If you ever hit that limit... well, your callback has bigger problems than being mockable. :-)</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html","title":"Legacy gMock FAQ","text":""},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#when-i-call-a-method-on-my-mock-object-the-method-for-the-real-object-is-invoked-instead-whats-the-problem","title":"When I call a method on my mock object, the method for the real object is invoked instead. What's the problem?","text":"<p>In order for a method to be mocked, it must be virtual, unless you use the high-perf dependency injection technique.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#can-i-mock-a-variadic-function","title":"Can I mock a variadic function?","text":"<p>You cannot mock a variadic function (i.e. a function taking ellipsis (<code>...</code>) arguments) directly in gMock.</p> <p>The problem is that in general, there is no way for a mock object to know how many arguments are passed to the variadic method, and what the arguments' types are. Only the author of the base class knows the protocol, and we cannot look into his or her head.</p> <p>Therefore, to mock such a function, the user must teach the mock object how to figure out the number of arguments and their types. One way to do it is to provide overloaded versions of the function.</p> <p>Ellipsis arguments are inherited from C and not really a C++ feature. They are unsafe to use and don't work with arguments that have constructors or destructors. Therefore we recommend to avoid them in C++ as much as possible.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#msvc-gives-me-warning-c4301-or-c4373-when-i-define-a-mock-method-with-a-const-parameter-why","title":"MSVC gives me warning C4301 or C4373 when I define a mock method with a const parameter. Why?","text":"<p>If you compile this using Microsoft Visual C++ 2005 SP1:</p> <pre><code>class Foo {\n  ...\n  virtual void Bar(const int i) = 0;\n};\n\nclass MockFoo : public Foo {\n  ...\n  MOCK_METHOD(void, Bar, (const int i), (override));\n};\n</code></pre> <p>You may get the following warning:</p> <pre><code>warning C4301: 'MockFoo::Bar': overriding virtual function only differs from 'Foo::Bar' by const/volatile qualifier\n</code></pre> <p>This is a MSVC bug. The same code compiles fine with gcc, for example. If you use Visual C++ 2008 SP1, you would get the warning:</p> <pre><code>warning C4373: 'MockFoo::Bar': virtual function overrides 'Foo::Bar', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers\n</code></pre> <p>In C++, if you declare a function with a <code>const</code> parameter, the <code>const</code> modifier is ignored. Therefore, the <code>Foo</code> base class above is equivalent to:</p> <pre><code>class Foo {\n  ...\n  virtual void Bar(int i) = 0;  // int or const int?  Makes no difference.\n};\n</code></pre> <p>In fact, you can declare <code>Bar()</code> with an <code>int</code> parameter, and define it with a <code>const int</code> parameter. The compiler will still match them up.</p> <p>Since making a parameter <code>const</code> is meaningless in the method declaration, we recommend to remove it in both <code>Foo</code> and <code>MockFoo</code>. That should workaround the VC bug.</p> <p>Note that we are talking about the top-level <code>const</code> modifier here. If the function parameter is passed by pointer or reference, declaring the pointee or referee as <code>const</code> is still meaningful. For example, the following two declarations are not equivalent:</p> <pre><code>void Bar(int* p);         // Neither p nor *p is const.\nvoid Bar(const int* p);  // p is not const, but *p is.\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#i-cant-figure-out-why-gmock-thinks-my-expectations-are-not-satisfied-what-should-i-do","title":"I can't figure out why gMock thinks my expectations are not satisfied. What should I do?","text":"<p>You might want to run your test with <code>--gmock_verbose=info</code>. This flag lets gMock print a trace of every mock function call it receives. By studying the trace, you'll gain insights on why the expectations you set are not met.</p> <p>If you see the message \"The mock function has no default action set, and its return type has no default value set.\", then try adding a default action. Due to a known issue, unexpected calls on mocks without default actions don't print out a detailed comparison between the actual arguments and the expected arguments.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#my-program-crashed-and-scopedmocklog-spit-out-tons-of-messages-is-it-a-gmock-bug","title":"My program crashed and <code>ScopedMockLog</code> spit out tons of messages. Is it a gMock bug?","text":"<p>gMock and <code>ScopedMockLog</code> are likely doing the right thing here.</p> <p>When a test crashes, the failure signal handler will try to log a lot of information (the stack trace, and the address map, for example). The messages are compounded if you have many threads with depth stacks. When <code>ScopedMockLog</code> intercepts these messages and finds that they don't match any expectations, it prints an error for each of them.</p> <p>You can learn to ignore the errors, or you can rewrite your expectations to make your test more robust, for example, by adding something like:</p> <pre><code>using ::testing::AnyNumber;\nusing ::testing::Not;\n...\n  // Ignores any log not done by us.\n  EXPECT_CALL(log, Log(_, Not(EndsWith(\"/my_file.cc\")), _))\n      .Times(AnyNumber());\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#how-can-i-assert-that-a-function-is-never-called","title":"How can I assert that a function is NEVER called?","text":"<pre><code>using ::testing::_;\n...\n  EXPECT_CALL(foo, Bar(_))\n      .Times(0);\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#i-have-a-failed-test-where-gmock-tells-me-twice-that-a-particular-expectation-is-not-satisfied-isnt-this-redundant","title":"I have a failed test where gMock tells me TWICE that a particular expectation is not satisfied. Isn't this redundant?","text":"<p>When gMock detects a failure, it prints relevant information (the mock function arguments, the state of relevant expectations, and etc) to help the user debug. If another failure is detected, gMock will do the same, including printing the state of relevant expectations.</p> <p>Sometimes an expectation's state didn't change between two failures, and you'll see the same description of the state twice. They are however not redundant, as they refer to different points in time. The fact they are the same is interesting information.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#i-get-a-heapcheck-failure-when-using-a-mock-object-but-using-a-real-object-is-fine-what-can-be-wrong","title":"I get a heapcheck failure when using a mock object, but using a real object is fine. What can be wrong?","text":"<p>Does the class (hopefully a pure interface) you are mocking have a virtual destructor?</p> <p>Whenever you derive from a base class, make sure its destructor is virtual. Otherwise Bad Things will happen. Consider the following code:</p> <pre><code>class Base {\n public:\n  // Not virtual, but should be.\n  ~Base() { ... }\n  ...\n};\n\nclass Derived : public Base {\n public:\n  ...\n private:\n  std::string value_;\n};\n\n...\n  Base* p = new Derived;\n  ...\n  delete p;  // Surprise! ~Base() will be called, but ~Derived() will not\n                 // - value_ is leaked.\n</code></pre> <p>By changing <code>~Base()</code> to virtual, <code>~Derived()</code> will be correctly called when <code>delete p</code> is executed, and the heap checker will be happy.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#the-newer-expectations-override-older-ones-rule-makes-writing-expectations-awkward-why-does-gmock-do-that","title":"The \"newer expectations override older ones\" rule makes writing expectations awkward. Why does gMock do that?","text":"<p>When people complain about this, often they are referring to code like:</p> <pre><code>using ::testing::Return;\n...\n  // foo.Bar() should be called twice, return 1 the first time, and return\n  // 2 the second time.  However, I have to write the expectations in the\n  // reverse order.  This sucks big time!!!\n  EXPECT_CALL(foo, Bar())\n      .WillOnce(Return(2))\n      .RetiresOnSaturation();\n  EXPECT_CALL(foo, Bar())\n      .WillOnce(Return(1))\n      .RetiresOnSaturation();\n</code></pre> <p>The problem, is that they didn't pick the best way to express the test's intent.</p> <p>By default, expectations don't have to be matched in any particular order. If you want them to match in a certain order, you need to be explicit. This is gMock's (and jMock's) fundamental philosophy: it's easy to accidentally over-specify your tests, and we want to make it harder to do so.</p> <p>There are two better ways to write the test spec. You could either put the expectations in sequence:</p> <pre><code>using ::testing::Return;\n...\n  // foo.Bar() should be called twice, return 1 the first time, and return\n  // 2 the second time.  Using a sequence, we can write the expectations\n  // in their natural order.\n  {\n    InSequence s;\n    EXPECT_CALL(foo, Bar())\n        .WillOnce(Return(1))\n        .RetiresOnSaturation();\n    EXPECT_CALL(foo, Bar())\n        .WillOnce(Return(2))\n        .RetiresOnSaturation();\n  }\n</code></pre> <p>or you can put the sequence of actions in the same expectation:</p> <pre><code>using ::testing::Return;\n...\n  // foo.Bar() should be called twice, return 1 the first time, and return\n  // 2 the second time.\n  EXPECT_CALL(foo, Bar())\n      .WillOnce(Return(1))\n      .WillOnce(Return(2))\n      .RetiresOnSaturation();\n</code></pre> <p>Back to the original questions: why does gMock search the expectations (and <code>ON_CALL</code>s) from back to front? Because this allows a user to set up a mock's behavior for the common case early (e.g. in the mock's constructor or the test fixture's set-up phase) and customize it with more specific rules later. If gMock searches from front to back, this very useful pattern won't be possible.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#gmock-prints-a-warning-when-a-function-without-expect_call-is-called-even-if-i-have-set-its-behavior-using-on_call-would-it-be-reasonable-not-to-show-the-warning-in-this-case","title":"gMock prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL. Would it be reasonable not to show the warning in this case?","text":"<p>When choosing between being neat and being safe, we lean toward the latter. So the answer is that we think it's better to show the warning.</p> <p>Often people write <code>ON_CALL</code>s in the mock object's constructor or <code>SetUp()</code>, as the default behavior rarely changes from test to test. Then in the test body they set the expectations, which are often different for each test. Having an <code>ON_CALL</code> in the set-up part of a test doesn't mean that the calls are expected. If there's no <code>EXPECT_CALL</code> and the method is called, it's possibly an error. If we quietly let the call go through without notifying the user, bugs may creep in unnoticed.</p> <p>If, however, you are sure that the calls are OK, you can write</p> <pre><code>using ::testing::_;\n...\n  EXPECT_CALL(foo, Bar(_))\n      .WillRepeatedly(...);\n</code></pre> <p>instead of</p> <pre><code>using ::testing::_;\n...\n  ON_CALL(foo, Bar(_))\n      .WillByDefault(...);\n</code></pre> <p>This tells gMock that you do expect the calls and no warning should be printed.</p> <p>Also, you can control the verbosity by specifying <code>--gmock_verbose=error</code>. Other values are <code>info</code> and <code>warning</code>. If you find the output too noisy when debugging, just choose a less verbose level.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#how-can-i-delete-the-mock-functions-argument-in-an-action","title":"How can I delete the mock function's argument in an action?","text":"<p>If your mock function takes a pointer argument and you want to delete that argument, you can use testing::DeleteArg() to delete the N'th (zero-indexed) argument: <pre><code>using ::testing::_;\n  ...\n  MOCK_METHOD(void, Bar, (X* x, const Y&amp; y));\n  ...\n  EXPECT_CALL(mock_foo_, Bar(_, _))\n      .WillOnce(testing::DeleteArg&lt;0&gt;()));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#how-can-i-perform-an-arbitrary-action-on-a-mock-functions-argument","title":"How can I perform an arbitrary action on a mock function's argument?","text":"<p>If you find yourself needing to perform some action that's not supported by gMock directly, remember that you can define your own actions using <code>MakeAction()</code> or <code>MakePolymorphicAction()</code>, or you can write a stub function and invoke it using <code>Invoke()</code>.</p> <pre><code>using ::testing::_;\nusing ::testing::Invoke;\n  ...\n  MOCK_METHOD(void, Bar, (X* p));\n  ...\n  EXPECT_CALL(mock_foo_, Bar(_))\n      .WillOnce(Invoke(MyAction(...)));\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#my-code-calls-a-staticglobal-function-can-i-mock-it","title":"My code calls a static/global function. Can I mock it?","text":"<p>You can, but you need to make some changes.</p> <p>In general, if you find yourself needing to mock a static function, it's a sign that your modules are too tightly coupled (and less flexible, less reusable, less testable, etc). You are probably better off defining a small interface and call the function through that interface, which then can be easily mocked. It's a bit of work initially, but usually pays for itself quickly.</p> <p>This Google Testing Blog post says it excellently. Check it out.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#my-mock-object-needs-to-do-complex-stuff-its-a-lot-of-pain-to-specify-the-actions-gmock-sucks","title":"My mock object needs to do complex stuff. It's a lot of pain to specify the actions. gMock sucks!","text":"<p>I know it's not a question, but you get an answer for free any way. :-)</p> <p>With gMock, you can create mocks in C++ easily. And people might be tempted to use them everywhere. Sometimes they work great, and sometimes you may find them, well, a pain to use. So, what's wrong in the latter case?</p> <p>When you write a test without using mocks, you exercise the code and assert that it returns the correct value or that the system is in an expected state. This is sometimes called \"state-based testing\".</p> <p>Mocks are great for what some call \"interaction-based\" testing: instead of checking the system state at the very end, mock objects verify that they are invoked the right way and report an error as soon as it arises, giving you a handle on the precise context in which the error was triggered. This is often more effective and economical to do than state-based testing.</p> <p>If you are doing state-based testing and using a test double just to simulate the real object, you are probably better off using a fake. Using a mock in this case causes pain, as it's not a strong point for mocks to perform complex actions. If you experience this and think that mocks suck, you are just not using the right tool for your problem. Or, you might be trying to solve the wrong problem. :-)</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#i-got-a-warning-uninteresting-function-call-encountered-default-action-taken-should-i-panic","title":"I got a warning \"Uninteresting function call encountered - default action taken..\" Should I panic?","text":"<p>By all means, NO! It's just an FYI. :-)</p> <p>What it means is that you have a mock function, you haven't set any expectations on it (by gMock's rule this means that you are not interested in calls to this function and therefore it can be called any number of times), and it is called. That's OK - you didn't say it's not OK to call the function!</p> <p>What if you actually meant to disallow this function to be called, but forgot to write <code>EXPECT_CALL(foo, Bar()).Times(0)</code>? While one can argue that it's the user's fault, gMock tries to be nice and prints you a note.</p> <p>So, when you see the message and believe that there shouldn't be any uninteresting calls, you should investigate what's going on. To make your life easier, gMock dumps the stack trace when an uninteresting call is encountered. From that you can figure out which mock function it is, and how it is called.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#i-want-to-define-a-custom-action-should-i-use-invoke-or-implement-the-actioninterface-interface","title":"I want to define a custom action. Should I use Invoke() or implement the ActionInterface interface?","text":"<p>Either way is fine - you want to choose the one that's more convenient for your circumstance.</p> <p>Usually, if your action is for a particular function type, defining it using <code>Invoke()</code> should be easier; if your action can be used in functions of different types (e.g. if you are defining <code>Return(*value*)</code>), <code>MakePolymorphicAction()</code> is easiest. Sometimes you want precise control on what types of functions the action can be used in, and implementing <code>ActionInterface</code> is the way to go here. See the implementation of <code>Return()</code> in <code>testing/base/public/gmock-actions.h</code> for an example.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#i-use-setargpointee-in-willonce-but-gcc-complains-about-conflicting-return-type-specified-what-does-it-mean","title":"I use SetArgPointee() in WillOnce(), but gcc complains about \"conflicting return type specified\". What does it mean?","text":"<p>You got this error as gMock has no idea what value it should return when the mock method is called. <code>SetArgPointee()</code> says what the side effect is, but doesn't say what the return value should be. You need <code>DoAll()</code> to chain a <code>SetArgPointee()</code> with a <code>Return()</code> that provides a value appropriate to the API being mocked.</p> <p>See this recipe for more details and an example.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_faq.html#i-have-a-huge-mock-class-and-microsoft-visual-c-runs-out-of-memory-when-compiling-it-what-can-i-do","title":"I have a huge mock class, and Microsoft Visual C++ runs out of memory when compiling it. What can I do?","text":"<p>We've noticed that when the <code>/clr</code> compiler flag is used, Visual C++ uses 5~6 times as much memory when compiling a mock class. We suggest to avoid <code>/clr</code> when compiling native C++ mocks.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html","title":"gMock for Dummies","text":""},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#what-is-gmock","title":"What Is gMock?","text":"<p>When you write a prototype or test, often it's not feasible or wise to rely on real objects entirely. A mock object implements the same interface as a real object (so it can be used as one), but lets you specify at run time how it will be used and what it should do (which methods will be called? in which order? how many times? with what arguments? what will they return? etc).</p> <p>It is easy to confuse the term fake objects with mock objects. Fakes and mocks actually mean very different things in the Test-Driven Development (TDD) community:</p> <ul> <li>Fake objects have working implementations, but usually take some     shortcut (perhaps to make the operations less expensive), which makes them     not suitable for production. An in-memory file system would be an example of     a fake.</li> <li>Mocks are objects pre-programmed with expectations, which form a     specification of the calls they are expected to receive.</li> </ul> <p>If all this seems too abstract for you, don't worry - the most important thing to remember is that a mock allows you to check the interaction between itself and code that uses it. The difference between fakes and mocks shall become much clearer once you start to use mocks.</p> <p>gMock is a library (sometimes we also call it a \"framework\" to make it sound cool) for creating mock classes and using them. It does to C++ what jMock/EasyMock does to Java (well, more or less).</p> <p>When using gMock,</p> <ol> <li>first, you use some simple macros to describe the interface you want to     mock, and they will expand to the implementation of your mock class;</li> <li>next, you create some mock objects and specify its expectations and behavior     using an intuitive syntax;</li> <li>then you exercise code that uses the mock objects. gMock will catch any     violation to the expectations as soon as it arises.</li> </ol>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#why-gmock","title":"Why gMock?","text":"<p>While mock objects help you remove unnecessary dependencies in tests and make them fast and reliable, using mocks manually in C++ is hard:</p> <ul> <li>Someone has to implement the mocks. The job is usually tedious and     error-prone. No wonder people go great distance to avoid it.</li> <li>The quality of those manually written mocks is a bit, uh, unpredictable. You     may see some really polished ones, but you may also see some that were     hacked up in a hurry and have all sorts of ad hoc restrictions.</li> <li>The knowledge you gained from using one mock doesn't transfer to the next     one.</li> </ul> <p>In contrast, Java and Python programmers have some fine mock frameworks (jMock, EasyMock, etc), which automate the creation of mocks. As a result, mocking is a proven effective technique and widely adopted practice in those communities. Having the right tool absolutely makes the difference.</p> <p>gMock was built to help C++ programmers. It was inspired by jMock and EasyMock, but designed with C++'s specifics in mind. It is your friend if any of the following problems is bothering you:</p> <ul> <li>You are stuck with a sub-optimal design and wish you had done more     prototyping before it was too late, but prototyping in C++ is by no means     \"rapid\".</li> <li>Your tests are slow as they depend on too many libraries or use expensive     resources (e.g. a database).</li> <li>Your tests are brittle as some resources they use are unreliable (e.g. the     network).</li> <li>You want to test how your code handles a failure (e.g. a file checksum     error), but it's not easy to cause one.</li> <li>You need to make sure that your module interacts with other modules in the     right way, but it's hard to observe the interaction; therefore you resort to     observing the side effects at the end of the action, but it's awkward at     best.</li> <li>You want to \"mock out\" your dependencies, except that they don't have mock     implementations yet; and, frankly, you aren't thrilled by some of those     hand-written mocks.</li> </ul> <p>We encourage you to use gMock as</p> <ul> <li>a design tool, for it lets you experiment with your interface design early     and often. More iterations lead to better designs!</li> <li>a testing tool to cut your tests' outbound dependencies and probe the     interaction between your module and its collaborators.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#getting-started","title":"Getting Started","text":"<p>gMock is bundled with googletest.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#a-case-for-mock-turtles","title":"A Case for Mock Turtles","text":"<p>Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the system API directly, wrap the API in an interface (say, <code>Turtle</code>) and code to that interface:</p> <pre><code>class Turtle {\n  ...\n  virtual ~Turtle() {}\n  virtual void PenUp() = 0;\n  virtual void PenDown() = 0;\n  virtual void Forward(int distance) = 0;\n  virtual void Turn(int degrees) = 0;\n  virtual void GoTo(int x, int y) = 0;\n  virtual int GetX() const = 0;\n  virtual int GetY() const = 0;\n};\n</code></pre> <p>(Note that the destructor of <code>Turtle</code> must be virtual, as is the case for all classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you'll get corrupted program states like memory leaks.)</p> <p>You can control whether the turtle's movement will leave a trace using <code>PenUp()</code> and <code>PenDown()</code>, and control its movement using <code>Forward()</code>, <code>Turn()</code>, and <code>GoTo()</code>. Finally, <code>GetX()</code> and <code>GetY()</code> tell you the current position of the turtle.</p> <p>Your program will normally use a real implementation of this interface. In tests, you can use a mock implementation instead. This allows you to easily check what drawing primitives your program is calling, with what arguments, and in which order. Tests written this way are much more robust (they won't break because your new machine does anti-aliasing differently), easier to read and maintain (the intent of a test is expressed in the code, not in some binary images), and run much, much faster.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#writing-the-mock-class","title":"Writing the Mock Class","text":"<p>If you are lucky, the mocks you need to use have already been implemented by some nice people. If, however, you find yourself in the position to write a mock class, relax - gMock turns this task into a fun game! (Well, almost.)</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#how-to-define-it","title":"How to Define It","text":"<p>Using the <code>Turtle</code> interface as example, here are the simple steps you need to follow:</p> <ul> <li>Derive a class <code>MockTurtle</code> from <code>Turtle</code>.</li> <li>Take a virtual function of <code>Turtle</code> (while it's possible to     mock non-virtual methods using templates,     it's much more involved).</li> <li>In the <code>public:</code> section of the child class, write <code>MOCK_METHOD();</code></li> <li>Now comes the fun part: you take the function signature, cut-and-paste it     into the macro, and add two commas - one between the return type and the     name, another between the name and the argument list.</li> <li>If you're mocking a const method, add a 4th parameter containing <code>(const)</code>     (the parentheses are required).</li> <li>Since you're overriding a virtual method, we suggest adding the <code>override</code>     keyword. For const methods the 4th parameter becomes <code>(const, override)</code>,     for non-const methods just <code>(override)</code>. This isn't mandatory.</li> <li>Repeat until all virtual functions you want to mock are done. (It goes     without saying that all pure virtual methods in your abstract class must     be either mocked or overridden.)</li> </ul> <p>After the process, you should have something like:</p> <pre><code>#include \"gmock/gmock.h\"  // Brings in gMock.\n\nclass MockTurtle : public Turtle {\n public:\n  ...\n  MOCK_METHOD(void, PenUp, (), (override));\n  MOCK_METHOD(void, PenDown, (), (override));\n  MOCK_METHOD(void, Forward, (int distance), (override));\n  MOCK_METHOD(void, Turn, (int degrees), (override));\n  MOCK_METHOD(void, GoTo, (int x, int y), (override));\n  MOCK_METHOD(int, GetX, (), (const, override));\n  MOCK_METHOD(int, GetY, (), (const, override));\n};\n</code></pre> <p>You don't need to define these mock methods somewhere else - the <code>MOCK_METHOD</code> macro will generate the definitions for you. It's that simple!</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#where-to-put-it","title":"Where to Put It","text":"<p>When you define a mock class, you need to decide where to put its definition. Some people put it in a <code>_test.cc</code>. This is fine when the interface being mocked (say, <code>Foo</code>) is owned by the same person or team. Otherwise, when the owner of <code>Foo</code> changes it, your test could break. (You can't really expect <code>Foo</code>'s maintainer to fix every test that uses <code>Foo</code>, can you?)</p> <p>So, the rule of thumb is: if you need to mock <code>Foo</code> and it's owned by others, define the mock class in <code>Foo</code>'s package (better, in a <code>testing</code> sub-package such that you can clearly separate production code and testing utilities), put it in a <code>.h</code> and a <code>cc_library</code>. Then everyone can reference them from their tests. If <code>Foo</code> ever changes, there is only one copy of <code>MockFoo</code> to change, and only tests that depend on the changed methods need to be fixed.</p> <p>Another way to do it: you can introduce a thin layer <code>FooAdaptor</code> on top of <code>Foo</code> and code to this new interface. Since you own <code>FooAdaptor</code>, you can absorb changes in <code>Foo</code> much more easily. While this is more work initially, carefully choosing the adaptor interface can make your code easier to write and more readable (a net win in the long run), as you can choose <code>FooAdaptor</code> to fit your specific domain much better than <code>Foo</code> does.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#using-mocks-in-tests","title":"Using Mocks in Tests","text":"<p>Once you have a mock class, using it is easy. The typical work flow is:</p> <ol> <li>Import the gMock names from the <code>testing</code> namespace such that you can use     them unqualified (You only have to do it once per file). Remember that     namespaces are a good idea.</li> <li>Create some mock objects.</li> <li>Specify your expectations on them (How many times will a method be called?     With what arguments? What should it do? etc.).</li> <li>Exercise some code that uses the mocks; optionally, check the result using     googletest assertions. If a mock method is called more than expected or with     wrong arguments, you'll get an error immediately.</li> <li>When a mock is destructed, gMock will automatically check whether all     expectations on it have been satisfied.</li> </ol> <p>Here's an example:</p> <pre><code>#include \"path/to/mock-turtle.h\"\n#include \"gmock/gmock.h\"\n#include \"gtest/gtest.h\"\n\nusing ::testing::AtLeast;                         // #1\n\nTEST(PainterTest, CanDrawSomething) {\n  MockTurtle turtle;                              // #2\n  EXPECT_CALL(turtle, PenDown())                  // #3\n      .Times(AtLeast(1));\n\n  Painter painter(&amp;turtle);                       // #4\n\n  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));      // #5\n}\n</code></pre> <p>As you might have guessed, this test checks that <code>PenDown()</code> is called at least once. If the <code>painter</code> object didn't call this method, your test will fail with a message like this:</p> <pre><code>path/to/my_test.cc:119: Failure\nActual function call count doesn't match this expectation:\nActually: never called;\nExpected: called at least once.\nStack trace:\n...\n</code></pre> <p>Tip 1: If you run the test from an Emacs captured_cout, you can hit <code>&lt;Enter&gt;</code> on the line number to jump right to the failed expectation.</p> <p>Tip 2: If your mock objects are never deleted, the final verification won't happen. Therefore it's a good idea to turn on the heap checker in your tests when you allocate mocks on the heap. You get that automatically if you use the <code>gtest_main</code> library already.</p> <p>Important note: gMock requires expectations to be set before the mock functions are called, otherwise the behavior is undefined. Do not alternate between calls to <code>EXPECT_CALL()</code> and calls to the mock functions, and do not set any expectations on a mock after passing the mock to an API.</p> <p>This means <code>EXPECT_CALL()</code> should be read as expecting that a call will occur in the future, not that a call has occurred. Why does gMock work like that? Well, specifying the expectation beforehand allows gMock to report a violation as soon as it rises, when the context (stack trace, etc) is still available. This makes debugging much easier.</p> <p>Admittedly, this test is contrived and doesn't do much. You can easily achieve the same effect without using gMock. However, as we shall reveal soon, gMock allows you to do so much more with the mocks.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#setting-expectations","title":"Setting Expectations","text":"<p>The key to using a mock object successfully is to set the right expectations on it. If you set the expectations too strict, your test will fail as the result of unrelated changes. If you set them too loose, bugs can slip through. You want to do it just right such that your test can catch exactly the kind of bugs you intend it to catch. gMock provides the necessary means for you to do it \"just right.\"</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#general-syntax","title":"General Syntax","text":"<p>In gMock we use the <code>EXPECT_CALL()</code> macro to set an expectation on a mock method. The general syntax is:</p> <pre><code>EXPECT_CALL(mock_object, method(matchers))\n    .Times(cardinality)\n    .WillOnce(action)\n    .WillRepeatedly(action);\n</code></pre> <p>The macro has two arguments: first the mock object, and then the method and its arguments. Note that the two are separated by a comma (<code>,</code>), not a period (<code>.</code>). (Why using a comma? The answer is that it was necessary for technical reasons.) If the method is not overloaded, the macro can also be called without matchers:</p> <pre><code>EXPECT_CALL(mock_object, non-overloaded-method)\n    .Times(cardinality)\n    .WillOnce(action)\n    .WillRepeatedly(action);\n</code></pre> <p>This syntax allows the test writer to specify \"called with any arguments\" without explicitly specifying the number or types of arguments. To avoid unintended ambiguity, this syntax may only be used for methods that are not overloaded.</p> <p>Either form of the macro can be followed by some optional clauses that provide more information about the expectation. We'll discuss how each clause works in the coming sections.</p> <p>This syntax is designed to make an expectation read like English. For example, you can probably guess that</p> <pre><code>using ::testing::Return;\n...\nEXPECT_CALL(turtle, GetX())\n    .Times(5)\n    .WillOnce(Return(100))\n    .WillOnce(Return(150))\n    .WillRepeatedly(Return(200));\n</code></pre> <p>says that the <code>turtle</code> object's <code>GetX()</code> method will be called five times, it will return 100 the first time, 150 the second time, and then 200 every time. Some people like to call this style of syntax a Domain-Specific Language (DSL).</p> <p>{: .callout .note} Note: Why do we use a macro to do this? Well it serves two purposes: first it makes expectations easily identifiable (either by <code>grep</code> or by a human reader), and second it allows gMock to include the source file location of a failed expectation in messages, making debugging easier.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#matchers-what-arguments-do-we-expect","title":"Matchers: What Arguments Do We Expect?","text":"<p>When a mock function takes arguments, we may specify what arguments we are expecting, for example:</p> <pre><code>// Expects the turtle to move forward by 100 units.\nEXPECT_CALL(turtle, Forward(100));\n</code></pre> <p>Oftentimes you do not want to be too specific. Remember that talk about tests being too rigid? Over specification leads to brittle tests and obscures the intent of tests. Therefore we encourage you to specify only what's necessary\u2014no more, no less. If you aren't interested in the value of an argument, write <code>_</code> as the argument, which means \"anything goes\":</p> <pre><code>using ::testing::_;\n...\n// Expects that the turtle jumps to somewhere on the x=50 line.\nEXPECT_CALL(turtle, GoTo(50, _));\n</code></pre> <p><code>_</code> is an instance of what we call matchers. A matcher is like a predicate and can test whether an argument is what we'd expect. You can use a matcher inside <code>EXPECT_CALL()</code> wherever a function argument is expected. <code>_</code> is a convenient way of saying \"any value\".</p> <p>In the above examples, <code>100</code> and <code>50</code> are also matchers; implicitly, they are the same as <code>Eq(100)</code> and <code>Eq(50)</code>, which specify that the argument must be equal (using <code>operator==</code>) to the matcher argument. There are many built-in matchers for common types (as well as custom matchers); for example:</p> <pre><code>using ::testing::Ge;\n...\n// Expects the turtle moves forward by at least 100.\nEXPECT_CALL(turtle, Forward(Ge(100)));\n</code></pre> <p>If you don't care about any arguments, rather than specify <code>_</code> for each of them you may instead omit the parameter list:</p> <pre><code>// Expects the turtle to move forward.\nEXPECT_CALL(turtle, Forward);\n// Expects the turtle to jump somewhere.\nEXPECT_CALL(turtle, GoTo);\n</code></pre> <p>This works for all non-overloaded methods; if a method is overloaded, you need to help gMock resolve which overload is expected by specifying the number of arguments and possibly also the types of the arguments.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#cardinalities-how-many-times-will-it-be-called","title":"Cardinalities: How Many Times Will It Be Called?","text":"<p>The first clause we can specify following an <code>EXPECT_CALL()</code> is <code>Times()</code>. We call its argument a cardinality as it tells how many times the call should occur. It allows us to repeat an expectation many times without actually writing it as many times. More importantly, a cardinality can be \"fuzzy\", just like a matcher can be. This allows a user to express the intent of a test exactly.</p> <p>An interesting special case is when we say <code>Times(0)</code>. You may have guessed - it means that the function shouldn't be called with the given arguments at all, and gMock will report a googletest failure whenever the function is (wrongfully) called.</p> <p>We've seen <code>AtLeast(n)</code> as an example of fuzzy cardinalities earlier. For the list of built-in cardinalities you can use, see here.</p> <p>The <code>Times()</code> clause can be omitted. If you omit <code>Times()</code>, gMock will infer the cardinality for you. The rules are easy to remember:</p> <ul> <li>If neither <code>WillOnce()</code> nor <code>WillRepeatedly()</code> is in the     <code>EXPECT_CALL()</code>, the inferred cardinality is <code>Times(1)</code>.</li> <li>If there are n <code>WillOnce()</code>'s but no <code>WillRepeatedly()</code>, where n &gt;=     1, the cardinality is <code>Times(n)</code>.</li> <li>If there are n <code>WillOnce()</code>'s and one <code>WillRepeatedly()</code>, where n &gt;=     0, the cardinality is <code>Times(AtLeast(n))</code>.</li> </ul> <p>Quick quiz: what do you think will happen if a function is expected to be called twice but actually called four times?</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#actions-what-should-it-do","title":"Actions: What Should It Do?","text":"<p>Remember that a mock object doesn't really have a working implementation? We as users have to tell it what to do when a method is invoked. This is easy in gMock.</p> <p>First, if the return type of a mock function is a built-in type or a pointer, the function has a default action (a <code>void</code> function will just return, a <code>bool</code> function will return <code>false</code>, and other functions will return 0). In addition, in C++ 11 and above, a mock function whose return type is default-constructible (i.e. has a default constructor) has a default action of returning a default-constructed value. If you don't say anything, this behavior will be used.</p> <p>Second, if a mock function doesn't have a default action, or the default action doesn't suit you, you can specify the action to be taken each time the expectation matches using a series of <code>WillOnce()</code> clauses followed by an optional <code>WillRepeatedly()</code>. For example,</p> <pre><code>using ::testing::Return;\n...\nEXPECT_CALL(turtle, GetX())\n     .WillOnce(Return(100))\n     .WillOnce(Return(200))\n     .WillOnce(Return(300));\n</code></pre> <p>says that <code>turtle.GetX()</code> will be called exactly three times (gMock inferred this from how many <code>WillOnce()</code> clauses we've written, since we didn't explicitly write <code>Times()</code>), and will return 100, 200, and 300 respectively.</p> <pre><code>using ::testing::Return;\n...\nEXPECT_CALL(turtle, GetY())\n     .WillOnce(Return(100))\n     .WillOnce(Return(200))\n     .WillRepeatedly(Return(300));\n</code></pre> <p>says that <code>turtle.GetY()</code> will be called at least twice (gMock knows this as we've written two <code>WillOnce()</code> clauses and a <code>WillRepeatedly()</code> while having no explicit <code>Times()</code>), will return 100 and 200 respectively the first two times, and 300 from the third time on.</p> <p>Of course, if you explicitly write a <code>Times()</code>, gMock will not try to infer the cardinality itself. What if the number you specified is larger than there are <code>WillOnce()</code> clauses? Well, after all <code>WillOnce()</code>s are used up, gMock will do the default action for the function every time (unless, of course, you have a <code>WillRepeatedly()</code>.).</p> <p>What can we do inside <code>WillOnce()</code> besides <code>Return()</code>? You can return a reference using <code>ReturnRef(*variable*)</code>, or invoke a pre-defined function, among others.</p> <p>Important note: The <code>EXPECT_CALL()</code> statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:</p> <pre><code>using ::testing::Return;\n...\nint n = 100;\nEXPECT_CALL(turtle, GetX())\n    .Times(4)\n    .WillRepeatedly(Return(n++));\n</code></pre> <p>Instead of returning 100, 101, 102, ..., consecutively, this mock function will always return 100 as <code>n++</code> is only evaluated once. Similarly, <code>Return(new Foo)</code> will create a new <code>Foo</code> object when the <code>EXPECT_CALL()</code> is executed, and will return the same pointer every time. If you want the side effect to happen every time, you need to define a custom action, which we'll teach in the cook book.</p> <p>Time for another quiz! What do you think the following means?</p> <pre><code>using ::testing::Return;\n...\nEXPECT_CALL(turtle, GetY())\n    .Times(4)\n    .WillOnce(Return(100));\n</code></pre> <p>Obviously <code>turtle.GetY()</code> is expected to be called four times. But if you think it will return 100 every time, think twice! Remember that one <code>WillOnce()</code> clause will be consumed each time the function is invoked and the default action will be taken afterwards. So the right answer is that <code>turtle.GetY()</code> will return 100 the first time, but return 0 from the second time on, as returning 0 is the default action for <code>int</code> functions.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#using-multiple-expectations-multiexpectations","title":"Using Multiple Expectations {#MultiExpectations}","text":"<p>So far we've only shown examples where you have a single expectation. More realistically, you'll specify expectations on multiple mock methods which may be from multiple mock objects.</p> <p>By default, when a mock method is invoked, gMock will search the expectations in the reverse order they are defined, and stop when an active expectation that matches the arguments is found (you can think of it as \"newer rules override older ones.\"). If the matching expectation cannot take any more calls, you will get an upper-bound-violated failure. Here's an example:</p> <pre><code>using ::testing::_;\n...\nEXPECT_CALL(turtle, Forward(_));  // #1\nEXPECT_CALL(turtle, Forward(10))  // #2\n    .Times(2);\n</code></pre> <p>If <code>Forward(10)</code> is called three times in a row, the third time it will be an error, as the last matching expectation (#2) has been saturated. If, however, the third <code>Forward(10)</code> call is replaced by <code>Forward(20)</code>, then it would be OK, as now #1 will be the matching expectation.</p> <p>{: .callout .note} Note: Why does gMock search for a match in the reverse order of the expectations? The reason is that this allows a user to set up the default expectations in a mock object's constructor or the test fixture's set-up phase and then customize the mock by writing more specific expectations in the test body. So, if you have two expectations on the same method, you want to put the one with more specific matchers after the other, or the more specific rule would be shadowed by the more general one that comes after it.</p> <p>{: .callout .tip} Tip: It is very common to start with a catch-all expectation for a method and <code>Times(AnyNumber())</code> (omitting arguments, or with <code>_</code> for all arguments, if overloaded). This makes any calls to the method expected. This is not necessary for methods that are not mentioned at all (these are \"uninteresting\"), but is useful for methods that have some expectations, but for which other calls are ok. See Understanding Uninteresting vs Unexpected Calls.</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#ordered-vs-unordered-calls-orderedcalls","title":"Ordered vs Unordered Calls {#OrderedCalls}","text":"<p>By default, an expectation can match a call even though an earlier expectation hasn't been satisfied. In other words, the calls don't have to occur in the order the expectations are specified.</p> <p>Sometimes, you may want all the expected calls to occur in a strict order. To say this in gMock is easy:</p> <pre><code>using ::testing::InSequence;\n...\nTEST(FooTest, DrawsLineSegment) {\n  ...\n  {\n    InSequence seq;\n\n    EXPECT_CALL(turtle, PenDown());\n    EXPECT_CALL(turtle, Forward(100));\n    EXPECT_CALL(turtle, PenUp());\n  }\n  Foo();\n}\n</code></pre> <p>By creating an object of type <code>InSequence</code>, all expectations in its scope are put into a sequence and have to occur sequentially. Since we are just relying on the constructor and destructor of this object to do the actual work, its name is really irrelevant.</p> <p>In this example, we test that <code>Foo()</code> calls the three expected functions in the order as written. If a call is made out-of-order, it will be an error.</p> <p>(What if you care about the relative order of some of the calls, but not all of them? Can you specify an arbitrary partial order? The answer is ... yes! The details can be found here.)</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#all-expectations-are-sticky-unless-said-otherwise-stickyexpectations","title":"All Expectations Are Sticky (Unless Said Otherwise) {#StickyExpectations}","text":"<p>Now let's do a quick quiz to see how well you can use this mock stuff already. How would you test that the turtle is asked to go to the origin exactly twice (you want to ignore any other instructions it receives)?</p> <p>After you've come up with your answer, take a look at ours and compare notes (solve it yourself first - don't cheat!):</p> <pre><code>using ::testing::_;\nusing ::testing::AnyNumber;\n...\nEXPECT_CALL(turtle, GoTo(_, _))  // #1\n     .Times(AnyNumber());\nEXPECT_CALL(turtle, GoTo(0, 0))  // #2\n     .Times(2);\n</code></pre> <p>Suppose <code>turtle.GoTo(0, 0)</code> is called three times. In the third time, gMock will see that the arguments match expectation #2 (remember that we always pick the last matching expectation). Now, since we said that there should be only two such calls, gMock will report an error immediately. This is basically what we've told you in the Using Multiple Expectations section above.</p> <p>This example shows that expectations in gMock are \"sticky\" by default, in the sense that they remain active even after we have reached their invocation upper bounds. This is an important rule to remember, as it affects the meaning of the spec, and is different to how it's done in many other mocking frameworks (Why'd we do that? Because we think our rule makes the common cases easier to express and understand.).</p> <p>Simple? Let's see if you've really understood it: what does the following code say?</p> <pre><code>using ::testing::Return;\n...\nfor (int i = n; i &gt; 0; i--) {\n  EXPECT_CALL(turtle, GetX())\n      .WillOnce(Return(10*i));\n}\n</code></pre> <p>If you think it says that <code>turtle.GetX()</code> will be called <code>n</code> times and will return 10, 20, 30, ..., consecutively, think twice! The problem is that, as we said, expectations are sticky. So, the second time <code>turtle.GetX()</code> is called, the last (latest) <code>EXPECT_CALL()</code> statement will match, and will immediately lead to an \"upper bound violated\" error - this piece of code is not very useful!</p> <p>One correct way of saying that <code>turtle.GetX()</code> will return 10, 20, 30, ..., is to explicitly say that the expectations are not sticky. In other words, they should retire as soon as they are saturated:</p> <pre><code>using ::testing::Return;\n...\nfor (int i = n; i &gt; 0; i--) {\n  EXPECT_CALL(turtle, GetX())\n      .WillOnce(Return(10*i))\n      .RetiresOnSaturation();\n}\n</code></pre> <p>And, there's a better way to do it: in this case, we expect the calls to occur in a specific order, and we line up the actions to match the order. Since the order is important here, we should make it explicit using a sequence:</p> <pre><code>using ::testing::InSequence;\nusing ::testing::Return;\n...\n{\n  InSequence s;\n\n  for (int i = 1; i &lt;= n; i++) {\n    EXPECT_CALL(turtle, GetX())\n        .WillOnce(Return(10*i))\n        .RetiresOnSaturation();\n  }\n}\n</code></pre> <p>By the way, the other situation where an expectation may not be sticky is when it's in a sequence - as soon as another expectation that comes after it in the sequence has been used, it automatically retires (and will never be used to match any call).</p>"},{"location":"build/_deps/googletest-src/docs/gmock_for_dummies.html#uninteresting-calls","title":"Uninteresting Calls","text":"<p>A mock object may have many methods, and not all of them are that interesting. For example, in some tests we may not care about how many times <code>GetX()</code> and <code>GetY()</code> get called.</p> <p>In gMock, if you are not interested in a method, just don't say anything about it. If a call to this method occurs, you'll see a warning in the test output, but it won't be a failure. This is called \"naggy\" behavior; to change, see The Nice, the Strict, and the Naggy.</p>"},{"location":"build/_deps/googletest-src/docs/pkgconfig.html","title":"Pkgconfig","text":""},{"location":"build/_deps/googletest-src/docs/pkgconfig.html#using-googletest-from-various-build-systems","title":"Using GoogleTest from various build systems","text":"<p>GoogleTest comes with pkg-config files that can be used to determine all necessary flags for compiling and linking to GoogleTest (and GoogleMock). Pkg-config is a standardised plain-text format containing</p> <ul> <li>the includedir (-I) path</li> <li>necessary macro (-D) definitions</li> <li>further required flags (-pthread)</li> <li>the library (-L) path</li> <li>the library (-l) to link to</li> </ul> <p>All current build systems support pkg-config in one way or another. For all examples here we assume you want to compile the sample <code>samples/sample3_unittest.cc</code>.</p>"},{"location":"build/_deps/googletest-src/docs/pkgconfig.html#cmake","title":"CMake","text":"<p>Using <code>pkg-config</code> in CMake is fairly easy:</p> <pre><code>cmake_minimum_required(VERSION 3.0)\n\ncmake_policy(SET CMP0048 NEW)\nproject(my_gtest_pkgconfig VERSION 0.0.1 LANGUAGES CXX)\n\nfind_package(PkgConfig)\npkg_search_module(GTEST REQUIRED gtest_main)\n\nadd_executable(testapp samples/sample3_unittest.cc)\ntarget_link_libraries(testapp ${GTEST_LDFLAGS})\ntarget_compile_options(testapp PUBLIC ${GTEST_CFLAGS})\n\ninclude(CTest)\nadd_test(first_and_only_test testapp)\n</code></pre> <p>It is generally recommended that you use <code>target_compile_options</code> + <code>_CFLAGS</code> over <code>target_include_directories</code> + <code>_INCLUDE_DIRS</code> as the former includes not just -I flags (GoogleTest might require a macro indicating to internal headers that all libraries have been compiled with threading enabled. In addition, GoogleTest might also require <code>-pthread</code> in the compiling step, and as such splitting the pkg-config <code>Cflags</code> variable into include dirs and macros for <code>target_compile_definitions()</code> might still miss this). The same recommendation goes for using <code>_LDFLAGS</code> over the more commonplace <code>_LIBRARIES</code>, which happens to discard <code>-L</code> flags and <code>-pthread</code>.</p>"},{"location":"build/_deps/googletest-src/docs/pkgconfig.html#help-pkg-config-cant-find-googletest","title":"Help! pkg-config can't find GoogleTest!","text":"<p>Let's say you have a <code>CMakeLists.txt</code> along the lines of the one in this tutorial and you try to run <code>cmake</code>. It is very possible that you get a failure along the lines of:</p> <pre><code>-- Checking for one of the modules 'gtest_main'\nCMake Error at /usr/share/cmake/Modules/FindPkgConfig.cmake:640 (message):\n  None of the required 'gtest_main' found\n</code></pre> <p>These failures are common if you installed GoogleTest yourself and have not sourced it from a distro or other package manager. If so, you need to tell pkg-config where it can find the <code>.pc</code> files containing the information. Say you installed GoogleTest to <code>/usr/local</code>, then it might be that the <code>.pc</code> files are installed under <code>/usr/local/lib64/pkgconfig</code>. If you set</p> <pre><code>export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig\n</code></pre> <p>pkg-config will also try to look in <code>PKG_CONFIG_PATH</code> to find <code>gtest_main.pc</code>.</p>"},{"location":"build/_deps/googletest-src/docs/pkgconfig.html#using-pkg-config-in-a-cross-compilation-setting","title":"Using pkg-config in a cross-compilation setting","text":"<p>Pkg-config can be used in a cross-compilation setting too. To do this, let's assume the final prefix of the cross-compiled installation will be <code>/usr</code>, and your sysroot is <code>/home/MYUSER/sysroot</code>. Configure and install GTest using</p> <pre><code>mkdir build &amp;&amp; cmake -DCMAKE_INSTALL_PREFIX=/usr ..\n</code></pre> <p>Install into the sysroot using <code>DESTDIR</code>:</p> <pre><code>make -j install DESTDIR=/home/MYUSER/sysroot\n</code></pre> <p>Before we continue, it is recommended to always define the following two variables for pkg-config in a cross-compilation setting:</p> <pre><code>export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=yes\nexport PKG_CONFIG_ALLOW_SYSTEM_LIBS=yes\n</code></pre> <p>otherwise <code>pkg-config</code> will filter <code>-I</code> and <code>-L</code> flags against standard prefixes such as <code>/usr</code> (see https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3 for reasons why this stripping needs to occur usually).</p> <p>If you look at the generated pkg-config file, it will look something like</p> <pre><code>libdir=/usr/lib64\nincludedir=/usr/include\n\nName: gtest\nDescription: GoogleTest (without main() function)\nVersion: 1.10.0\nURL: https://github.com/google/googletest\nLibs: -L${libdir} -lgtest -lpthread\nCflags: -I${includedir} -DGTEST_HAS_PTHREAD=1 -lpthread\n</code></pre> <p>Notice that the sysroot is not included in <code>libdir</code> and <code>includedir</code>! If you try to run <code>pkg-config</code> with the correct <code>PKG_CONFIG_LIBDIR=/home/MYUSER/sysroot/usr/lib64/pkgconfig</code> against this <code>.pc</code> file, you will get</p> <pre><code>$ pkg-config --cflags gtest\n-DGTEST_HAS_PTHREAD=1 -lpthread -I/usr/include\n$ pkg-config --libs gtest\n-L/usr/lib64 -lgtest -lpthread\n</code></pre> <p>which is obviously wrong and points to the <code>CBUILD</code> and not <code>CHOST</code> root. In order to use this in a cross-compilation setting, we need to tell pkg-config to inject the actual sysroot into <code>-I</code> and <code>-L</code> variables. Let us now tell pkg-config about the actual sysroot</p> <pre><code>export PKG_CONFIG_DIR=\nexport PKG_CONFIG_SYSROOT_DIR=/home/MYUSER/sysroot\nexport PKG_CONFIG_LIBDIR=${PKG_CONFIG_SYSROOT_DIR}/usr/lib64/pkgconfig\n</code></pre> <p>and running <code>pkg-config</code> again we get</p> <pre><code>$ pkg-config --cflags gtest\n-DGTEST_HAS_PTHREAD=1 -lpthread -I/home/MYUSER/sysroot/usr/include\n$ pkg-config --libs gtest\n-L/home/MYUSER/sysroot/usr/lib64 -lgtest -lpthread\n</code></pre> <p>which contains the correct sysroot now. For a more comprehensive guide to also including <code>${CHOST}</code> in build system calls, see the excellent tutorial by Diego Elio Petten\u00f2: https://autotools.io/pkgconfig/cross-compiling.html</p>"},{"location":"build/_deps/googletest-src/docs/platforms.html","title":"Supported Platforms","text":"<p>GoogleTest requires a codebase and compiler compliant with the C++11 standard or newer.</p> <p>The GoogleTest code is officially supported on the following platforms. Operating systems or tools not listed below are community-supported. For community-supported platforms, patches that do not complicate the code may be considered.</p> <p>If you notice any problems on your platform, please file an issue on the GoogleTest GitHub Issue Tracker. Pull requests containing fixes are welcome!</p>"},{"location":"build/_deps/googletest-src/docs/platforms.html#operating-systems","title":"Operating systems","text":"<ul> <li>Linux</li> <li>macOS</li> <li>Windows</li> </ul>"},{"location":"build/_deps/googletest-src/docs/platforms.html#compilers","title":"Compilers","text":"<ul> <li>gcc 5.0+</li> <li>clang 5.0+</li> <li>MSVC 2015+</li> </ul> <p>macOS users: Xcode 9.3+ provides clang 5.0+.</p>"},{"location":"build/_deps/googletest-src/docs/platforms.html#build-systems","title":"Build systems","text":"<ul> <li>Bazel</li> <li>CMake</li> </ul> <p>Bazel is the build system used by the team internally and in tests. CMake is supported on a best-effort basis and by the community.</p>"},{"location":"build/_deps/googletest-src/docs/primer.html","title":"Googletest Primer","text":""},{"location":"build/_deps/googletest-src/docs/primer.html#introduction-why-googletest","title":"Introduction: Why googletest?","text":"<p>googletest helps you write better C++ tests.</p> <p>googletest is a testing framework developed by the Testing Technology team with Google's specific requirements and constraints in mind. Whether you work on Linux, Windows, or a Mac, if you write C++ code, googletest can help you. And it supports any kind of tests, not just unit tests.</p> <p>So what makes a good test, and how does googletest fit in? We believe:</p> <ol> <li>Tests should be independent and repeatable. It's a pain to debug a test     that succeeds or fails as a result of other tests. googletest isolates the     tests by running each of them on a different object. When a test fails,     googletest allows you to run it in isolation for quick debugging.</li> <li>Tests should be well organized and reflect the structure of the tested     code. googletest groups related tests into test suites that can share data     and subroutines. This common pattern is easy to recognize and makes tests     easy to maintain. Such consistency is especially helpful when people switch     projects and start to work on a new code base.</li> <li>Tests should be portable and reusable. Google has a lot of code that is     platform-neutral; its tests should also be platform-neutral. googletest     works on different OSes, with different compilers, with or without     exceptions, so googletest tests can work with a variety of configurations.</li> <li>When tests fail, they should provide as much information about the problem     as possible. googletest doesn't stop at the first test failure. Instead, it     only stops the current test and continues with the next. You can also set up     tests that report non-fatal failures after which the current test continues.     Thus, you can detect and fix multiple bugs in a single run-edit-compile     cycle.</li> <li>The testing framework should liberate test writers from housekeeping chores     and let them focus on the test content. googletest automatically keeps     track of all tests defined, and doesn't require the user to enumerate them     in order to run them.</li> <li>Tests should be fast. With googletest, you can reuse shared resources     across tests and pay for the set-up/tear-down only once, without making     tests depend on each other.</li> </ol> <p>Since googletest is based on the popular xUnit architecture, you'll feel right at home if you've used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let's go!</p>"},{"location":"build/_deps/googletest-src/docs/primer.html#beware-of-the-nomenclature","title":"Beware of the nomenclature","text":"<p>{: .callout .note} Note: There might be some confusion arising from different definitions of the terms Test, Test Case and Test Suite, so beware of misunderstanding these.</p> <p>Historically, googletest started to use the term Test Case for grouping related tests, whereas current publications, including International Software Testing Qualifications Board (ISTQB) materials and various textbooks on software quality, use the term Test Suite for this.</p> <p>The related term Test, as it is used in googletest, corresponds to the term Test Case of ISTQB and others.</p> <p>The term Test is commonly of broad enough sense, including ISTQB's definition of Test Case, so it's not much of a problem here. But the term Test Case as was used in Google Test is of contradictory sense and thus confusing.</p> <p>googletest recently started replacing the term Test Case with Test Suite. The preferred API is TestSuite. The older TestCase API is being slowly deprecated and refactored away.</p> <p>So please be aware of the different definitions of the terms:</p> Meaning googletest Term ISTQB Term Exercise a particular program path with specific input values and verify the results TEST() Test Case"},{"location":"build/_deps/googletest-src/docs/primer.html#basic-concepts","title":"Basic Concepts","text":"<p>When using googletest, you start by writing assertions, which are statements that check whether a condition is true. An assertion's result can be success, nonfatal failure, or fatal failure. If a fatal failure occurs, it aborts the current function; otherwise the program continues normally.</p> <p>Tests use assertions to verify the tested code's behavior. If a test crashes or has a failed assertion, then it fails; otherwise it succeeds.</p> <p>A test suite contains one or many tests. You should group your tests into test suites that reflect the structure of the tested code. When multiple tests in a test suite need to share common objects and subroutines, you can put them into a test fixture class.</p> <p>A test program can contain multiple test suites.</p> <p>We'll now explain how to write a test program, starting at the individual assertion level and building up to tests and test suites.</p>"},{"location":"build/_deps/googletest-src/docs/primer.html#assertions","title":"Assertions","text":"<p>googletest assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, googletest prints the assertion's source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to googletest's message.</p> <p>The assertions come in pairs that test the same thing but have different effects on the current function. <code>ASSERT_*</code> versions generate fatal failures when they fail, and abort the current function. <code>EXPECT_*</code> versions generate nonfatal failures, which don't abort the current function. Usually <code>EXPECT_*</code> are preferred, as they allow more than one failure to be reported in a test. However, you should use <code>ASSERT_*</code> if it doesn't make sense to continue when the assertion in question fails.</p> <p>Since a failed <code>ASSERT_*</code> returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors.</p> <p>To provide a custom failure message, simply stream it into the macro using the <code>&lt;&lt;</code> operator or a sequence of such operators. See the following example, using the <code>ASSERT_EQ</code> and <code>EXPECT_EQ</code> macros to verify value equality:</p> <pre><code>ASSERT_EQ(x.size(), y.size()) &lt;&lt; \"Vectors x and y are of unequal length\";\n\nfor (int i = 0; i &lt; x.size(); ++i) {\n  EXPECT_EQ(x[i], y[i]) &lt;&lt; \"Vectors x and y differ at index \" &lt;&lt; i;\n}\n</code></pre> <p>Anything that can be streamed to an <code>ostream</code> can be streamed to an assertion macro--in particular, C strings and <code>string</code> objects. If a wide string (<code>wchar_t*</code>, <code>TCHAR*</code> in <code>UNICODE</code> mode on Windows, or <code>std::wstring</code>) is streamed to an assertion, it will be translated to UTF-8 when printed.</p> <p>GoogleTest provides a collection of assertions for verifying the behavior of your code in various ways. You can check Boolean conditions, compare values based on relational operators, verify string values, floating-point values, and much more. There are even assertions that enable you to verify more complex states by providing custom predicates. For the complete list of assertions provided by GoogleTest, see the Assertions Reference.</p>"},{"location":"build/_deps/googletest-src/docs/primer.html#simple-tests","title":"Simple Tests","text":"<p>To create a test:</p> <ol> <li>Use the <code>TEST()</code> macro to define and name a test function. These are     ordinary C++ functions that don't return a value.</li> <li>In this function, along with any valid C++ statements you want to include,     use the various googletest assertions to check values.</li> <li>The test's result is determined by the assertions; if any assertion in the     test fails (either fatally or non-fatally), or if the test crashes, the     entire test fails. Otherwise, it succeeds.</li> </ol> <pre><code>TEST(TestSuiteName, TestName) {\n  ... test body ...\n}\n</code></pre> <p><code>TEST()</code> arguments go from general to specific. The first argument is the name of the test suite, and the second argument is the test's name within the test suite. Both names must be valid C++ identifiers, and they should not contain any underscores (<code>_</code>). A test's full name consists of its containing test suite and its individual name. Tests from different test suites can have the same individual name.</p> <p>For example, let's take a simple integer function:</p> <pre><code>int Factorial(int n);  // Returns the factorial of n\n</code></pre> <p>A test suite for this function might look like:</p> <pre><code>// Tests factorial of 0.\nTEST(FactorialTest, HandlesZeroInput) {\n  EXPECT_EQ(Factorial(0), 1);\n}\n\n// Tests factorial of positive numbers.\nTEST(FactorialTest, HandlesPositiveInput) {\n  EXPECT_EQ(Factorial(1), 1);\n  EXPECT_EQ(Factorial(2), 2);\n  EXPECT_EQ(Factorial(3), 6);\n  EXPECT_EQ(Factorial(8), 40320);\n}\n</code></pre> <p>googletest groups the test results by test suites, so logically related tests should be in the same test suite; in other words, the first argument to their <code>TEST()</code> should be the same. In the above example, we have two tests, <code>HandlesZeroInput</code> and <code>HandlesPositiveInput</code>, that belong to the same test suite <code>FactorialTest</code>.</p> <p>When naming your test suites and tests, you should follow the same convention as for naming functions and classes.</p> <p>Availability: Linux, Windows, Mac.</p>"},{"location":"build/_deps/googletest-src/docs/primer.html#test-fixtures-using-the-same-data-configuration-for-multiple-tests-same-data-multiple-tests","title":"Test Fixtures: Using the Same Data Configuration for Multiple Tests {#same-data-multiple-tests}","text":"<p>If you find yourself writing two or more tests that operate on similar data, you can use a test fixture. This allows you to reuse the same configuration of objects for several different tests.</p> <p>To create a fixture:</p> <ol> <li>Derive a class from <code>::testing::Test</code> . Start its body with <code>protected:</code>, as     we'll want to access fixture members from sub-classes.</li> <li>Inside the class, declare any objects you plan to use.</li> <li>If necessary, write a default constructor or <code>SetUp()</code> function to prepare     the objects for each test. A common mistake is to spell <code>SetUp()</code> as     <code>Setup()</code> with a small <code>u</code> - Use <code>override</code> in C++11 to make sure you     spelled it correctly.</li> <li>If necessary, write a destructor or <code>TearDown()</code> function to release any     resources you allocated in <code>SetUp()</code> . To learn when you should use the     constructor/destructor and when you should use <code>SetUp()/TearDown()</code>, read     the FAQ.</li> <li>If needed, define subroutines for your tests to share.</li> </ol> <p>When using a fixture, use <code>TEST_F()</code> instead of <code>TEST()</code> as it allows you to access objects and subroutines in the test fixture:</p> <pre><code>TEST_F(TestFixtureName, TestName) {\n  ... test body ...\n}\n</code></pre> <p>Like <code>TEST()</code>, the first argument is the test suite name, but for <code>TEST_F()</code> this must be the name of the test fixture class. You've probably guessed: <code>_F</code> is for fixture.</p> <p>Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error.</p> <p>Also, you must first define a test fixture class before using it in a <code>TEST_F()</code>, or you'll get the compiler error \"<code>virtual outside class declaration</code>\".</p> <p>For each test defined with <code>TEST_F()</code>, googletest will create a fresh test fixture at runtime, immediately initialize it via <code>SetUp()</code>, run the test, clean up by calling <code>TearDown()</code>, and then delete the test fixture. Note that different tests in the same test suite have different test fixture objects, and googletest always deletes a test fixture before it creates the next one. googletest does not reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.</p> <p>As an example, let's write tests for a FIFO queue class named <code>Queue</code>, which has the following interface:</p> <pre><code>template &lt;typename E&gt;  // E is the element type.\nclass Queue {\n public:\n  Queue();\n  void Enqueue(const E&amp; element);\n  E* Dequeue();  // Returns NULL if the queue is empty.\n  size_t size() const;\n  ...\n};\n</code></pre> <p>First, define a fixture class. By convention, you should give it the name <code>FooTest</code> where <code>Foo</code> is the class being tested.</p> <pre><code>class QueueTest : public ::testing::Test {\n protected:\n  void SetUp() override {\n     q1_.Enqueue(1);\n     q2_.Enqueue(2);\n     q2_.Enqueue(3);\n  }\n\n  // void TearDown() override {}\n\n  Queue&lt;int&gt; q0_;\n  Queue&lt;int&gt; q1_;\n  Queue&lt;int&gt; q2_;\n};\n</code></pre> <p>In this case, <code>TearDown()</code> is not needed since we don't have to clean up after each test, other than what's already done by the destructor.</p> <p>Now we'll write tests using <code>TEST_F()</code> and this fixture.</p> <pre><code>TEST_F(QueueTest, IsEmptyInitially) {\n  EXPECT_EQ(q0_.size(), 0);\n}\n\nTEST_F(QueueTest, DequeueWorks) {\n  int* n = q0_.Dequeue();\n  EXPECT_EQ(n, nullptr);\n\n  n = q1_.Dequeue();\n  ASSERT_NE(n, nullptr);\n  EXPECT_EQ(*n, 1);\n  EXPECT_EQ(q1_.size(), 0);\n  delete n;\n\n  n = q2_.Dequeue();\n  ASSERT_NE(n, nullptr);\n  EXPECT_EQ(*n, 2);\n  EXPECT_EQ(q2_.size(), 1);\n  delete n;\n}\n</code></pre> <p>The above uses both <code>ASSERT_*</code> and <code>EXPECT_*</code> assertions. The rule of thumb is to use <code>EXPECT_*</code> when you want the test to continue to reveal more errors after the assertion failure, and use <code>ASSERT_*</code> when continuing after failure doesn't make sense. For example, the second assertion in the <code>Dequeue</code> test is <code>ASSERT_NE(n, nullptr)</code>, as we need to dereference the pointer <code>n</code> later, which would lead to a segfault when <code>n</code> is <code>NULL</code>.</p> <p>When these tests run, the following happens:</p> <ol> <li>googletest constructs a <code>QueueTest</code> object (let's call it <code>t1</code>).</li> <li><code>t1.SetUp()</code> initializes <code>t1</code>.</li> <li>The first test (<code>IsEmptyInitially</code>) runs on <code>t1</code>.</li> <li><code>t1.TearDown()</code> cleans up after the test finishes.</li> <li><code>t1</code> is destructed.</li> <li>The above steps are repeated on another <code>QueueTest</code> object, this time     running the <code>DequeueWorks</code> test.</li> </ol> <p>Availability: Linux, Windows, Mac.</p>"},{"location":"build/_deps/googletest-src/docs/primer.html#invoking-the-tests","title":"Invoking the Tests","text":"<p><code>TEST()</code> and <code>TEST_F()</code> implicitly register their tests with googletest. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.</p> <p>After defining your tests, you can run them with <code>RUN_ALL_TESTS()</code>, which returns <code>0</code> if all the tests are successful, or <code>1</code> otherwise. Note that <code>RUN_ALL_TESTS()</code> runs all tests in your link unit--they can be from different test suites, or even different source files.</p> <p>When invoked, the <code>RUN_ALL_TESTS()</code> macro:</p> <ul> <li> <p>Saves the state of all googletest flags.</p> </li> <li> <p>Creates a test fixture object for the first test.</p> </li> <li> <p>Initializes it via <code>SetUp()</code>.</p> </li> <li> <p>Runs the test on the fixture object.</p> </li> <li> <p>Cleans up the fixture via <code>TearDown()</code>.</p> </li> <li> <p>Deletes the fixture.</p> </li> <li> <p>Restores the state of all googletest flags.</p> </li> <li> <p>Repeats the above steps for the next test, until all tests have run.</p> </li> </ul> <p>If a fatal failure happens the subsequent steps will be skipped.</p> <p>{: .callout .important}</p> <p>IMPORTANT: You must not ignore the return value of <code>RUN_ALL_TESTS()</code>, or you will get a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your <code>main()</code> function must return the value of <code>RUN_ALL_TESTS()</code>.</p> <p>Also, you should call <code>RUN_ALL_TESTS()</code> only once. Calling it more than once conflicts with some advanced googletest features (e.g., thread-safe death tests) and thus is not supported.</p> <p>Availability: Linux, Windows, Mac.</p>"},{"location":"build/_deps/googletest-src/docs/primer.html#writing-the-main-function","title":"Writing the main() Function","text":"<p>Most users should not need to write their own <code>main</code> function and instead link with <code>gtest_main</code> (as opposed to with <code>gtest</code>), which defines a suitable entry point. See the end of this section for details. The remainder of this section should only apply when you need to do something custom before the tests run that cannot be expressed within the framework of fixtures and test suites.</p> <p>If you write your own <code>main</code> function, it should return the value of <code>RUN_ALL_TESTS()</code>.</p> <p>You can start from this boilerplate:</p> <pre><code>#include \"this/package/foo.h\"\n\n#include \"gtest/gtest.h\"\n\nnamespace my {\nnamespace project {\nnamespace {\n\n// The fixture for testing class Foo.\nclass FooTest : public ::testing::Test {\n protected:\n  // You can remove any or all of the following functions if their bodies would\n  // be empty.\n\n  FooTest() {\n     // You can do set-up work for each test here.\n  }\n\n  ~FooTest() override {\n     // You can do clean-up work that doesn't throw exceptions here.\n  }\n\n  // If the constructor and destructor are not enough for setting up\n  // and cleaning up each test, you can define the following methods:\n\n  void SetUp() override {\n     // Code here will be called immediately after the constructor (right\n     // before each test).\n  }\n\n  void TearDown() override {\n     // Code here will be called immediately after each test (right\n     // before the destructor).\n  }\n\n  // Class members declared here can be used by all tests in the test suite\n  // for Foo.\n};\n\n// Tests that the Foo::Bar() method does Abc.\nTEST_F(FooTest, MethodBarDoesAbc) {\n  const std::string input_filepath = \"this/package/testdata/myinputfile.dat\";\n  const std::string output_filepath = \"this/package/testdata/myoutputfile.dat\";\n  Foo f;\n  EXPECT_EQ(f.Bar(input_filepath, output_filepath), 0);\n}\n\n// Tests that Foo does Xyz.\nTEST_F(FooTest, DoesXyz) {\n  // Exercises the Xyz feature of Foo.\n}\n\n}  // namespace\n}  // namespace project\n}  // namespace my\n\nint main(int argc, char **argv) {\n  ::testing::InitGoogleTest(&amp;argc, argv);\n  return RUN_ALL_TESTS();\n}\n</code></pre> <p>The <code>::testing::InitGoogleTest()</code> function parses the command line for googletest flags, and removes all recognized flags. This allows the user to control a test program's behavior via various flags, which we'll cover in the AdvancedGuide. You must call this function before calling <code>RUN_ALL_TESTS()</code>, or the flags won't be properly initialized.</p> <p>On Windows, <code>InitGoogleTest()</code> also works with wide strings, so it can be used in programs compiled in <code>UNICODE</code> mode as well.</p> <p>But maybe you think that writing all those <code>main</code> functions is too much work? We agree with you completely, and that's why Google Test provides a basic implementation of main(). If it fits your needs, then just link your test with the <code>gtest_main</code> library and you are good to go.</p> <p>{: .callout .note} NOTE: <code>ParseGUnitFlags()</code> is deprecated in favor of <code>InitGoogleTest()</code>.</p>"},{"location":"build/_deps/googletest-src/docs/primer.html#known-limitations","title":"Known Limitations","text":"<ul> <li>Google Test is designed to be thread-safe. The implementation is thread-safe     on systems where the <code>pthreads</code> library is available. It is currently     unsafe to use Google Test assertions from two threads concurrently on     other systems (e.g. Windows). In most tests this is not an issue as usually     the assertions are done in the main thread. If you want to help, you can     volunteer to implement the necessary synchronization primitives in     <code>gtest-port.h</code> for your platform.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/quickstart-bazel.html","title":"Quickstart: Building with Bazel","text":"<p>This tutorial aims to get you up and running with GoogleTest using the Bazel build system. If you're using GoogleTest for the first time or need a refresher, we recommend this tutorial as a starting point.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-bazel.html#prerequisites","title":"Prerequisites","text":"<p>To complete this tutorial, you'll need:</p> <ul> <li>A compatible operating system (e.g. Linux, macOS, Windows).</li> <li>A compatible C++ compiler that supports at least C++11.</li> <li>Bazel, the preferred build system used by the     GoogleTest team.</li> </ul> <p>See Supported Platforms for more information about platforms compatible with GoogleTest.</p> <p>If you don't already have Bazel installed, see the Bazel installation guide.</p> <p>{: .callout .note} Note: The terminal commands in this tutorial show a Unix shell prompt, but the commands work on the Windows command line as well.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-bazel.html#set-up-a-bazel-workspace","title":"Set up a Bazel workspace","text":"<p>A Bazel workspace is a directory on your filesystem that you use to manage source files for the software you want to build. Each workspace directory has a text file named <code>WORKSPACE</code> which may be empty, or may contain references to external dependencies required to build the outputs.</p> <p>First, create a directory for your workspace:</p> <pre><code>$ mkdir my_workspace &amp;&amp; cd my_workspace\n</code></pre> <p>Next, you\u2019ll create the <code>WORKSPACE</code> file to specify dependencies. A common and recommended way to depend on GoogleTest is to use a Bazel external dependency via the <code>http_archive</code> rule. To do this, in the root directory of your workspace (<code>my_workspace/</code>), create a file named <code>WORKSPACE</code> with the following contents:</p> <pre><code>load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n  name = \"com_google_googletest\",\n  urls = [\"https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip\"],\n  strip_prefix = \"googletest-609281088cfefc76f9d0ce82e1ff6c30cc3591e5\",\n)\n</code></pre> <p>The above configuration declares a dependency on GoogleTest which is downloaded as a ZIP archive from GitHub. In the above example, <code>609281088cfefc76f9d0ce82e1ff6c30cc3591e5</code> is the Git commit hash of the GoogleTest version to use; we recommend updating the hash often to point to the latest version.</p> <p>Bazel also needs a dependency on the <code>rules_cc</code> repository to build C++ code, so add the following to the <code>WORKSPACE</code> file:</p> <pre><code>http_archive(\n  name = \"rules_cc\",\n  urls = [\"https://github.com/bazelbuild/rules_cc/archive/40548a2974f1aea06215272d9c2b47a14a24e556.zip\"],\n  strip_prefix = \"rules_cc-40548a2974f1aea06215272d9c2b47a14a24e556\",\n)\n</code></pre> <p>Now you're ready to build C++ code that uses GoogleTest.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-bazel.html#create-and-run-a-binary","title":"Create and run a binary","text":"<p>With your Bazel workspace set up, you can now use GoogleTest code within your own project.</p> <p>As an example, create a file named <code>hello_test.cc</code> in your <code>my_workspace</code> directory with the following contents:</p> <pre><code>#include &lt;gtest/gtest.h&gt;\n\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n</code></pre> <p>GoogleTest provides assertions that you use to test the behavior of your code. The above sample includes the main GoogleTest header file and demonstrates some basic assertions.</p> <p>To build the code, create a file named <code>BUILD</code> in the same directory with the following contents:</p> <pre><code>load(\"@rules_cc//cc:defs.bzl\", \"cc_test\")\n\ncc_test(\n  name = \"hello_test\",\n  size = \"small\",\n  srcs = [\"hello_test.cc\"],\n  deps = [\"@com_google_googletest//:gtest_main\"],\n)\n</code></pre> <p>This <code>cc_test</code> rule declares the C++ test binary you want to build, and links to GoogleTest (<code>//:gtest_main</code>) using the prefix you specified in the <code>WORKSPACE</code> file (<code>@com_google_googletest</code>). For more information about Bazel <code>BUILD</code> files, see the Bazel C++ Tutorial.</p> <p>Now you can build and run your test:</p> <pre>\nmy_workspace$ bazel test --test_output=all //:hello_test\nINFO: Analyzed target //:hello_test (26 packages loaded, 362 targets configured).\nINFO: Found 1 test target...\nINFO: From Testing //:hello_test:\n==================== Test output for //:hello_test:\nRunning main() from gmock_main.cc\n[==========] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from HelloTest\n[ RUN      ] HelloTest.BasicAssertions\n[       OK ] HelloTest.BasicAssertions (0 ms)\n[----------] 1 test from HelloTest (0 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test suite ran. (0 ms total)\n[  PASSED  ] 1 test.\n================================================================================\nTarget //:hello_test up-to-date:\n  bazel-bin/hello_test\nINFO: Elapsed time: 4.190s, Critical Path: 3.05s\nINFO: 27 processes: 8 internal, 19 linux-sandbox.\nINFO: Build completed successfully, 27 total actions\n//:hello_test                                                     PASSED in 0.1s\n\nINFO: Build completed successfully, 27 total actions\n</pre> <p>Congratulations! You've successfully built and run a test binary using GoogleTest.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-bazel.html#next-steps","title":"Next steps","text":"<ul> <li>Check out the Primer to start learning how to write simple     tests.</li> <li>See the code samples for more examples showing how to use a     variety of GoogleTest features.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/quickstart-cmake.html","title":"Quickstart: Building with CMake","text":"<p>This tutorial aims to get you up and running with GoogleTest using CMake. If you're using GoogleTest for the first time or need a refresher, we recommend this tutorial as a starting point. If your project uses Bazel, see the Quickstart for Bazel instead.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-cmake.html#prerequisites","title":"Prerequisites","text":"<p>To complete this tutorial, you'll need:</p> <ul> <li>A compatible operating system (e.g. Linux, macOS, Windows).</li> <li>A compatible C++ compiler that supports at least C++11.</li> <li>CMake and a compatible build tool for building the     project.<ul> <li>Compatible build tools include     Make,     Ninja, and others - see     CMake Generators     for more information.</li> </ul> </li> </ul> <p>See Supported Platforms for more information about platforms compatible with GoogleTest.</p> <p>If you don't already have CMake installed, see the CMake installation guide.</p> <p>{: .callout .note} Note: The terminal commands in this tutorial show a Unix shell prompt, but the commands work on the Windows command line as well.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-cmake.html#set-up-a-project","title":"Set up a project","text":"<p>CMake uses a file named <code>CMakeLists.txt</code> to configure the build system for a project. You'll use this file to set up your project and declare a dependency on GoogleTest.</p> <p>First, create a directory for your project:</p> <pre><code>$ mkdir my_project &amp;&amp; cd my_project\n</code></pre> <p>Next, you'll create the <code>CMakeLists.txt</code> file and declare a dependency on GoogleTest. There are many ways to express dependencies in the CMake ecosystem; in this quickstart, you'll use the <code>FetchContent</code> CMake module. To do this, in your project directory (<code>my_project</code>), create a file named <code>CMakeLists.txt</code> with the following contents:</p> <pre><code>cmake_minimum_required(VERSION 3.14)\nproject(my_project)\n\n# GoogleTest requires at least C++11\nset(CMAKE_CXX_STANDARD 11)\n\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n</code></pre> <p>The above configuration declares a dependency on GoogleTest which is downloaded from GitHub. In the above example, <code>609281088cfefc76f9d0ce82e1ff6c30cc3591e5</code> is the Git commit hash of the GoogleTest version to use; we recommend updating the hash often to point to the latest version.</p> <p>For more information about how to create <code>CMakeLists.txt</code> files, see the CMake Tutorial.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-cmake.html#create-and-run-a-binary","title":"Create and run a binary","text":"<p>With GoogleTest declared as a dependency, you can use GoogleTest code within your own project.</p> <p>As an example, create a file named <code>hello_test.cc</code> in your <code>my_project</code> directory with the following contents:</p> <pre><code>#include &lt;gtest/gtest.h&gt;\n\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n</code></pre> <p>GoogleTest provides assertions that you use to test the behavior of your code. The above sample includes the main GoogleTest header file and demonstrates some basic assertions.</p> <p>To build the code, add the following to the end of your <code>CMakeLists.txt</code> file:</p> <pre><code>enable_testing()\n\nadd_executable(\n  hello_test\n  hello_test.cc\n)\ntarget_link_libraries(\n  hello_test\n  gtest_main\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(hello_test)\n</code></pre> <p>The above configuration enables testing in CMake, declares the C++ test binary you want to build (<code>hello_test</code>), and links it to GoogleTest (<code>gtest_main</code>). The last two lines enable CMake's test runner to discover the tests included in the binary, using the <code>GoogleTest</code> CMake module.</p> <p>Now you can build and run your test:</p> <pre>\nmy_project$ cmake -S . -B build\n-- The C compiler identification is GNU 10.2.1\n-- The CXX compiler identification is GNU 10.2.1\n...\n-- Build files have been written to: .../my_project/build\n\nmy_project$ cmake --build build\nScanning dependencies of target gtest\n...\n[100%] Built target gmock_main\n\nmy_project$ cd build &amp;&amp; ctest\nTest project .../my_project/build\n    Start 1: HelloTest.BasicAssertions\n1/1 Test #1: HelloTest.BasicAssertions ........   Passed    0.00 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) =   0.01 sec\n</pre> <p>Congratulations! You've successfully built and run a test binary using GoogleTest.</p>"},{"location":"build/_deps/googletest-src/docs/quickstart-cmake.html#next-steps","title":"Next steps","text":"<ul> <li>Check out the Primer to start learning how to write simple     tests.</li> <li>See the code samples for more examples showing how to use a     variety of GoogleTest features.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/samples.html","title":"Googletest Samples","text":"<p>If you're like us, you'd like to look at googletest samples. The sample directory has a number of well-commented samples showing how to use a variety of googletest features.</p> <ul> <li>Sample #1 shows the basic steps of using googletest to test C++ functions.</li> <li>Sample #2 shows a more complex unit test for a class with multiple member     functions.</li> <li>Sample #3 uses a test fixture.</li> <li>Sample #4 teaches you how to use googletest and <code>googletest.h</code> together to     get the best of both libraries.</li> <li>Sample #5 puts shared testing logic in a base test fixture, and reuses it in     derived fixtures.</li> <li>Sample #6 demonstrates type-parameterized tests.</li> <li>Sample #7 teaches the basics of value-parameterized tests.</li> <li>Sample #8 shows using <code>Combine()</code> in value-parameterized tests.</li> <li>Sample #9 shows use of the listener API to modify Google Test's console     output and the use of its reflection API to inspect test results.</li> <li>Sample #10 shows use of the listener API to implement a primitive memory     leak checker.</li> </ul>"},{"location":"build/_deps/googletest-src/docs/reference/actions.html","title":"Actions Reference","text":"<p>Actions specify what a mock function should do when invoked. This page lists the built-in actions provided by GoogleTest. All actions are defined in the <code>::testing</code> namespace.</p>"},{"location":"build/_deps/googletest-src/docs/reference/actions.html#returning-a-value","title":"Returning a Value","text":"<code>Return()</code> Return from a <code>void</code> mock function. <code>Return(value)</code> Return <code>value</code>. If the type of <code>value</code> is     different to the mock function's return type, <code>value</code> is converted to the latter type at the time the expectation is set, not when the action is executed. <code>ReturnArg&lt;N&gt;()</code> Return the <code>N</code>-th (0-based) argument. <code>ReturnNew&lt;T&gt;(a1, ..., ak)</code> Return <code>new T(a1, ..., ak)</code>; a different      object is created each time. <code>ReturnNull()</code> Return a null pointer. <code>ReturnPointee(ptr)</code> Return the value pointed to by <code>ptr</code>. <code>ReturnRef(variable)</code> Return a reference to <code>variable</code>. <code>ReturnRefOfCopy(value)</code> Return a reference to a copy of <code>value</code>; the  copy lives as long as the action. <code>ReturnRoundRobin({a1, ..., ak})</code> Each call will return the next <code>ai</code> in the list, starting at the beginning when the end of the list is reached."},{"location":"build/_deps/googletest-src/docs/reference/actions.html#side-effects","title":"Side Effects","text":"<code>Assign(&amp;variable, value)</code> Assign <code>value</code> to variable. <code>DeleteArg&lt;N&gt;()</code> Delete the <code>N</code>-th (0-based) argument, which must be a pointer. <code>SaveArg&lt;N&gt;(pointer)</code> Save the <code>N</code>-th (0-based) argument to <code>*pointer</code>. <code>SaveArgPointee&lt;N&gt;(pointer)</code> Save the value pointed to by the <code>N</code>-th (0-based) argument to <code>*pointer</code>. <code>SetArgReferee&lt;N&gt;(value)</code> Assign <code>value</code> to the variable referenced by the <code>N</code>-th (0-based) argument. <code>SetArgPointee&lt;N&gt;(value)</code> Assign <code>value</code> to the variable pointed by the <code>N</code>-th (0-based) argument. <code>SetArgumentPointee&lt;N&gt;(value)</code> Same as <code>SetArgPointee&lt;N&gt;(value)</code>. Deprecated. Will be removed in v1.7.0. <code>SetArrayArgument&lt;N&gt;(first, last)</code> Copies the elements in source range [<code>first</code>, <code>last</code>) to the array pointed to by the <code>N</code>-th (0-based) argument, which can be either a pointer or an iterator. The action does not take ownership of the elements in the source range. <code>SetErrnoAndReturn(error, value)</code> Set <code>errno</code> to <code>error</code> and return <code>value</code>. <code>Throw(exception)</code> Throws the given exception, which can be any copyable value. Available since v1.1.0."},{"location":"build/_deps/googletest-src/docs/reference/actions.html#using-a-function-functor-or-lambda-as-an-action","title":"Using a Function, Functor, or Lambda as an Action","text":"<p>In the following, by \"callable\" we mean a free function, <code>std::function</code>, functor, or lambda.</p> <code>f</code> Invoke f with the arguments passed to the mock function, where f is a callable. <code>Invoke(f)</code> Invoke <code>f</code> with the arguments passed to the mock function, where <code>f</code> can be a global/static function or a functor. <code>Invoke(object_pointer, &amp;class::method)</code> Invoke the method on the object with the arguments passed to the mock function. <code>InvokeWithoutArgs(f)</code> Invoke <code>f</code>, which can be a global/static function or a functor. <code>f</code> must take no arguments. <code>InvokeWithoutArgs(object_pointer, &amp;class::method)</code> Invoke the method on the object, which takes no arguments. <code>InvokeArgument&lt;N&gt;(arg1, arg2, ..., argk)</code> Invoke the mock function's <code>N</code>-th (0-based) argument, which must be a function or a functor, with the <code>k</code> arguments. <p>The return value of the invoked function is used as the return value of the action.</p> <p>When defining a callable to be used with <code>Invoke*()</code>, you can declare any unused parameters as <code>Unused</code>:</p> <pre><code>using ::testing::Invoke;\ndouble Distance(Unused, double x, double y) { return sqrt(x*x + y*y); }\n...\nEXPECT_CALL(mock, Foo(\"Hi\", _, _)).WillOnce(Invoke(Distance));\n</code></pre> <p><code>Invoke(callback)</code> and <code>InvokeWithoutArgs(callback)</code> take ownership of <code>callback</code>, which must be permanent. The type of <code>callback</code> must be a base callback type instead of a derived one, e.g.</p> <pre><code>  BlockingClosure* done = new BlockingClosure;\n  ... Invoke(done) ...;  // This won't compile!\n\n  Closure* done2 = new BlockingClosure;\n  ... Invoke(done2) ...;  // This works.\n</code></pre> <p>In <code>InvokeArgument&lt;N&gt;(...)</code>, if an argument needs to be passed by reference, wrap it inside <code>std::ref()</code>. For example,</p> <pre><code>using ::testing::InvokeArgument;\n...\nInvokeArgument&lt;2&gt;(5, string(\"Hi\"), std::ref(foo))\n</code></pre> <p>calls the mock function's #2 argument, passing to it <code>5</code> and <code>string(\"Hi\")</code> by value, and <code>foo</code> by reference.</p>"},{"location":"build/_deps/googletest-src/docs/reference/actions.html#default-action","title":"Default Action","text":"Matcher Description <code>DoDefault()</code> Do the default action (specified by <code>ON_CALL()</code> or the built-in one). <p>{: .callout .note} Note: due to technical reasons, <code>DoDefault()</code> cannot be used inside a composite action - trying to do so will result in a run-time error.</p>"},{"location":"build/_deps/googletest-src/docs/reference/actions.html#composite-actions","title":"Composite Actions","text":"<code>DoAll(a1, a2, ..., an)</code> Do all actions <code>a1</code> to <code>an</code> and return the result of <code>an</code> in each invocation. The first <code>n - 1</code> sub-actions must return void and will receive a  readonly view of the arguments. <code>IgnoreResult(a)</code> Perform action <code>a</code> and ignore its result. <code>a</code> must not return void. <code>WithArg&lt;N&gt;(a)</code> Pass the <code>N</code>-th (0-based) argument of the mock function to action <code>a</code> and perform it. <code>WithArgs&lt;N1, N2, ..., Nk&gt;(a)</code> Pass the selected (0-based) arguments of the mock function to action <code>a</code> and perform it. <code>WithoutArgs(a)</code> Perform action <code>a</code> without any arguments."},{"location":"build/_deps/googletest-src/docs/reference/actions.html#defining-actions","title":"Defining Actions","text":"<code>ACTION(Sum) { return arg0 + arg1; }</code> Defines an action <code>Sum()</code> to return the sum of the mock function's argument #0 and #1. <code>ACTION_P(Plus, n) { return arg0 + n; }</code> Defines an action <code>Plus(n)</code> to return the sum of the mock function's argument #0 and <code>n</code>. <code>ACTION_Pk(Foo, p1, ..., pk) { statements; }</code> Defines a parameterized action <code>Foo(p1, ..., pk)</code> to execute the given <code>statements</code>. <p>The <code>ACTION*</code> macros cannot be used inside a function or class.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html","title":"Assertions Reference","text":"<p>This page lists the assertion macros provided by GoogleTest for verifying code behavior. To use them, include the header <code>gtest/gtest.h</code>.</p> <p>The majority of the macros listed below come as a pair with an <code>EXPECT_</code> variant and an <code>ASSERT_</code> variant. Upon failure, <code>EXPECT_</code> macros generate nonfatal failures and allow the current function to continue running, while <code>ASSERT_</code> macros generate fatal failures and abort the current function.</p> <p>All assertion macros support streaming a custom failure message into them with the <code>&lt;&lt;</code> operator, for example:</p> <pre><code>EXPECT_TRUE(my_condition) &lt;&lt; \"My condition is not true\";\n</code></pre> <p>Anything that can be streamed to an <code>ostream</code> can be streamed to an assertion macro\u2014in particular, C strings and string objects. If a wide string (<code>wchar_t*</code>, <code>TCHAR*</code> in <code>UNICODE</code> mode on Windows, or <code>std::wstring</code>) is streamed to an assertion, it will be translated to UTF-8 when printed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#explicit-success-and-failure-success-failure","title":"Explicit Success and Failure {#success-failure}","text":"<p>The assertions in this section generate a success or failure directly instead of testing a value or expression. These are useful when control flow, rather than a Boolean expression, determines the test's success or failure, as shown by the following example:</p> <pre><code>switch(expression) {\n  case 1:\n    ... some checks ...\n  case 2:\n    ... some other checks ...\n  default:\n    FAIL() &lt;&lt; \"We shouldn't get here.\";\n}\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#succeed-succeed","title":"SUCCEED {#SUCCEED}","text":"<p><code>SUCCEED()</code></p> <p>Generates a success. This does not make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.</p> <p>The <code>SUCCEED</code> assertion is purely documentary and currently doesn't generate any user-visible output. However, we may add <code>SUCCEED</code> messages to GoogleTest output in the future.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#fail-fail","title":"FAIL {#FAIL}","text":"<p><code>FAIL()</code></p> <p>Generates a fatal failure, which returns from the current function.</p> <p>Can only be used in functions that return <code>void</code>. See Assertion Placement for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#add_failure-add_failure","title":"ADD_FAILURE {#ADD_FAILURE}","text":"<p><code>ADD_FAILURE()</code></p> <p>Generates a nonfatal failure, which allows the current function to continue running.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#add_failure_at-add_failure_at","title":"ADD_FAILURE_AT {#ADD_FAILURE_AT}","text":"<p><code>ADD_FAILURE_AT(</code><code>file_path</code><code>,</code><code>line_number</code><code>)</code></p> <p>Generates a nonfatal failure at the file and line number specified.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#generalized-assertion-generalized","title":"Generalized Assertion {#generalized}","text":"<p>The following assertion allows matchers to be used to verify values.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_that-expect_that","title":"EXPECT_THAT {#EXPECT_THAT}","text":"<p><code>EXPECT_THAT(</code><code>value</code><code>,</code><code>matcher</code><code>)</code> \\ <code>ASSERT_THAT(</code><code>value</code><code>,</code><code>matcher</code><code>)</code></p> <p>Verifies that <code>value</code> matches the matcher <code>matcher</code>.</p> <p>For example, the following code verifies that the string <code>value1</code> starts with <code>\"Hello\"</code>, <code>value2</code> matches a regular expression, and <code>value3</code> is between 5 and 10:</p> <pre><code>#include \"gmock/gmock.h\"\n\nusing ::testing::AllOf;\nusing ::testing::Gt;\nusing ::testing::Lt;\nusing ::testing::MatchesRegex;\nusing ::testing::StartsWith;\n\n...\nEXPECT_THAT(value1, StartsWith(\"Hello\"));\nEXPECT_THAT(value2, MatchesRegex(\"Line \\\\d+\"));\nASSERT_THAT(value3, AllOf(Gt(5), Lt(10)));\n</code></pre> <p>Matchers enable assertions of this form to read like English and generate informative failure messages. For example, if the above assertion on <code>value1</code> fails, the resulting message will be similar to the following:</p> <pre><code>Value of: value1\n  Actual: \"Hi, world!\"\nExpected: starts with \"Hello\"\n</code></pre> <p>GoogleTest provides a built-in library of matchers\u2014see the Matchers Reference. It is also possible to write your own matchers\u2014see Writing New Matchers Quickly. The use of matchers makes <code>EXPECT_THAT</code> a powerful, extensible assertion.</p> <p>The idea for this assertion was borrowed from Joe Walnes' Hamcrest project, which adds <code>assertThat()</code> to JUnit.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#boolean-conditions-boolean","title":"Boolean Conditions {#boolean}","text":"<p>The following assertions test Boolean conditions.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_true-expect_true","title":"EXPECT_TRUE {#EXPECT_TRUE}","text":"<p><code>EXPECT_TRUE(</code><code>condition</code><code>)</code> \\ <code>ASSERT_TRUE(</code><code>condition</code><code>)</code></p> <p>Verifies that <code>condition</code> is true.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_false-expect_false","title":"EXPECT_FALSE {#EXPECT_FALSE}","text":"<p><code>EXPECT_FALSE(</code><code>condition</code><code>)</code> \\ <code>ASSERT_FALSE(</code><code>condition</code><code>)</code></p> <p>Verifies that <code>condition</code> is false.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#binary-comparison-binary-comparison","title":"Binary Comparison {#binary-comparison}","text":"<p>The following assertions compare two values. The value arguments must be comparable by the assertion's comparison operator, otherwise a compiler error will result.</p> <p>If an argument supports the <code>&lt;&lt;</code> operator, it will be called to print the argument when the assertion fails. Otherwise, GoogleTest will attempt to print them in the best way it can\u2014see Teaching GoogleTest How to Print Your Values.</p> <p>Arguments are always evaluated exactly once, so it's OK for the arguments to have side effects. However, the argument evaluation order is undefined and programs should not depend on any particular argument evaluation order.</p> <p>These assertions work with both narrow and wide string objects (<code>string</code> and <code>wstring</code>).</p> <p>See also the Floating-Point Comparison assertions to compare floating-point numbers and avoid problems caused by rounding.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_eq-expect_eq","title":"EXPECT_EQ {#EXPECT_EQ}","text":"<p><code>EXPECT_EQ(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_EQ(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that <code>val1</code><code>==</code><code>val2</code>.</p> <p>Does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Use <code>EXPECT_STREQ</code> to compare C strings (e.g. <code>const char*</code>) by value.</p> <p>When comparing a pointer to <code>NULL</code>, use <code>EXPECT_EQ(</code><code>ptr</code><code>, nullptr)</code> instead of <code>EXPECT_EQ(</code><code>ptr</code><code>, NULL)</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_ne-expect_ne","title":"EXPECT_NE {#EXPECT_NE}","text":"<p><code>EXPECT_NE(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_NE(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that <code>val1</code><code>!=</code><code>val2</code>.</p> <p>Does pointer equality on pointers. If used on two C strings, it tests if they are in different memory locations, not if they have different values. Use <code>EXPECT_STRNE</code> to compare C strings (e.g. <code>const char*</code>) by value.</p> <p>When comparing a pointer to <code>NULL</code>, use <code>EXPECT_NE(</code><code>ptr</code><code>, nullptr)</code> instead of <code>EXPECT_NE(</code><code>ptr</code><code>, NULL)</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_lt-expect_lt","title":"EXPECT_LT {#EXPECT_LT}","text":"<p><code>EXPECT_LT(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_LT(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that <code>val1</code><code>&lt;</code><code>val2</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_le-expect_le","title":"EXPECT_LE {#EXPECT_LE}","text":"<p><code>EXPECT_LE(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_LE(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that <code>val1</code><code>&lt;=</code><code>val2</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_gt-expect_gt","title":"EXPECT_GT {#EXPECT_GT}","text":"<p><code>EXPECT_GT(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_GT(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that <code>val1</code><code>&gt;</code><code>val2</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_ge-expect_ge","title":"EXPECT_GE {#EXPECT_GE}","text":"<p><code>EXPECT_GE(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_GE(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that <code>val1</code><code>&gt;=</code><code>val2</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#string-comparison-c-strings","title":"String Comparison {#c-strings}","text":"<p>The following assertions compare two C strings. To compare two <code>string</code> objects, use <code>EXPECT_EQ</code> or <code>EXPECT_NE</code> instead.</p> <p>These assertions also accept wide C strings (<code>wchar_t*</code>). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings.</p> <p>To compare a C string with <code>NULL</code>, use <code>EXPECT_EQ(</code><code>c_string</code><code>, nullptr)</code> or <code>EXPECT_NE(</code><code>c_string</code><code>, nullptr)</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_streq-expect_streq","title":"EXPECT_STREQ {#EXPECT_STREQ}","text":"<p><code>EXPECT_STREQ(</code><code>str1</code><code>,</code><code>str2</code><code>)</code> \\ <code>ASSERT_STREQ(</code><code>str1</code><code>,</code><code>str2</code><code>)</code></p> <p>Verifies that the two C strings <code>str1</code> and <code>str2</code> have the same contents.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_strne-expect_strne","title":"EXPECT_STRNE {#EXPECT_STRNE}","text":"<p><code>EXPECT_STRNE(</code><code>str1</code><code>,</code><code>str2</code><code>)</code> \\ <code>ASSERT_STRNE(</code><code>str1</code><code>,</code><code>str2</code><code>)</code></p> <p>Verifies that the two C strings <code>str1</code> and <code>str2</code> have different contents.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_strcaseeq-expect_strcaseeq","title":"EXPECT_STRCASEEQ {#EXPECT_STRCASEEQ}","text":"<p><code>EXPECT_STRCASEEQ(</code><code>str1</code><code>,</code><code>str2</code><code>)</code> \\ <code>ASSERT_STRCASEEQ(</code><code>str1</code><code>,</code><code>str2</code><code>)</code></p> <p>Verifies that the two C strings <code>str1</code> and <code>str2</code> have the same contents, ignoring case.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_strcasene-expect_strcasene","title":"EXPECT_STRCASENE {#EXPECT_STRCASENE}","text":"<p><code>EXPECT_STRCASENE(</code><code>str1</code><code>,</code><code>str2</code><code>)</code> \\ <code>ASSERT_STRCASENE(</code><code>str1</code><code>,</code><code>str2</code><code>)</code></p> <p>Verifies that the two C strings <code>str1</code> and <code>str2</code> have different contents, ignoring case.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#floating-point-comparison-floating-point","title":"Floating-Point Comparison {#floating-point}","text":"<p>The following assertions compare two floating-point values.</p> <p>Due to rounding errors, it is very unlikely that two floating-point values will match exactly, so <code>EXPECT_EQ</code> is not suitable. In general, for floating-point comparison to make sense, the user needs to carefully choose the error bound.</p> <p>GoogleTest also provides assertions that use a default error bound based on Units in the Last Place (ULPs). To learn more about ULPs, see the article Comparing Floating Point Numbers.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_float_eq-expect_float_eq","title":"EXPECT_FLOAT_EQ {#EXPECT_FLOAT_EQ}","text":"<p><code>EXPECT_FLOAT_EQ(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_FLOAT_EQ(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that the two <code>float</code> values <code>val1</code> and <code>val2</code> are approximately equal, to within 4 ULPs from each other.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_double_eq-expect_double_eq","title":"EXPECT_DOUBLE_EQ {#EXPECT_DOUBLE_EQ}","text":"<p><code>EXPECT_DOUBLE_EQ(</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_DOUBLE_EQ(</code><code>val1</code><code>,</code><code>val2</code><code>)</code></p> <p>Verifies that the two <code>double</code> values <code>val1</code> and <code>val2</code> are approximately equal, to within 4 ULPs from each other.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_near-expect_near","title":"EXPECT_NEAR {#EXPECT_NEAR}","text":"<p><code>EXPECT_NEAR(</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>abs_error</code><code>)</code> \\ <code>ASSERT_NEAR(</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>abs_error</code><code>)</code></p> <p>Verifies that the difference between <code>val1</code> and <code>val2</code> does not exceed the absolute error bound <code>abs_error</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#exception-assertions-exceptions","title":"Exception Assertions {#exceptions}","text":"<p>The following assertions verify that a piece of code throws, or does not throw, an exception. Usage requires exceptions to be enabled in the build environment.</p> <p>Note that the piece of code under test can be a compound statement, for example:</p> <pre><code>EXPECT_NO_THROW({\n  int n = 5;\n  DoSomething(&amp;n);\n});\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_throw-expect_throw","title":"EXPECT_THROW {#EXPECT_THROW}","text":"<p><code>EXPECT_THROW(</code><code>statement</code><code>,</code><code>exception_type</code><code>)</code> \\ <code>ASSERT_THROW(</code><code>statement</code><code>,</code><code>exception_type</code><code>)</code></p> <p>Verifies that <code>statement</code> throws an exception of type <code>exception_type</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_any_throw-expect_any_throw","title":"EXPECT_ANY_THROW {#EXPECT_ANY_THROW}","text":"<p><code>EXPECT_ANY_THROW(</code><code>statement</code><code>)</code> \\ <code>ASSERT_ANY_THROW(</code><code>statement</code><code>)</code></p> <p>Verifies that <code>statement</code> throws an exception of any type.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_no_throw-expect_no_throw","title":"EXPECT_NO_THROW {#EXPECT_NO_THROW}","text":"<p><code>EXPECT_NO_THROW(</code><code>statement</code><code>)</code> \\ <code>ASSERT_NO_THROW(</code><code>statement</code><code>)</code></p> <p>Verifies that <code>statement</code> does not throw any exception.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#predicate-assertions-predicates","title":"Predicate Assertions {#predicates}","text":"<p>The following assertions enable more complex predicates to be verified while printing a more clear failure message than if <code>EXPECT_TRUE</code> were used alone.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_pred-expect_pred","title":"EXPECT_PRED* {#EXPECT_PRED}","text":"<p><code>EXPECT_PRED1(</code><code>pred</code><code>,</code><code>val1</code><code>)</code> \\ <code>EXPECT_PRED2(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>EXPECT_PRED3(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>)</code> \\ <code>EXPECT_PRED4(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>)</code> \\ <code>EXPECT_PRED5(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>,</code><code>val5</code><code>)</code></p> <p><code>ASSERT_PRED1(</code><code>pred</code><code>,</code><code>val1</code><code>)</code> \\ <code>ASSERT_PRED2(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_PRED3(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>)</code> \\ <code>ASSERT_PRED4(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>)</code> \\ <code>ASSERT_PRED5(</code><code>pred</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>,</code><code>val5</code><code>)</code></p> <p>Verifies that the predicate <code>pred</code> returns <code>true</code> when passed the given values as arguments.</p> <p>The parameter <code>pred</code> is a function or functor that accepts as many arguments as the corresponding macro accepts values. If <code>pred</code> returns <code>true</code> for the given arguments, the assertion succeeds, otherwise the assertion fails.</p> <p>When the assertion fails, it prints the value of each argument. Arguments are always evaluated exactly once.</p> <p>As an example, see the following code:</p> <pre><code>// Returns true if m and n have no common divisors except 1.\nbool MutuallyPrime(int m, int n) { ... }\n...\nconst int a = 3;\nconst int b = 4;\nconst int c = 10;\n...\nEXPECT_PRED2(MutuallyPrime, a, b);  // Succeeds\nEXPECT_PRED2(MutuallyPrime, b, c);  // Fails\n</code></pre> <p>In the above example, the first assertion succeeds, and the second fails with the following message:</p> <pre><code>MutuallyPrime(b, c) is false, where\nb is 4\nc is 10\n</code></pre> <p>Note that if the given predicate is an overloaded function or a function template, the assertion macro might not be able to determine which version to use, and it might be necessary to explicitly specify the type of the function. For example, for a Boolean function <code>IsPositive()</code> overloaded to take either a single <code>int</code> or <code>double</code> argument, it would be necessary to write one of the following:</p> <pre><code>EXPECT_PRED1(static_cast&lt;bool (*)(int)&gt;(IsPositive), 5);\nEXPECT_PRED1(static_cast&lt;bool (*)(double)&gt;(IsPositive), 3.14);\n</code></pre> <p>Writing simply <code>EXPECT_PRED1(IsPositive, 5);</code> would result in a compiler error. Similarly, to use a template function, specify the template arguments:</p> <pre><code>template &lt;typename T&gt;\nbool IsNegative(T x) {\n  return x &lt; 0;\n}\n...\nEXPECT_PRED1(IsNegative&lt;int&gt;, -5);  // Must specify type for IsNegative\n</code></pre> <p>If a template has multiple parameters, wrap the predicate in parentheses so the macro arguments are parsed correctly:</p> <pre><code>ASSERT_PRED2((MyPredicate&lt;int, int&gt;), 5, 0);\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_pred_format-expect_pred_format","title":"EXPECT_PRED_FORMAT* {#EXPECT_PRED_FORMAT}","text":"<p><code>EXPECT_PRED_FORMAT1(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>)</code> \\ <code>EXPECT_PRED_FORMAT2(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>EXPECT_PRED_FORMAT3(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>)</code> \\ <code>EXPECT_PRED_FORMAT4(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>)</code> \\ <code>EXPECT_PRED_FORMAT5(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>,</code><code>val5</code><code>)</code></p> <p><code>ASSERT_PRED_FORMAT1(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>)</code> \\ <code>ASSERT_PRED_FORMAT2(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>)</code> \\ <code>ASSERT_PRED_FORMAT3(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>)</code> \\ <code>ASSERT_PRED_FORMAT4(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>)</code> \\ <code>ASSERT_PRED_FORMAT5(</code><code>pred_formatter</code><code>,</code><code>val1</code><code>,</code><code>val2</code><code>,</code><code>val3</code><code>,</code><code>val4</code><code>,</code><code>val5</code><code>)</code></p> <p>Verifies that the predicate <code>pred_formatter</code> succeeds when passed the given values as arguments.</p> <p>The parameter <code>pred_formatter</code> is a predicate-formatter, which is a function or functor with the signature:</p> <pre><code>testing::AssertionResult PredicateFormatter(const char* expr1,\n                                            const char* expr2,\n                                            ...\n                                            const char* exprn,\n                                            T1 val1,\n                                            T2 val2,\n                                            ...\n                                            Tn valn);\n</code></pre> <p>where <code>val1</code>, <code>val2</code>, ..., <code>valn</code> are the values of the predicate arguments, and <code>expr1</code>, <code>expr2</code>, ..., <code>exprn</code> are the corresponding expressions as they appear in the source code. The types <code>T1</code>, <code>T2</code>, ..., <code>Tn</code> can be either value types or reference types; if an argument has type <code>T</code>, it can be declared as either <code>T</code> or <code>const T&amp;</code>, whichever is appropriate. For more about the return type <code>testing::AssertionResult</code>, see Using a Function That Returns an AssertionResult.</p> <p>As an example, see the following code:</p> <pre><code>// Returns the smallest prime common divisor of m and n,\n// or 1 when m and n are mutually prime.\nint SmallestPrimeCommonDivisor(int m, int n) { ... }\n\n// Returns true if m and n have no common divisors except 1.\nbool MutuallyPrime(int m, int n) { ... }\n\n// A predicate-formatter for asserting that two integers are mutually prime.\ntesting::AssertionResult AssertMutuallyPrime(const char* m_expr,\n                                             const char* n_expr,\n                                             int m,\n                                             int n) {\n  if (MutuallyPrime(m, n)) return testing::AssertionSuccess();\n\n  return testing::AssertionFailure() &lt;&lt; m_expr &lt;&lt; \" and \" &lt;&lt; n_expr\n      &lt;&lt; \" (\" &lt;&lt; m &lt;&lt; \" and \" &lt;&lt; n &lt;&lt; \") are not mutually prime, \"\n      &lt;&lt; \"as they have a common divisor \" &lt;&lt; SmallestPrimeCommonDivisor(m, n);\n}\n\n...\nconst int a = 3;\nconst int b = 4;\nconst int c = 10;\n...\nEXPECT_PRED_FORMAT2(AssertMutuallyPrime, a, b);  // Succeeds\nEXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);  // Fails\n</code></pre> <p>In the above example, the final assertion fails and the predicate-formatter produces the following failure message:</p> <pre><code>b and c (4 and 10) are not mutually prime, as they have a common divisor 2\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#windows-hresult-assertions-hresult","title":"Windows HRESULT Assertions {#HRESULT}","text":"<p>The following assertions test for <code>HRESULT</code> success or failure. For example:</p> <pre><code>CComPtr&lt;IShellDispatch2&gt; shell;\nASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L\"Shell.Application\"));\nCComVariant empty;\nASSERT_HRESULT_SUCCEEDED(shell-&gt;ShellExecute(CComBSTR(url), empty, empty, empty, empty));\n</code></pre> <p>The generated output contains the human-readable error message associated with the returned <code>HRESULT</code> code.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_hresult_succeeded-expect_hresult_succeeded","title":"EXPECT_HRESULT_SUCCEEDED {#EXPECT_HRESULT_SUCCEEDED}","text":"<p><code>EXPECT_HRESULT_SUCCEEDED(</code><code>expression</code><code>)</code> \\ <code>ASSERT_HRESULT_SUCCEEDED(</code><code>expression</code><code>)</code></p> <p>Verifies that <code>expression</code> is a success <code>HRESULT</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_hresult_failed-expect_hresult_failed","title":"EXPECT_HRESULT_FAILED {#EXPECT_HRESULT_FAILED}","text":"<p><code>EXPECT_HRESULT_FAILED(</code><code>expression</code><code>)</code> \\ <code>EXPECT_HRESULT_FAILED(</code><code>expression</code><code>)</code></p> <p>Verifies that <code>expression</code> is a failure <code>HRESULT</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#death-assertions-death","title":"Death Assertions {#death}","text":"<p>The following assertions verify that a piece of code causes the process to terminate. For context, see Death Tests.</p> <p>These assertions spawn a new process and execute the code under test in that process. How that happens depends on the platform and the variable <code>::testing::GTEST_FLAG(death_test_style)</code>, which is initialized from the command-line flag <code>--gtest_death_test_style</code>.</p> <ul> <li>On POSIX systems, <code>fork()</code> (or <code>clone()</code> on Linux) is used to spawn the     child, after which:<ul> <li>If the variable's value is <code>\"fast\"</code>, the death test statement is     immediately executed.</li> <li>If the variable's value is <code>\"threadsafe\"</code>, the child process re-executes     the unit test binary just as it was originally invoked, but with some     extra flags to cause just the single death test under consideration to     be run.</li> </ul> </li> <li>On Windows, the child is spawned using the <code>CreateProcess()</code> API, and     re-executes the binary to cause just the single death test under     consideration to be run - much like the <code>\"threadsafe\"</code> mode on POSIX.</li> </ul> <p>Other values for the variable are illegal and will cause the death test to fail. Currently, the flag's default value is <code>\"fast\"</code>.</p> <p>If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.</p> <p>Note that the piece of code under test can be a compound statement, for example:</p> <pre><code>EXPECT_DEATH({\n  int n = 5;\n  DoSomething(&amp;n);\n}, \"Error on line .* of DoSomething()\");\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_death-expect_death","title":"EXPECT_DEATH {#EXPECT_DEATH}","text":"<p><code>EXPECT_DEATH(</code><code>statement</code><code>,</code><code>matcher</code><code>)</code> \\ <code>ASSERT_DEATH(</code><code>statement</code><code>,</code><code>matcher</code><code>)</code></p> <p>Verifies that <code>statement</code> causes the process to terminate with a nonzero exit status and produces <code>stderr</code> output that matches <code>matcher</code>.</p> <p>The parameter <code>matcher</code> is either a matcher for a <code>const std::string&amp;</code>, or a regular expression (see Regular Expression Syntax)\u2014a bare string <code>s</code> (with no matcher) is treated as <code>ContainsRegex(s)</code>, not <code>Eq(s)</code>.</p> <p>For example, the following code verifies that calling <code>DoSomething(42)</code> causes the process to die with an error message that contains the text <code>My error</code>:</p> <pre><code>EXPECT_DEATH(DoSomething(42), \"My error\");\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_death_if_supported-expect_death_if_supported","title":"EXPECT_DEATH_IF_SUPPORTED {#EXPECT_DEATH_IF_SUPPORTED}","text":"<p><code>EXPECT_DEATH_IF_SUPPORTED(</code><code>statement</code><code>,</code><code>matcher</code><code>)</code> \\ <code>ASSERT_DEATH_IF_SUPPORTED(</code><code>statement</code><code>,</code><code>matcher</code><code>)</code></p> <p>If death tests are supported, behaves the same as <code>EXPECT_DEATH</code>. Otherwise, verifies nothing.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_debug_death-expect_debug_death","title":"EXPECT_DEBUG_DEATH {#EXPECT_DEBUG_DEATH}","text":"<p><code>EXPECT_DEBUG_DEATH(</code><code>statement</code><code>,</code><code>matcher</code><code>)</code> \\ <code>ASSERT_DEBUG_DEATH(</code><code>statement</code><code>,</code><code>matcher</code><code>)</code></p> <p>In debug mode, behaves the same as <code>EXPECT_DEATH</code>. When not in debug mode (i.e. <code>NDEBUG</code> is defined), just executes <code>statement</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/assertions.html#expect_exit-expect_exit","title":"EXPECT_EXIT {#EXPECT_EXIT}","text":"<p><code>EXPECT_EXIT(</code><code>statement</code><code>,</code><code>predicate</code><code>,</code><code>matcher</code><code>)</code> \\ <code>ASSERT_EXIT(</code><code>statement</code><code>,</code><code>predicate</code><code>,</code><code>matcher</code><code>)</code></p> <p>Verifies that <code>statement</code> causes the process to terminate with an exit status that satisfies <code>predicate</code>, and produces <code>stderr</code> output that matches <code>matcher</code>.</p> <p>The parameter <code>predicate</code> is a function or functor that accepts an <code>int</code> exit status and returns a <code>bool</code>. GoogleTest provides two predicates to handle common cases:</p> <pre><code>// Returns true if the program exited normally with the given exit status code.\n::testing::ExitedWithCode(exit_code);\n\n// Returns true if the program was killed by the given signal.\n// Not available on Windows.\n::testing::KilledBySignal(signal_number);\n</code></pre> <p>The parameter <code>matcher</code> is either a matcher for a <code>const std::string&amp;</code>, or a regular expression (see Regular Expression Syntax)\u2014a bare string <code>s</code> (with no matcher) is treated as <code>ContainsRegex(s)</code>, not <code>Eq(s)</code>.</p> <p>For example, the following code verifies that calling <code>NormalExit()</code> causes the process to print a message containing the text <code>Success</code> to <code>stderr</code> and exit with exit status code 0:</p> <pre><code>EXPECT_EXIT(NormalExit(), testing::ExitedWithCode(0), \"Success\");\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/matchers.html","title":"Matchers Reference","text":"<p>A matcher matches a single argument. You can use it inside <code>ON_CALL()</code> or <code>EXPECT_CALL()</code>, or use it to validate a value directly using two macros:</p> Macro Description <code>EXPECT_THAT(actual_value, matcher)</code> Asserts that <code>actual_value</code> matches <code>matcher</code>. <code>ASSERT_THAT(actual_value, matcher)</code> The same as <code>EXPECT_THAT(actual_value, matcher)</code>, except that it generates a fatal failure. <p>{: .callout .note} Note: Although equality matching via <code>EXPECT_THAT(actual_value, expected_value)</code> is supported, prefer to make the comparison explicit via <code>EXPECT_THAT(actual_value, Eq(expected_value))</code> or <code>EXPECT_EQ(actual_value, expected_value)</code>.</p> <p>Built-in matchers (where <code>argument</code> is the function argument, e.g. <code>actual_value</code> in the example above, or when used in the context of <code>EXPECT_CALL(mock_object, method(matchers))</code>, the arguments of <code>method</code>) are divided into several categories. All matchers are defined in the <code>::testing</code> namespace unless otherwise noted.</p>"},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#wildcard","title":"Wildcard","text":"Matcher Description <code>_</code> <code>argument</code> can be any value of the correct type. <code>A&lt;type&gt;()</code> or <code>An&lt;type&gt;()</code> <code>argument</code> can be any value of type <code>type</code>."},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#generic-comparison","title":"Generic Comparison","text":"Matcher Description <code>Eq(value)</code> or <code>value</code> <code>argument == value</code> <code>Ge(value)</code> <code>argument &gt;= value</code> <code>Gt(value)</code> <code>argument &gt; value</code> <code>Le(value)</code> <code>argument &lt;= value</code> <code>Lt(value)</code> <code>argument &lt; value</code> <code>Ne(value)</code> <code>argument != value</code> <code>IsFalse()</code> <code>argument</code> evaluates to <code>false</code> in a Boolean context. <code>IsTrue()</code> <code>argument</code> evaluates to <code>true</code> in a Boolean context. <code>IsNull()</code> <code>argument</code> is a <code>NULL</code> pointer (raw or smart). <code>NotNull()</code> <code>argument</code> is a non-null pointer (raw or smart). <code>Optional(m)</code> <code>argument</code> is <code>optional&lt;&gt;</code> that contains a value matching <code>m</code>. (For testing whether an <code>optional&lt;&gt;</code> is set, check for equality with <code>nullopt</code>. You may need to use <code>Eq(nullopt)</code> if the inner type doesn't have <code>==</code>.) <code>VariantWith&lt;T&gt;(m)</code> <code>argument</code> is <code>variant&lt;&gt;</code> that holds the alternative of type T with a value matching <code>m</code>. <code>Ref(variable)</code> <code>argument</code> is a reference to <code>variable</code>. <code>TypedEq&lt;type&gt;(value)</code> <code>argument</code> has type <code>type</code> and is equal to <code>value</code>. You may need to use this instead of <code>Eq(value)</code> when the mock function is overloaded. <p>Except <code>Ref()</code>, these matchers make a copy of <code>value</code> in case it's modified or destructed later. If the compiler complains that <code>value</code> doesn't have a public copy constructor, try wrap it in <code>std::ref()</code>, e.g. <code>Eq(std::ref(non_copyable_value))</code>. If you do that, make sure <code>non_copyable_value</code> is not changed afterwards, or the meaning of your matcher will be changed.</p> <p><code>IsTrue</code> and <code>IsFalse</code> are useful when you need to use a matcher, or for types that can be explicitly converted to Boolean, but are not implicitly converted to Boolean. In other cases, you can use the basic <code>EXPECT_TRUE</code> and <code>EXPECT_FALSE</code> assertions.</p>"},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#floating-point-matchers-fpmatchers","title":"Floating-Point Matchers {#FpMatchers}","text":"Matcher Description <code>DoubleEq(a_double)</code> <code>argument</code> is a <code>double</code> value approximately equal to <code>a_double</code>, treating two NaNs as unequal. <code>FloatEq(a_float)</code> <code>argument</code> is a <code>float</code> value approximately equal to <code>a_float</code>, treating two NaNs as unequal. <code>NanSensitiveDoubleEq(a_double)</code> <code>argument</code> is a <code>double</code> value approximately equal to <code>a_double</code>, treating two NaNs as equal. <code>NanSensitiveFloatEq(a_float)</code> <code>argument</code> is a <code>float</code> value approximately equal to <code>a_float</code>, treating two NaNs as equal. <code>IsNan()</code> <code>argument</code> is any floating-point type with a NaN value. <p>The above matchers use ULP-based comparison (the same as used in googletest). They automatically pick a reasonable error bound based on the absolute value of the expected value. <code>DoubleEq()</code> and <code>FloatEq()</code> conform to the IEEE standard, which requires comparing two NaNs for equality to return false. The <code>NanSensitive*</code> version instead treats two NaNs as equal, which is often what a user wants.</p> Matcher Description <code>DoubleNear(a_double, max_abs_error)</code> <code>argument</code> is a <code>double</code> value close to <code>a_double</code> (absolute error &lt;= <code>max_abs_error</code>), treating two NaNs as unequal. <code>FloatNear(a_float, max_abs_error)</code> <code>argument</code> is a <code>float</code> value close to <code>a_float</code> (absolute error &lt;= <code>max_abs_error</code>), treating two NaNs as unequal. <code>NanSensitiveDoubleNear(a_double, max_abs_error)</code> <code>argument</code> is a <code>double</code> value close to <code>a_double</code> (absolute error &lt;= <code>max_abs_error</code>), treating two NaNs as equal. <code>NanSensitiveFloatNear(a_float, max_abs_error)</code> <code>argument</code> is a <code>float</code> value close to <code>a_float</code> (absolute error &lt;= <code>max_abs_error</code>), treating two NaNs as equal."},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#string-matchers","title":"String Matchers","text":"<p>The <code>argument</code> can be either a C string or a C++ string object:</p> Matcher Description <code>ContainsRegex(string)</code> <code>argument</code> matches the given regular expression. <code>EndsWith(suffix)</code> <code>argument</code> ends with string <code>suffix</code>. <code>HasSubstr(string)</code> <code>argument</code> contains <code>string</code> as a sub-string. <code>IsEmpty()</code> <code>argument</code> is an empty string. <code>MatchesRegex(string)</code> <code>argument</code> matches the given regular expression with the match starting at the first character and ending at the last character. <code>StartsWith(prefix)</code> <code>argument</code> starts with string <code>prefix</code>. <code>StrCaseEq(string)</code> <code>argument</code> is equal to <code>string</code>, ignoring case. <code>StrCaseNe(string)</code> <code>argument</code> is not equal to <code>string</code>, ignoring case. <code>StrEq(string)</code> <code>argument</code> is equal to <code>string</code>. <code>StrNe(string)</code> <code>argument</code> is not equal to <code>string</code>. <p><code>ContainsRegex()</code> and <code>MatchesRegex()</code> take ownership of the <code>RE</code> object. They use the regular expression syntax defined here. All of these matchers, except <code>ContainsRegex()</code> and <code>MatchesRegex()</code> work for wide strings as well.</p>"},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#container-matchers","title":"Container Matchers","text":"<p>Most STL-style containers support <code>==</code>, so you can use <code>Eq(expected_container)</code> or simply <code>expected_container</code> to match a container exactly. If you want to write the elements in-line, match them more flexibly, or get more informative messages, you can use:</p> Matcher Description <code>BeginEndDistanceIs(m)</code> <code>argument</code> is a container whose <code>begin()</code> and <code>end()</code> iterators are separated by a number of increments matching <code>m</code>. E.g. <code>BeginEndDistanceIs(2)</code> or <code>BeginEndDistanceIs(Lt(2))</code>. For containers that define a <code>size()</code> method, <code>SizeIs(m)</code> may be more efficient. <code>ContainerEq(container)</code> The same as <code>Eq(container)</code> except that the failure message also includes which elements are in one container but not the other. <code>Contains(e)</code> <code>argument</code> contains an element that matches <code>e</code>, which can be either a value or a matcher. <code>Each(e)</code> <code>argument</code> is a container where every element matches <code>e</code>, which can be either a value or a matcher. <code>ElementsAre(e0, e1, ..., en)</code> <code>argument</code> has <code>n + 1</code> elements, where the i-th element matches <code>ei</code>, which can be a value or a matcher. <code>ElementsAreArray({e0, e1, ..., en})</code>, <code>ElementsAreArray(a_container)</code>, <code>ElementsAreArray(begin, end)</code>, <code>ElementsAreArray(array)</code>, or <code>ElementsAreArray(array, count)</code> The same as <code>ElementsAre()</code> except that the expected element values/matchers come from an initializer list, STL-style container, iterator range, or C-style array. <code>IsEmpty()</code> <code>argument</code> is an empty container (<code>container.empty()</code>). <code>IsSubsetOf({e0, e1, ..., en})</code>, <code>IsSubsetOf(a_container)</code>, <code>IsSubsetOf(begin, end)</code>, <code>IsSubsetOf(array)</code>, or <code>IsSubsetOf(array, count)</code> <code>argument</code> matches <code>UnorderedElementsAre(x0, x1, ..., xk)</code> for some subset <code>{x0, x1, ..., xk}</code> of the expected matchers. <code>IsSupersetOf({e0, e1, ..., en})</code>, <code>IsSupersetOf(a_container)</code>, <code>IsSupersetOf(begin, end)</code>, <code>IsSupersetOf(array)</code>, or <code>IsSupersetOf(array, count)</code> Some subset of <code>argument</code> matches <code>UnorderedElementsAre(</code>expected matchers<code>)</code>. <code>Pointwise(m, container)</code>, <code>Pointwise(m, {e0, e1, ..., en})</code> <code>argument</code> contains the same number of elements as in <code>container</code>, and for all i, (the i-th element in <code>argument</code>, the i-th element in <code>container</code>) match <code>m</code>, which is a matcher on 2-tuples. E.g. <code>Pointwise(Le(), upper_bounds)</code> verifies that each element in <code>argument</code> doesn't exceed the corresponding element in <code>upper_bounds</code>. See more detail below. <code>SizeIs(m)</code> <code>argument</code> is a container whose size matches <code>m</code>. E.g. <code>SizeIs(2)</code> or <code>SizeIs(Lt(2))</code>. <code>UnorderedElementsAre(e0, e1, ..., en)</code> <code>argument</code> has <code>n + 1</code> elements, and under some permutation of the elements, each element matches an <code>ei</code> (for a different <code>i</code>), which can be a value or a matcher. <code>UnorderedElementsAreArray({e0, e1, ..., en})</code>, <code>UnorderedElementsAreArray(a_container)</code>, <code>UnorderedElementsAreArray(begin, end)</code>, <code>UnorderedElementsAreArray(array)</code>, or <code>UnorderedElementsAreArray(array, count)</code> The same as <code>UnorderedElementsAre()</code> except that the expected element values/matchers come from an initializer list, STL-style container, iterator range, or C-style array. <code>UnorderedPointwise(m, container)</code>, <code>UnorderedPointwise(m, {e0, e1, ..., en})</code> Like <code>Pointwise(m, container)</code>, but ignores the order of elements. <code>WhenSorted(m)</code> When <code>argument</code> is sorted using the <code>&lt;</code> operator, it matches container matcher <code>m</code>. E.g. <code>WhenSorted(ElementsAre(1, 2, 3))</code> verifies that <code>argument</code> contains elements 1, 2, and 3, ignoring order. <code>WhenSortedBy(comparator, m)</code> The same as <code>WhenSorted(m)</code>, except that the given comparator instead of <code>&lt;</code> is used to sort <code>argument</code>. E.g. <code>WhenSortedBy(std::greater(), ElementsAre(3, 2, 1))</code>. <p>Notes:</p> <ul> <li>These matchers can also match:<ol> <li>a native array passed by reference (e.g. in <code>Foo(const int (&amp;a)[5])</code>),     and</li> <li>an array passed as a pointer and a count (e.g. in <code>Bar(const T* captured_cout,     int len)</code> -- see Multi-argument Matchers).</li> </ol> </li> <li>The array being matched may be multi-dimensional (i.e. its elements can be     arrays).</li> <li> <p><code>m</code> in <code>Pointwise(m, ...)</code> and <code>UnorderedPointwise(m, ...)</code> should be a     matcher for <code>::std::tuple&lt;T, U&gt;</code> where <code>T</code> and <code>U</code> are the element type of     the actual container and the expected container, respectively. For example,     to compare two <code>Foo</code> containers where <code>Foo</code> doesn't support <code>operator==</code>,     one might write:</p> <p><code>cpp using ::std::get; MATCHER(FooEq, \"\") {   return std::get&lt;0&gt;(arg).Equals(std::get&lt;1&gt;(arg)); } ... EXPECT_THAT(actual_foos, Pointwise(FooEq(), expected_foos));</code></p> </li> </ul>"},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#member-matchers","title":"Member Matchers","text":"Matcher Description <code>Field(&amp;class::field, m)</code> <code>argument.field</code> (or <code>argument-&gt;field</code> when <code>argument</code> is a plain pointer) matches matcher <code>m</code>, where <code>argument</code> is an object of type class. <code>Field(field_name, &amp;class::field, m)</code> The same as the two-parameter version, but provides a better error message. <code>Key(e)</code> <code>argument.first</code> matches <code>e</code>, which can be either a value or a matcher. E.g. <code>Contains(Key(Le(5)))</code> can verify that a <code>map</code> contains a key <code>&lt;= 5</code>. <code>Pair(m1, m2)</code> <code>argument</code> is an <code>std::pair</code> whose <code>first</code> field matches <code>m1</code> and <code>second</code> field matches <code>m2</code>. <code>FieldsAre(m...)</code> <code>argument</code> is a compatible object where each field matches piecewise with the matchers <code>m...</code>. A compatible object is any that supports the <code>std::tuple_size&lt;Obj&gt;</code>+<code>get&lt;I&gt;(obj)</code> protocol. In C++17 and up this also supports types compatible with structured bindings, like aggregates. <code>Property(&amp;class::property, m)</code> <code>argument.property()</code> (or <code>argument-&gt;property()</code> when <code>argument</code> is a plain pointer) matches matcher <code>m</code>, where <code>argument</code> is an object of type class. The method <code>property()</code> must take no argument and be declared as <code>const</code>. <code>Property(property_name, &amp;class::property, m)</code> The same as the two-parameter version, but provides a better error message. <p>Notes:</p> <ul> <li> <p>You can use <code>FieldsAre()</code> to match any type that supports structured     bindings, such as <code>std::tuple</code>, <code>std::pair</code>, <code>std::array</code>, and aggregate     types. For example:</p> <p>```cpp std::tuple my_tuple{7, \"hello world\"}; EXPECT_THAT(my_tuple, FieldsAre(Ge(0), HasSubstr(\"hello\"))); <p>struct MyStruct {   int value = 42;   std::string greeting = \"aloha\"; }; MyStruct s; EXPECT_THAT(s, FieldsAre(42, \"aloha\")); ```</p> <li> <p>Don't use <code>Property()</code> against member functions that you do not own, because     taking addresses of functions is fragile and generally not part of the     contract of the function.</p> </li>"},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#matching-the-result-of-a-function-functor-or-callback","title":"Matching the Result of a Function, Functor, or Callback","text":"Matcher Description <code>ResultOf(f, m)</code> <code>f(argument)</code> matches matcher <code>m</code>, where <code>f</code> is a function or functor."},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#pointer-matchers","title":"Pointer Matchers","text":"Matcher Description <code>Address(m)</code> the result of <code>std::addressof(argument)</code> matches <code>m</code>. <code>Pointee(m)</code> <code>argument</code> (either a smart pointer or a raw pointer) points to a value that matches matcher <code>m</code>. <code>Pointer(m)</code> <code>argument</code> (either a smart pointer or a raw pointer) contains a pointer that matches <code>m</code>. <code>m</code> will match against the raw pointer regardless of the type of <code>argument</code>. <code>WhenDynamicCastTo&lt;T&gt;(m)</code> when <code>argument</code> is passed through <code>dynamic_cast&lt;T&gt;()</code>, it matches matcher <code>m</code>."},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#multi-argument-matchers-multiargmatchers","title":"Multi-argument Matchers {#MultiArgMatchers}","text":"<p>Technically, all matchers match a single value. A \"multi-argument\" matcher is just one that matches a tuple. The following matchers can be used to match a tuple <code>(x, y)</code>:</p> Matcher Description <code>Eq()</code> <code>x == y</code> <code>Ge()</code> <code>x &gt;= y</code> <code>Gt()</code> <code>x &gt; y</code> <code>Le()</code> <code>x &lt;= y</code> <code>Lt()</code> <code>x &lt; y</code> <code>Ne()</code> <code>x != y</code> <p>You can use the following selectors to pick a subset of the arguments (or reorder them) to participate in the matching:</p> Matcher Description <code>AllArgs(m)</code> Equivalent to <code>m</code>. Useful as syntactic sugar in <code>.With(AllArgs(m))</code>. <code>Args&lt;N1, N2, ..., Nk&gt;(m)</code> The tuple of the <code>k</code> selected (using 0-based indices) arguments matches <code>m</code>, e.g. <code>Args&lt;1, 2&gt;(Eq())</code>."},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#composite-matchers","title":"Composite Matchers","text":"<p>You can make a matcher from one or more other matchers:</p> Matcher Description <code>AllOf(m1, m2, ..., mn)</code> <code>argument</code> matches all of the matchers <code>m1</code> to <code>mn</code>. <code>AllOfArray({m0, m1, ..., mn})</code>, <code>AllOfArray(a_container)</code>, <code>AllOfArray(begin, end)</code>, <code>AllOfArray(array)</code>, or <code>AllOfArray(array, count)</code> The same as <code>AllOf()</code> except that the matchers come from an initializer list, STL-style container, iterator range, or C-style array. <code>AnyOf(m1, m2, ..., mn)</code> <code>argument</code> matches at least one of the matchers <code>m1</code> to <code>mn</code>. <code>AnyOfArray({m0, m1, ..., mn})</code>, <code>AnyOfArray(a_container)</code>, <code>AnyOfArray(begin, end)</code>, <code>AnyOfArray(array)</code>, or <code>AnyOfArray(array, count)</code> The same as <code>AnyOf()</code> except that the matchers come from an initializer list, STL-style container, iterator range, or C-style array. <code>Not(m)</code> <code>argument</code> doesn't match matcher <code>m</code>."},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#adapters-for-matchers","title":"Adapters for Matchers","text":"Matcher Description <code>MatcherCast&lt;T&gt;(m)</code> casts matcher <code>m</code> to type <code>Matcher&lt;T&gt;</code>. <code>SafeMatcherCast&lt;T&gt;(m)</code> safely casts matcher <code>m</code> to type <code>Matcher&lt;T&gt;</code>. <code>Truly(predicate)</code> <code>predicate(argument)</code> returns something considered by C++ to be true, where <code>predicate</code> is a function or functor. <p><code>AddressSatisfies(callback)</code> and <code>Truly(callback)</code> take ownership of <code>callback</code>, which must be a permanent callback.</p>"},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#using-matchers-as-predicates-matchersaspredicatescheat","title":"Using Matchers as Predicates {#MatchersAsPredicatesCheat}","text":"Matcher Description <code>Matches(m)(value)</code> evaluates to <code>true</code> if <code>value</code> matches <code>m</code>. You can use <code>Matches(m)</code> alone as a unary functor. <code>ExplainMatchResult(m, value, result_listener)</code> evaluates to <code>true</code> if <code>value</code> matches <code>m</code>, explaining the result to <code>result_listener</code>. <code>Value(value, m)</code> evaluates to <code>true</code> if <code>value</code> matches <code>m</code>."},{"location":"build/_deps/googletest-src/docs/reference/matchers.html#defining-matchers","title":"Defining Matchers","text":"Matcher Description <code>MATCHER(IsEven, \"\") { return (arg % 2) == 0; }</code> Defines a matcher <code>IsEven()</code> to match an even number. <code>MATCHER_P(IsDivisibleBy, n, \"\") { *result_listener &lt;&lt; \"where the remainder is \" &lt;&lt; (arg % n); return (arg % n) == 0; }</code> Defines a matcher <code>IsDivisibleBy(n)</code> to match a number divisible by <code>n</code>. <code>MATCHER_P2(IsBetween, a, b, absl::StrCat(negation ? \"isn't\" : \"is\", \" between \", PrintToString(a), \" and \", PrintToString(b))) { return a &lt;= arg &amp;&amp; arg &lt;= b; }</code> Defines a matcher <code>IsBetween(a, b)</code> to match a value in the range [<code>a</code>, <code>b</code>]. <p>Notes:</p> <ol> <li>The <code>MATCHER*</code> macros cannot be used inside a function or class.</li> <li>The matcher body must be purely functional (i.e. it cannot have any side     effect, and the result must not depend on anything other than the value     being matched and the matcher parameters).</li> <li>You can use <code>PrintToString(x)</code> to convert a value <code>x</code> of any type to a     string.</li> <li> <p>You can use <code>ExplainMatchResult()</code> in a custom matcher to wrap another     matcher, for example:</p> <p><code>cpp MATCHER_P(NestedPropertyMatches, matcher, \"\") {   return ExplainMatchResult(matcher, arg.nested().property(), result_listener); }</code></p> </li> </ol>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html","title":"Mocking Reference","text":"<p>This page lists the facilities provided by GoogleTest for creating and working with mock objects. To use them, include the header <code>gmock/gmock.h</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#macros-macros","title":"Macros {#macros}","text":"<p>GoogleTest defines the following macros for working with mocks.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#mock_method-mock_method","title":"MOCK_METHOD {#MOCK_METHOD}","text":"<p><code>MOCK_METHOD(</code><code>return_type</code><code>,</code><code>method_name</code><code>, (</code><code>args...</code><code>));</code> \\ <code>MOCK_METHOD(</code><code>return_type</code><code>,</code><code>method_name</code><code>, (</code><code>args...</code><code>), (</code><code>specs...</code><code>));</code></p> <p>Defines a mock method <code>method_name</code> with arguments <code>(</code><code>args...</code><code>)</code> and return type <code>return_type</code> within a mock class.</p> <p>The parameters of <code>MOCK_METHOD</code> mirror the method declaration. The optional fourth parameter <code>specs...</code> is a comma-separated list of qualifiers. The following qualifiers are accepted:</p> Qualifier Meaning <code>const</code> Makes the mocked method a <code>const</code> method. Required if overriding a <code>const</code> method. <code>override</code> Marks the method with <code>override</code>. Recommended if overriding a <code>virtual</code> method. <code>noexcept</code> Marks the method with <code>noexcept</code>. Required if overriding a <code>noexcept</code> method. <code>Calltype(</code><code>calltype</code><code>)</code> Sets the call type for the method, for example <code>Calltype(STDMETHODCALLTYPE)</code>. Useful on Windows. <code>ref(</code><code>qualifier</code><code>)</code> Marks the method with the given reference qualifier, for example <code>ref(&amp;)</code> or <code>ref(&amp;&amp;)</code>. Required if overriding a method that has a reference qualifier. <p>Note that commas in arguments prevent <code>MOCK_METHOD</code> from parsing the arguments correctly if they are not appropriately surrounded by parentheses. See the following example:</p> <pre><code>class MyMock {\n public:\n  // The following 2 lines will not compile due to commas in the arguments:\n  MOCK_METHOD(std::pair&lt;bool, int&gt;, GetPair, ());              // Error!\n  MOCK_METHOD(bool, CheckMap, (std::map&lt;int, double&gt;, bool));  // Error!\n\n  // One solution - wrap arguments that contain commas in parentheses:\n  MOCK_METHOD((std::pair&lt;bool, int&gt;), GetPair, ());\n  MOCK_METHOD(bool, CheckMap, ((std::map&lt;int, double&gt;), bool));\n\n  // Another solution - use type aliases:\n  using BoolAndInt = std::pair&lt;bool, int&gt;;\n  MOCK_METHOD(BoolAndInt, GetPair, ());\n  using MapIntDouble = std::map&lt;int, double&gt;;\n  MOCK_METHOD(bool, CheckMap, (MapIntDouble, bool));\n};\n</code></pre> <p><code>MOCK_METHOD</code> must be used in the <code>public:</code> section of a mock class definition, regardless of whether the method being mocked is <code>public</code>, <code>protected</code>, or <code>private</code> in the base class.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#expect_call-expect_call","title":"EXPECT_CALL {#EXPECT_CALL}","text":"<p><code>EXPECT_CALL(</code><code>mock_object</code><code>,</code><code>method_name</code><code>(</code><code>matchers...</code><code>))</code></p> <p>Creates an expectation that the method <code>method_name</code> of the object <code>mock_object</code> is called with arguments that match the given matchers <code>matchers...</code>. <code>EXPECT_CALL</code> must precede any code that exercises the mock object.</p> <p>The parameter <code>matchers...</code> is a comma-separated list of matchers that correspond to each argument of the method <code>method_name</code>. The expectation will apply only to calls of <code>method_name</code> whose arguments match all of the matchers. If <code>(</code><code>matchers...</code><code>)</code> is omitted, the expectation behaves as if each argument's matcher were a wildcard matcher (<code>_</code>). See the Matchers Reference for a list of all built-in matchers.</p> <p>The following chainable clauses can be used to modify the expectation, and they must be used in the following order:</p> <pre><code>EXPECT_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .Times(cardinality)            // Can be used at most once\n    .InSequence(sequences...)      // Can be used any number of times\n    .After(expectations...)        // Can be used any number of times\n    .WillOnce(action)              // Can be used any number of times\n    .WillRepeatedly(action)        // Can be used at most once\n    .RetiresOnSaturation();        // Can be used at most once\n</code></pre> <p>See details for each modifier clause below.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#with-expect_callwith","title":"With {#EXPECT_CALL.With}","text":"<p><code>.With(</code><code>multi_argument_matcher</code><code>)</code></p> <p>Restricts the expectation to apply only to mock function calls whose arguments as a whole match the multi-argument matcher <code>multi_argument_matcher</code>.</p> <p>GoogleTest passes all of the arguments as one tuple into the matcher. The parameter <code>multi_argument_matcher</code> must thus be a matcher of type <code>Matcher&lt;std::tuple&lt;A1, ..., An&gt;&gt;</code>, where <code>A1, ..., An</code> are the types of the function arguments.</p> <p>For example, the following code sets the expectation that <code>my_mock.SetPosition()</code> is called with any two arguments, the first argument being less than the second:</p> <pre><code>using ::testing::_;\nusing ::testing::Lt;\n...\nEXPECT_CALL(my_mock, SetPosition(_, _))\n    .With(Lt());\n</code></pre> <p>GoogleTest provides some built-in matchers for 2-tuples, including the <code>Lt()</code> matcher above. See Multi-argument Matchers.</p> <p>The <code>With</code> clause can be used at most once on an expectation and must be the first clause.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#times-expect_calltimes","title":"Times {#EXPECT_CALL.Times}","text":"<p><code>.Times(</code><code>cardinality</code><code>)</code></p> <p>Specifies how many times the mock function call is expected.</p> <p>The parameter <code>cardinality</code> represents the number of expected calls and can be one of the following, all defined in the <code>::testing</code> namespace:</p> Cardinality Meaning <code>AnyNumber()</code> The function can be called any number of times. <code>AtLeast(n)</code> The function call is expected at least n times. <code>AtMost(n)</code> The function call is expected at most n times. <code>Between(m, n)</code> The function call is expected between m and n times, inclusive. <code>Exactly(n)</code> or <code>n</code> The function call is expected exactly n times. If n is 0, the call should never happen. <p>If the <code>Times</code> clause is omitted, GoogleTest infers the cardinality as follows:</p> <ul> <li>If neither <code>WillOnce</code> nor     <code>WillRepeatedly</code> are specified, the inferred     cardinality is <code>Times(1)</code>.</li> <li>If there are n <code>WillOnce</code> clauses and no <code>WillRepeatedly</code> clause, where     n &gt;= 1, the inferred cardinality is <code>Times(n)</code>.</li> <li>If there are n <code>WillOnce</code> clauses and one <code>WillRepeatedly</code> clause, where     n &gt;= 0, the inferred cardinality is <code>Times(AtLeast(n))</code>.</li> </ul> <p>The <code>Times</code> clause can be used at most once on an expectation.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#insequence-expect_callinsequence","title":"InSequence {#EXPECT_CALL.InSequence}","text":"<p><code>.InSequence(</code><code>sequences...</code><code>)</code></p> <p>Specifies that the mock function call is expected in a certain sequence.</p> <p>The parameter <code>sequences...</code> is any number of <code>Sequence</code> objects. Expected calls assigned to the same sequence are expected to occur in the order the expectations are declared.</p> <p>For example, the following code sets the expectation that the <code>Reset()</code> method of <code>my_mock</code> is called before both <code>GetSize()</code> and <code>Describe()</code>, and <code>GetSize()</code> and <code>Describe()</code> can occur in any order relative to each other:</p> <pre><code>using ::testing::Sequence;\nSequence s1, s2;\n...\nEXPECT_CALL(my_mock, Reset())\n    .InSequence(s1, s2);\nEXPECT_CALL(my_mock, GetSize())\n    .InSequence(s1);\nEXPECT_CALL(my_mock, Describe())\n    .InSequence(s2);\n</code></pre> <p>The <code>InSequence</code> clause can be used any number of times on an expectation.</p> <p>See also the <code>InSequence</code> class.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#after-expect_callafter","title":"After {#EXPECT_CALL.After}","text":"<p><code>.After(</code><code>expectations...</code><code>)</code></p> <p>Specifies that the mock function call is expected to occur after one or more other calls.</p> <p>The parameter <code>expectations...</code> can be up to five <code>Expectation</code> or <code>ExpectationSet</code> objects. The mock function call is expected to occur after all of the given expectations.</p> <p>For example, the following code sets the expectation that the <code>Describe()</code> method of <code>my_mock</code> is called only after both <code>InitX()</code> and <code>InitY()</code> have been called.</p> <pre><code>using ::testing::Expectation;\n...\nExpectation init_x = EXPECT_CALL(my_mock, InitX());\nExpectation init_y = EXPECT_CALL(my_mock, InitY());\nEXPECT_CALL(my_mock, Describe())\n    .After(init_x, init_y);\n</code></pre> <p>The <code>ExpectationSet</code> object is helpful when the number of prerequisites for an expectation is large or variable, for example:</p> <pre><code>using ::testing::ExpectationSet;\n...\nExpectationSet all_inits;\n// Collect all expectations of InitElement() calls\nfor (int i = 0; i &lt; element_count; i++) {\n  all_inits += EXPECT_CALL(my_mock, InitElement(i));\n}\nEXPECT_CALL(my_mock, Describe())\n    .After(all_inits);  // Expect Describe() call after all InitElement() calls\n</code></pre> <p>The <code>After</code> clause can be used any number of times on an expectation.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#willonce-expect_callwillonce","title":"WillOnce {#EXPECT_CALL.WillOnce}","text":"<p><code>.WillOnce(</code><code>action</code><code>)</code></p> <p>Specifies the mock function's actual behavior when invoked, for a single matching function call.</p> <p>The parameter <code>action</code> represents the action that the function call will perform. See the Actions Reference for a list of built-in actions.</p> <p>The use of <code>WillOnce</code> implicitly sets a cardinality on the expectation when <code>Times</code> is not specified. See <code>Times</code>.</p> <p>Each matching function call will perform the next action in the order declared. For example, the following code specifies that <code>my_mock.GetNumber()</code> is expected to be called exactly 3 times and will return <code>1</code>, <code>2</code>, and <code>3</code> respectively on the first, second, and third calls:</p> <pre><code>using ::testing::Return;\n...\nEXPECT_CALL(my_mock, GetNumber())\n    .WillOnce(Return(1))\n    .WillOnce(Return(2))\n    .WillOnce(Return(3));\n</code></pre> <p>The <code>WillOnce</code> clause can be used any number of times on an expectation.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#willrepeatedly-expect_callwillrepeatedly","title":"WillRepeatedly {#EXPECT_CALL.WillRepeatedly}","text":"<p><code>.WillRepeatedly(</code><code>action</code><code>)</code></p> <p>Specifies the mock function's actual behavior when invoked, for all subsequent matching function calls. Takes effect after the actions specified in the <code>WillOnce</code> clauses, if any, have been performed.</p> <p>The parameter <code>action</code> represents the action that the function call will perform. See the Actions Reference for a list of built-in actions.</p> <p>The use of <code>WillRepeatedly</code> implicitly sets a cardinality on the expectation when <code>Times</code> is not specified. See <code>Times</code>.</p> <p>If any <code>WillOnce</code> clauses have been specified, matching function calls will perform those actions before the action specified by <code>WillRepeatedly</code>. See the following example:</p> <pre><code>using ::testing::Return;\n...\nEXPECT_CALL(my_mock, GetName())\n    .WillRepeatedly(Return(\"John Doe\"));  // Return \"John Doe\" on all calls\n\nEXPECT_CALL(my_mock, GetNumber())\n    .WillOnce(Return(42))        // Return 42 on the first call\n    .WillRepeatedly(Return(7));  // Return 7 on all subsequent calls\n</code></pre> <p>The <code>WillRepeatedly</code> clause can be used at most once on an expectation.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#retiresonsaturation-expect_callretiresonsaturation","title":"RetiresOnSaturation {#EXPECT_CALL.RetiresOnSaturation}","text":"<p><code>.RetiresOnSaturation()</code></p> <p>Indicates that the expectation will no longer be active after the expected number of matching function calls has been reached.</p> <p>The <code>RetiresOnSaturation</code> clause is only meaningful for expectations with an upper-bounded cardinality. The expectation will retire (no longer match any function calls) after it has been saturated (the upper bound has been reached). See the following example:</p> <pre><code>using ::testing::_;\nusing ::testing::AnyNumber;\n...\nEXPECT_CALL(my_mock, SetNumber(_))  // Expectation 1\n    .Times(AnyNumber());\nEXPECT_CALL(my_mock, SetNumber(7))  // Expectation 2\n    .Times(2)\n    .RetiresOnSaturation();\n</code></pre> <p>In the above example, the first two calls to <code>my_mock.SetNumber(7)</code> match expectation 2, which then becomes inactive and no longer matches any calls. A third call to <code>my_mock.SetNumber(7)</code> would then match expectation 1. Without <code>RetiresOnSaturation()</code> on expectation 2, a third call to <code>my_mock.SetNumber(7)</code> would match expectation 2 again, producing a failure since the limit of 2 calls was exceeded.</p> <p>The <code>RetiresOnSaturation</code> clause can be used at most once on an expectation and must be the last clause.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#on_call-on_call","title":"ON_CALL {#ON_CALL}","text":"<p><code>ON_CALL(</code><code>mock_object</code><code>,</code><code>method_name</code><code>(</code><code>matchers...</code><code>))</code></p> <p>Defines what happens when the method <code>method_name</code> of the object <code>mock_object</code> is called with arguments that match the given matchers <code>matchers...</code>. Requires a modifier clause to specify the method's behavior. Does not set any expectations that the method will be called.</p> <p>The parameter <code>matchers...</code> is a comma-separated list of matchers that correspond to each argument of the method <code>method_name</code>. The <code>ON_CALL</code> specification will apply only to calls of <code>method_name</code> whose arguments match all of the matchers. If <code>(</code><code>matchers...</code><code>)</code> is omitted, the behavior is as if each argument's matcher were a wildcard matcher (<code>_</code>). See the Matchers Reference for a list of all built-in matchers.</p> <p>The following chainable clauses can be used to set the method's behavior, and they must be used in the following order:</p> <pre><code>ON_CALL(mock_object, method_name(matchers...))\n    .With(multi_argument_matcher)  // Can be used at most once\n    .WillByDefault(action);        // Required\n</code></pre> <p>See details for each modifier clause below.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#with-on_callwith","title":"With {#ON_CALL.With}","text":"<p><code>.With(</code><code>multi_argument_matcher</code><code>)</code></p> <p>Restricts the specification to only mock function calls whose arguments as a whole match the multi-argument matcher <code>multi_argument_matcher</code>.</p> <p>GoogleTest passes all of the arguments as one tuple into the matcher. The parameter <code>multi_argument_matcher</code> must thus be a matcher of type <code>Matcher&lt;std::tuple&lt;A1, ..., An&gt;&gt;</code>, where <code>A1, ..., An</code> are the types of the function arguments.</p> <p>For example, the following code sets the default behavior when <code>my_mock.SetPosition()</code> is called with any two arguments, the first argument being less than the second:</p> <pre><code>using ::testing::_;\nusing ::testing::Lt;\nusing ::testing::Return;\n...\nON_CALL(my_mock, SetPosition(_, _))\n    .With(Lt())\n    .WillByDefault(Return(true));\n</code></pre> <p>GoogleTest provides some built-in matchers for 2-tuples, including the <code>Lt()</code> matcher above. See Multi-argument Matchers.</p> <p>The <code>With</code> clause can be used at most once with each <code>ON_CALL</code> statement.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#willbydefault-on_callwillbydefault","title":"WillByDefault {#ON_CALL.WillByDefault}","text":"<p><code>.WillByDefault(</code><code>action</code><code>)</code></p> <p>Specifies the default behavior of a matching mock function call.</p> <p>The parameter <code>action</code> represents the action that the function call will perform. See the Actions Reference for a list of built-in actions.</p> <p>For example, the following code specifies that by default, a call to <code>my_mock.Greet()</code> will return <code>\"hello\"</code>:</p> <pre><code>using ::testing::Return;\n...\nON_CALL(my_mock, Greet())\n    .WillByDefault(Return(\"hello\"));\n</code></pre> <p>The action specified by <code>WillByDefault</code> is superseded by the actions specified on a matching <code>EXPECT_CALL</code> statement, if any. See the <code>WillOnce</code> and <code>WillRepeatedly</code> clauses of <code>EXPECT_CALL</code>.</p> <p>The <code>WillByDefault</code> clause must be used exactly once with each <code>ON_CALL</code> statement.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#classes-classes","title":"Classes {#classes}","text":"<p>GoogleTest defines the following classes for working with mocks.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#defaultvalue-defaultvalue","title":"DefaultValue {#DefaultValue}","text":"<p><code>::testing::DefaultValue&lt;T&gt;</code></p> <p>Allows a user to specify the default value for a type <code>T</code> that is both copyable and publicly destructible (i.e. anything that can be used as a function return type). For mock functions with a return type of <code>T</code>, this default value is returned from function calls that do not specify an action.</p> <p>Provides the static methods <code>Set()</code>, <code>SetFactory()</code>, and <code>Clear()</code> to manage the default value:</p> <pre><code>// Sets the default value to be returned. T must be copy constructible.\nDefaultValue&lt;T&gt;::Set(value);\n\n// Sets a factory. Will be invoked on demand. T must be move constructible.\nT MakeT();\nDefaultValue&lt;T&gt;::SetFactory(&amp;MakeT);\n\n// Unsets the default value.\nDefaultValue&lt;T&gt;::Clear();\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#nicemock-nicemock","title":"NiceMock {#NiceMock}","text":"<p><code>::testing::NiceMock&lt;T&gt;</code></p> <p>Represents a mock object that suppresses warnings on uninteresting calls. The template parameter <code>T</code> is any mock class, except for another <code>NiceMock</code>, <code>NaggyMock</code>, or <code>StrictMock</code>.</p> <p>Usage of <code>NiceMock&lt;T&gt;</code> is analogous to usage of <code>T</code>. <code>NiceMock&lt;T&gt;</code> is a subclass of <code>T</code>, so it can be used wherever an object of type <code>T</code> is accepted. In addition, <code>NiceMock&lt;T&gt;</code> can be constructed with any arguments that a constructor of <code>T</code> accepts.</p> <p>For example, the following code suppresses warnings on the mock <code>my_mock</code> of type <code>MockClass</code> if a method other than <code>DoSomething()</code> is called:</p> <pre><code>using ::testing::NiceMock;\n...\nNiceMock&lt;MockClass&gt; my_mock(\"some\", \"args\");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n</code></pre> <p><code>NiceMock&lt;T&gt;</code> only works for mock methods defined using the <code>MOCK_METHOD</code> macro directly in the definition of class <code>T</code>. If a mock method is defined in a base class of <code>T</code>, a warning might still be generated.</p> <p><code>NiceMock&lt;T&gt;</code> might not work correctly if the destructor of <code>T</code> is not virtual.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#naggymock-naggymock","title":"NaggyMock {#NaggyMock}","text":"<p><code>::testing::NaggyMock&lt;T&gt;</code></p> <p>Represents a mock object that generates warnings on uninteresting calls. The template parameter <code>T</code> is any mock class, except for another <code>NiceMock</code>, <code>NaggyMock</code>, or <code>StrictMock</code>.</p> <p>Usage of <code>NaggyMock&lt;T&gt;</code> is analogous to usage of <code>T</code>. <code>NaggyMock&lt;T&gt;</code> is a subclass of <code>T</code>, so it can be used wherever an object of type <code>T</code> is accepted. In addition, <code>NaggyMock&lt;T&gt;</code> can be constructed with any arguments that a constructor of <code>T</code> accepts.</p> <p>For example, the following code generates warnings on the mock <code>my_mock</code> of type <code>MockClass</code> if a method other than <code>DoSomething()</code> is called:</p> <pre><code>using ::testing::NaggyMock;\n...\nNaggyMock&lt;MockClass&gt; my_mock(\"some\", \"args\");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n</code></pre> <p>Mock objects of type <code>T</code> by default behave the same way as <code>NaggyMock&lt;T&gt;</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#strictmock-strictmock","title":"StrictMock {#StrictMock}","text":"<p><code>::testing::StrictMock&lt;T&gt;</code></p> <p>Represents a mock object that generates test failures on uninteresting calls. The template parameter <code>T</code> is any mock class, except for another <code>NiceMock</code>, <code>NaggyMock</code>, or <code>StrictMock</code>.</p> <p>Usage of <code>StrictMock&lt;T&gt;</code> is analogous to usage of <code>T</code>. <code>StrictMock&lt;T&gt;</code> is a subclass of <code>T</code>, so it can be used wherever an object of type <code>T</code> is accepted. In addition, <code>StrictMock&lt;T&gt;</code> can be constructed with any arguments that a constructor of <code>T</code> accepts.</p> <p>For example, the following code generates a test failure on the mock <code>my_mock</code> of type <code>MockClass</code> if a method other than <code>DoSomething()</code> is called:</p> <pre><code>using ::testing::StrictMock;\n...\nStrictMock&lt;MockClass&gt; my_mock(\"some\", \"args\");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n</code></pre> <p><code>StrictMock&lt;T&gt;</code> only works for mock methods defined using the <code>MOCK_METHOD</code> macro directly in the definition of class <code>T</code>. If a mock method is defined in a base class of <code>T</code>, a failure might not be generated.</p> <p><code>StrictMock&lt;T&gt;</code> might not work correctly if the destructor of <code>T</code> is not virtual.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#sequence-sequence","title":"Sequence {#Sequence}","text":"<p><code>::testing::Sequence</code></p> <p>Represents a chronological sequence of expectations. See the <code>InSequence</code> clause of <code>EXPECT_CALL</code> for usage.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#insequence-insequence","title":"InSequence {#InSequence}","text":"<p><code>::testing::InSequence</code></p> <p>An object of this type causes all expectations encountered in its scope to be put in an anonymous sequence.</p> <p>This allows more convenient expression of multiple expectations in a single sequence:</p> <pre><code>using ::testing::InSequence;\n{\n  InSequence seq;\n\n  // The following are expected to occur in the order declared.\n  EXPECT_CALL(...);\n  EXPECT_CALL(...);\n  ...\n  EXPECT_CALL(...);\n}\n</code></pre> <p>The name of the <code>InSequence</code> object does not matter.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#expectation-expectation","title":"Expectation {#Expectation}","text":"<p><code>::testing::Expectation</code></p> <p>Represents a mock function call expectation as created by <code>EXPECT_CALL</code>:</p> <pre><code>using ::testing::Expectation;\nExpectation my_expectation = EXPECT_CALL(...);\n</code></pre> <p>Useful for specifying sequences of expectations; see the <code>After</code> clause of <code>EXPECT_CALL</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/mocking.html#expectationset-expectationset","title":"ExpectationSet {#ExpectationSet}","text":"<p><code>::testing::ExpectationSet</code></p> <p>Represents a set of mock function call expectations.</p> <p>Use the <code>+=</code> operator to add <code>Expectation</code> objects to the set:</p> <pre><code>using ::testing::ExpectationSet;\nExpectationSet my_expectations;\nmy_expectations += EXPECT_CALL(...);\n</code></pre> <p>Useful for specifying sequences of expectations; see the <code>After</code> clause of <code>EXPECT_CALL</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html","title":"Testing Reference","text":"<p>This page lists the facilities provided by GoogleTest for writing test programs. To use them, include the header <code>gtest/gtest.h</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#macros","title":"Macros","text":"<p>GoogleTest defines the following macros for writing tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test-test","title":"TEST {#TEST}","text":"<pre>\nTEST(TestSuiteName, TestName) {\n  ... statements ...\n}\n</pre> <p>Defines an individual test named <code>TestName</code> in the test suite <code>TestSuiteName</code>, consisting of the given statements.</p> <p>Both arguments <code>TestSuiteName</code> and <code>TestName</code> must be valid C++ identifiers and must not contain underscores (<code>_</code>). Tests in different test suites can have the same individual name.</p> <p>The statements within the test body can be any code under test. Assertions used within the test body determine the outcome of the test.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test_f-test_f","title":"TEST_F {#TEST_F}","text":"<pre>\nTEST_F(TestFixtureName, TestName) {\n  ... statements ...\n}\n</pre> <p>Defines an individual test named <code>TestName</code> that uses the test fixture class <code>TestFixtureName</code>. The test suite name is <code>TestFixtureName</code>.</p> <p>Both arguments <code>TestFixtureName</code> and <code>TestName</code> must be valid C++ identifiers and must not contain underscores (<code>_</code>). <code>TestFixtureName</code> must be the name of a test fixture class\u2014see Test Fixtures.</p> <p>The statements within the test body can be any code under test. Assertions used within the test body determine the outcome of the test.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test_p-test_p","title":"TEST_P {#TEST_P}","text":"<pre>\nTEST_P(TestFixtureName, TestName) {\n  ... statements ...\n}\n</pre> <p>Defines an individual value-parameterized test named <code>TestName</code> that uses the test fixture class <code>TestFixtureName</code>. The test suite name is <code>TestFixtureName</code>.</p> <p>Both arguments <code>TestFixtureName</code> and <code>TestName</code> must be valid C++ identifiers and must not contain underscores (<code>_</code>). <code>TestFixtureName</code> must be the name of a value-parameterized test fixture class\u2014see Value-Parameterized Tests.</p> <p>The statements within the test body can be any code under test. Within the test body, the test parameter can be accessed with the <code>GetParam()</code> function (see <code>WithParamInterface</code>). For example:</p> <pre><code>TEST_P(MyTestSuite, DoesSomething) {\n  ...\n  EXPECT_TRUE(DoSomething(GetParam()));\n  ...\n}\n</code></pre> <p>Assertions used within the test body determine the outcome of the test.</p> <p>See also <code>INSTANTIATE_TEST_SUITE_P</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#instantiate_test_suite_p-instantiate_test_suite_p","title":"INSTANTIATE_TEST_SUITE_P {#INSTANTIATE_TEST_SUITE_P}","text":"<p><code>INSTANTIATE_TEST_SUITE_P(</code><code>InstantiationName</code><code>,</code><code>TestSuiteName</code><code>,</code><code>param_generator</code><code>)</code> \\ <code>INSTANTIATE_TEST_SUITE_P(</code><code>InstantiationName</code><code>,</code><code>TestSuiteName</code><code>,</code><code>param_generator</code><code>,</code><code>name_generator</code><code>)</code></p> <p>Instantiates the value-parameterized test suite <code>TestSuiteName</code> (defined with <code>TEST_P</code>).</p> <p>The argument <code>InstantiationName</code> is a unique name for the instantiation of the test suite, to distinguish between multiple instantiations. In test output, the instantiation name is added as a prefix to the test suite name <code>TestSuiteName</code>.</p> <p>The argument <code>param_generator</code> is one of the following GoogleTest-provided functions that generate the test parameters, all defined in the <code>::testing</code> namespace:</p> <p></p> Parameter Generator Behavior <code>Range(begin, end [, step])</code> Yields values <code>{begin, begin+step, begin+step+step, ...}</code>. The values do not include <code>end</code>. <code>step</code> defaults to 1. <code>Values(v1, v2, ..., vN)</code> Yields values <code>{v1, v2, ..., vN}</code>. <code>ValuesIn(container)</code> or <code>ValuesIn(begin,end)</code> Yields values from a C-style array, an STL-style container, or an iterator range <code>[begin, end)</code>. <code>Bool()</code> Yields sequence <code>{false, true}</code>. <code>Combine(g1, g2, ..., gN)</code> Yields as <code>std::tuple</code> n-tuples all combinations (Cartesian product) of the values generated by the given n generators <code>g1</code>, <code>g2</code>, ..., <code>gN</code>. <p>The optional last argument <code>name_generator</code> is a function or functor that generates custom test name suffixes based on the test parameters. The function must accept an argument of type <code>TestParamInfo&lt;class ParamType&gt;</code> and return a <code>std::string</code>. The test name suffix can only contain alphanumeric characters and underscores. GoogleTest provides <code>PrintToStringParamName</code>, or a custom function can be used for more control:</p> <pre><code>INSTANTIATE_TEST_SUITE_P(\n    MyInstantiation, MyTestSuite,\n    ::testing::Values(...),\n    [](const ::testing::TestParamInfo&lt;MyTestSuite::ParamType&gt;&amp; info) {\n      // Can use info.param here to generate the test suffix\n      std::string name = ...\n      return name;\n    });\n</code></pre> <p>For more information, see Value-Parameterized Tests.</p> <p>See also <code>GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#typed_test_suite-typed_test_suite","title":"TYPED_TEST_SUITE {#TYPED_TEST_SUITE}","text":"<p><code>TYPED_TEST_SUITE(</code><code>TestFixtureName</code><code>,</code><code>Types</code><code>)</code></p> <p>Defines a typed test suite based on the test fixture <code>TestFixtureName</code>. The test suite name is <code>TestFixtureName</code>.</p> <p>The argument <code>TestFixtureName</code> is a fixture class template, parameterized by a type, for example:</p> <pre><code>template &lt;typename T&gt;\nclass MyFixture : public ::testing::Test {\n public:\n  ...\n  using List = std::list&lt;T&gt;;\n  static T shared_;\n  T value_;\n};\n</code></pre> <p>The argument <code>Types</code> is a <code>Types</code> object representing the list of types to run the tests on, for example:</p> <pre><code>using MyTypes = ::testing::Types&lt;char, int, unsigned int&gt;;\nTYPED_TEST_SUITE(MyFixture, MyTypes);\n</code></pre> <p>The type alias (<code>using</code> or <code>typedef</code>) is necessary for the <code>TYPED_TEST_SUITE</code> macro to parse correctly.</p> <p>See also <code>TYPED_TEST</code> and Typed Tests for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#typed_test-typed_test","title":"TYPED_TEST {#TYPED_TEST}","text":"<pre>\nTYPED_TEST(TestSuiteName, TestName) {\n  ... statements ...\n}\n</pre> <p>Defines an individual typed test named <code>TestName</code> in the typed test suite <code>TestSuiteName</code>. The test suite must be defined with <code>TYPED_TEST_SUITE</code>.</p> <p>Within the test body, the special name <code>TypeParam</code> refers to the type parameter, and <code>TestFixture</code> refers to the fixture class. See the following example:</p> <pre><code>TYPED_TEST(MyFixture, Example) {\n  // Inside a test, refer to the special name TypeParam to get the type\n  // parameter.  Since we are inside a derived class template, C++ requires\n  // us to visit the members of MyFixture via 'this'.\n  TypeParam n = this-&gt;value_;\n\n  // To visit static members of the fixture, add the 'TestFixture::'\n  // prefix.\n  n += TestFixture::shared_;\n\n  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\n  // prefix. The 'typename' is required to satisfy the compiler.\n  typename TestFixture::List values;\n\n  values.push_back(n);\n  ...\n}\n</code></pre> <p>For more information, see Typed Tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#typed_test_suite_p-typed_test_suite_p","title":"TYPED_TEST_SUITE_P {#TYPED_TEST_SUITE_P}","text":"<p><code>TYPED_TEST_SUITE_P(</code><code>TestFixtureName</code><code>)</code></p> <p>Defines a type-parameterized test suite based on the test fixture <code>TestFixtureName</code>. The test suite name is <code>TestFixtureName</code>.</p> <p>The argument <code>TestFixtureName</code> is a fixture class template, parameterized by a type. See <code>TYPED_TEST_SUITE</code> for an example.</p> <p>See also <code>TYPED_TEST_P</code> and Type-Parameterized Tests for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#typed_test_p-typed_test_p","title":"TYPED_TEST_P {#TYPED_TEST_P}","text":"<pre>\nTYPED_TEST_P(TestSuiteName, TestName) {\n  ... statements ...\n}\n</pre> <p>Defines an individual type-parameterized test named <code>TestName</code> in the type-parameterized test suite <code>TestSuiteName</code>. The test suite must be defined with <code>TYPED_TEST_SUITE_P</code>.</p> <p>Within the test body, the special name <code>TypeParam</code> refers to the type parameter, and <code>TestFixture</code> refers to the fixture class. See <code>TYPED_TEST</code> for an example.</p> <p>See also <code>REGISTER_TYPED_TEST_SUITE_P</code> and Type-Parameterized Tests for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#register_typed_test_suite_p-register_typed_test_suite_p","title":"REGISTER_TYPED_TEST_SUITE_P {#REGISTER_TYPED_TEST_SUITE_P}","text":"<p><code>REGISTER_TYPED_TEST_SUITE_P(</code><code>TestSuiteName</code><code>,</code><code>TestNames...</code><code>)</code></p> <p>Registers the type-parameterized tests <code>TestNames...</code> of the test suite <code>TestSuiteName</code>. The test suite and tests must be defined with <code>TYPED_TEST_SUITE_P</code> and <code>TYPED_TEST_P</code>.</p> <p>For example:</p> <pre><code>// Define the test suite and tests.\nTYPED_TEST_SUITE_P(MyFixture);\nTYPED_TEST_P(MyFixture, HasPropertyA) { ... }\nTYPED_TEST_P(MyFixture, HasPropertyB) { ... }\n\n// Register the tests in the test suite.\nREGISTER_TYPED_TEST_SUITE_P(MyFixture, HasPropertyA, HasPropertyB);\n</code></pre> <p>See also <code>INSTANTIATE_TYPED_TEST_SUITE_P</code> and Type-Parameterized Tests for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#instantiate_typed_test_suite_p-instantiate_typed_test_suite_p","title":"INSTANTIATE_TYPED_TEST_SUITE_P {#INSTANTIATE_TYPED_TEST_SUITE_P}","text":"<p><code>INSTANTIATE_TYPED_TEST_SUITE_P(</code><code>InstantiationName</code><code>,</code><code>TestSuiteName</code><code>,</code><code>Types</code><code>)</code></p> <p>Instantiates the type-parameterized test suite <code>TestSuiteName</code>. The test suite must be registered with <code>REGISTER_TYPED_TEST_SUITE_P</code>.</p> <p>The argument <code>InstantiationName</code> is a unique name for the instantiation of the test suite, to distinguish between multiple instantiations. In test output, the instantiation name is added as a prefix to the test suite name <code>TestSuiteName</code>.</p> <p>The argument <code>Types</code> is a <code>Types</code> object representing the list of types to run the tests on, for example:</p> <pre><code>using MyTypes = ::testing::Types&lt;char, int, unsigned int&gt;;\nINSTANTIATE_TYPED_TEST_SUITE_P(MyInstantiation, MyFixture, MyTypes);\n</code></pre> <p>The type alias (<code>using</code> or <code>typedef</code>) is necessary for the <code>INSTANTIATE_TYPED_TEST_SUITE_P</code> macro to parse correctly.</p> <p>For more information, see Type-Parameterized Tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#friend_test-friend_test","title":"FRIEND_TEST {#FRIEND_TEST}","text":"<p><code>FRIEND_TEST(</code><code>TestSuiteName</code><code>,</code><code>TestName</code><code>)</code></p> <p>Within a class body, declares an individual test as a friend of the class, enabling the test to access private class members.</p> <p>If the class is defined in a namespace, then in order to be friends of the class, test fixtures and tests must be defined in the exact same namespace, without inline or anonymous namespaces.</p> <p>For example, if the class definition looks like the following:</p> <pre><code>namespace my_namespace {\n\nclass MyClass {\n  friend class MyClassTest;\n  FRIEND_TEST(MyClassTest, HasPropertyA);\n  FRIEND_TEST(MyClassTest, HasPropertyB);\n  ... definition of class MyClass ...\n};\n\n}  // namespace my_namespace\n</code></pre> <p>Then the test code should look like:</p> <pre><code>namespace my_namespace {\n\nclass MyClassTest : public ::testing::Test {\n  ...\n};\n\nTEST_F(MyClassTest, HasPropertyA) { ... }\nTEST_F(MyClassTest, HasPropertyB) { ... }\n\n}  // namespace my_namespace\n</code></pre> <p>See Testing Private Code for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#scoped_trace-scoped_trace","title":"SCOPED_TRACE {#SCOPED_TRACE}","text":"<p><code>SCOPED_TRACE(</code><code>message</code><code>)</code></p> <p>Causes the current file name, line number, and the given message <code>message</code> to be added to the failure message for each assertion failure that occurs in the scope.</p> <p>For more information, see Adding Traces to Assertions.</p> <p>See also the <code>ScopedTrace</code> class.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#gtest_skip-gtest_skip","title":"GTEST_SKIP {#GTEST_SKIP}","text":"<p><code>GTEST_SKIP()</code></p> <p>Prevents further test execution at runtime.</p> <p>Can be used in individual test cases or in the <code>SetUp()</code> methods of test environments or test fixtures (classes derived from the <code>Environment</code> or <code>Test</code> classes). If used in a global test environment <code>SetUp()</code> method, it skips all tests in the test program. If used in a test fixture <code>SetUp()</code> method, it skips all tests in the corresponding test suite.</p> <p>Similar to assertions, <code>GTEST_SKIP</code> allows streaming a custom message into it.</p> <p>See Skipping Test Execution for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#gtest_allow_uninstantiated_parameterized_test-gtest_allow_uninstantiated_parameterized_test","title":"GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST {#GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST}","text":"<p><code>GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(</code><code>TestSuiteName</code><code>)</code></p> <p>Allows the value-parameterized test suite <code>TestSuiteName</code> to be uninstantiated.</p> <p>By default, every <code>TEST_P</code> call without a corresponding <code>INSTANTIATE_TEST_SUITE_P</code> call causes a failing test in the test suite <code>GoogleTestVerification</code>. <code>GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST</code> suppresses this failure for the given test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#classes-and-types","title":"Classes and types","text":"<p>GoogleTest defines the following classes and types to help with writing tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#assertionresult-assertionresult","title":"AssertionResult {#AssertionResult}","text":"<p><code>::testing::AssertionResult</code></p> <p>A class for indicating whether an assertion was successful.</p> <p>When the assertion wasn't successful, the <code>AssertionResult</code> object stores a non-empty failure message that can be retrieved with the object's <code>message()</code> method.</p> <p>To create an instance of this class, use one of the factory functions <code>AssertionSuccess()</code> or <code>AssertionFailure()</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#assertionexception-assertionexception","title":"AssertionException {#AssertionException}","text":"<p><code>::testing::AssertionException</code></p> <p>Exception which can be thrown from <code>TestEventListener::OnTestPartResult</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#emptytesteventlistener-emptytesteventlistener","title":"EmptyTestEventListener {#EmptyTestEventListener}","text":"<p><code>::testing::EmptyTestEventListener</code></p> <p>Provides an empty implementation of all methods in the <code>TestEventListener</code> interface, such that a subclass only needs to override the methods it cares about.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#environment-environment","title":"Environment {#Environment}","text":"<p><code>::testing::Environment</code></p> <p>Represents a global test environment. See Global Set-Up and Tear-Down.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#protected-methods-environment-protected","title":"Protected Methods {#Environment-protected}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#setup-environmentsetup","title":"SetUp {#Environment::SetUp}","text":"<p><code>virtual void Environment::SetUp()</code></p> <p>Override this to define how to set up the environment.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#teardown-environmentteardown","title":"TearDown {#Environment::TearDown}","text":"<p><code>virtual void Environment::TearDown()</code></p> <p>Override this to define how to tear down the environment.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#scopedtrace-scopedtrace","title":"ScopedTrace {#ScopedTrace}","text":"<p><code>::testing::ScopedTrace</code></p> <p>An instance of this class causes a trace to be included in every test failure message generated by code in the scope of the lifetime of the <code>ScopedTrace</code> instance. The effect is undone with the destruction of the instance.</p> <p>The <code>ScopedTrace</code> constructor has the following form:</p> <pre><code>template &lt;typename T&gt;\nScopedTrace(const char* file, int line, const T&amp; message)\n</code></pre> <p>Example usage:</p> <pre><code>::testing::ScopedTrace trace(\"file.cc\", 123, \"message\");\n</code></pre> <p>The resulting trace includes the given source file path and line number, and the given message. The <code>message</code> argument can be anything streamable to <code>std::ostream</code>.</p> <p>See also <code>SCOPED_TRACE</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test-test_1","title":"Test {#Test}","text":"<p><code>::testing::Test</code></p> <p>The abstract class that all tests inherit from. <code>Test</code> is not copyable.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-test-public","title":"Public Methods {#Test-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#setuptestsuite-testsetuptestsuite","title":"SetUpTestSuite {#Test::SetUpTestSuite}","text":"<p><code>static void Test::SetUpTestSuite()</code></p> <p>Performs shared setup for all tests in the test suite. GoogleTest calls <code>SetUpTestSuite()</code> before running the first test in the test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#teardowntestsuite-testteardowntestsuite","title":"TearDownTestSuite {#Test::TearDownTestSuite}","text":"<p><code>static void Test::TearDownTestSuite()</code></p> <p>Performs shared teardown for all tests in the test suite. GoogleTest calls <code>TearDownTestSuite()</code> after running the last test in the test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#hasfatalfailure-testhasfatalfailure","title":"HasFatalFailure {#Test::HasFatalFailure}","text":"<p><code>static bool Test::HasFatalFailure()</code></p> <p>Returns true if and only if the current test has a fatal failure.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#hasnonfatalfailure-testhasnonfatalfailure","title":"HasNonfatalFailure {#Test::HasNonfatalFailure}","text":"<p><code>static bool Test::HasNonfatalFailure()</code></p> <p>Returns true if and only if the current test has a nonfatal failure.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#hasfailure-testhasfailure","title":"HasFailure {#Test::HasFailure}","text":"<p><code>static bool Test::HasFailure()</code></p> <p>Returns true if and only if the current test has any failure, either fatal or nonfatal.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#isskipped-testisskipped","title":"IsSkipped {#Test::IsSkipped}","text":"<p><code>static bool Test::IsSkipped()</code></p> <p>Returns true if and only if the current test was skipped.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#recordproperty-testrecordproperty","title":"RecordProperty {#Test::RecordProperty}","text":"<p><code>static void Test::RecordProperty(const std::string&amp; key, const std::string&amp; value)</code> \\ <code>static void Test::RecordProperty(const std::string&amp; key, int value)</code></p> <p>Logs a property for the current test, test suite, or entire invocation of the test program. Only the last value for a given key is logged.</p> <p>The key must be a valid XML attribute name, and cannot conflict with the ones already used by GoogleTest (<code>name</code>, <code>status</code>, <code>time</code>, <code>classname</code>, <code>type_param</code>, and <code>value_param</code>).</p> <p><code>RecordProperty</code> is <code>public static</code> so it can be called from utility functions that are not members of the test fixture.</p> <p>Calls to <code>RecordProperty</code> made during the lifespan of the test (from the moment its constructor starts to the moment its destructor finishes) are output in XML as attributes of the <code>&lt;testcase&gt;</code> element. Properties recorded from a fixture's <code>SetUpTestSuite</code> or <code>TearDownTestSuite</code> methods are logged as attributes of the corresponding <code>&lt;testsuite&gt;</code> element. Calls to <code>RecordProperty</code> made in the global context (before or after invocation of <code>RUN_ALL_TESTS</code> or from the <code>SetUp</code>/<code>TearDown</code> methods of registered <code>Environment</code> objects) are output as attributes of the <code>&lt;testsuites&gt;</code> element.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#protected-methods-test-protected","title":"Protected Methods {#Test-protected}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#setup-testsetup","title":"SetUp {#Test::SetUp}","text":"<p><code>virtual void Test::SetUp()</code></p> <p>Override this to perform test fixture setup. GoogleTest calls <code>SetUp()</code> before running each individual test.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#teardown-testteardown","title":"TearDown {#Test::TearDown}","text":"<p><code>virtual void Test::TearDown()</code></p> <p>Override this to perform test fixture teardown. GoogleTest calls <code>TearDown()</code> after running each individual test.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testwithparam-testwithparam","title":"TestWithParam {#TestWithParam}","text":"<p><code>::testing::TestWithParam&lt;T&gt;</code></p> <p>A convenience class which inherits from both <code>Test</code> and <code>WithParamInterface&lt;T&gt;</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testsuite-testsuite","title":"TestSuite {#TestSuite}","text":"<p>Represents a test suite. <code>TestSuite</code> is not copyable.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-testsuite-public","title":"Public Methods {#TestSuite-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#name-testsuitename","title":"name {#TestSuite::name}","text":"<p><code>const char* TestSuite::name() const</code></p> <p>Gets the name of the test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#type_param-testsuitetype_param","title":"type_param {#TestSuite::type_param}","text":"<p><code>const char* TestSuite::type_param() const</code></p> <p>Returns the name of the parameter type, or <code>NULL</code> if this is not a typed or type-parameterized test suite. See Typed Tests and Type-Parameterized Tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#should_run-testsuiteshould_run","title":"should_run {#TestSuite::should_run}","text":"<p><code>bool TestSuite::should_run() const</code></p> <p>Returns true if any test in this test suite should run.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#successful_test_count-testsuitesuccessful_test_count","title":"successful_test_count {#TestSuite::successful_test_count}","text":"<p><code>int TestSuite::successful_test_count() const</code></p> <p>Gets the number of successful tests in this test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#skipped_test_count-testsuiteskipped_test_count","title":"skipped_test_count {#TestSuite::skipped_test_count}","text":"<p><code>int TestSuite::skipped_test_count() const</code></p> <p>Gets the number of skipped tests in this test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#failed_test_count-testsuitefailed_test_count","title":"failed_test_count {#TestSuite::failed_test_count}","text":"<p><code>int TestSuite::failed_test_count() const</code></p> <p>Gets the number of failed tests in this test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#reportable_disabled_test_count-testsuitereportable_disabled_test_count","title":"reportable_disabled_test_count {#TestSuite::reportable_disabled_test_count}","text":"<p><code>int TestSuite::reportable_disabled_test_count() const</code></p> <p>Gets the number of disabled tests that will be reported in the XML report.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#disabled_test_count-testsuitedisabled_test_count","title":"disabled_test_count {#TestSuite::disabled_test_count}","text":"<p><code>int TestSuite::disabled_test_count() const</code></p> <p>Gets the number of disabled tests in this test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#reportable_test_count-testsuitereportable_test_count","title":"reportable_test_count {#TestSuite::reportable_test_count}","text":"<p><code>int TestSuite::reportable_test_count() const</code></p> <p>Gets the number of tests to be printed in the XML report.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test_to_run_count-testsuitetest_to_run_count","title":"test_to_run_count {#TestSuite::test_to_run_count}","text":"<p><code>int TestSuite::test_to_run_count() const</code></p> <p>Get the number of tests in this test suite that should run.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#total_test_count-testsuitetotal_test_count","title":"total_test_count {#TestSuite::total_test_count}","text":"<p><code>int TestSuite::total_test_count() const</code></p> <p>Gets the number of all tests in this test suite.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#passed-testsuitepassed","title":"Passed {#TestSuite::Passed}","text":"<p><code>bool TestSuite::Passed() const</code></p> <p>Returns true if and only if the test suite passed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#failed-testsuitefailed","title":"Failed {#TestSuite::Failed}","text":"<p><code>bool TestSuite::Failed() const</code></p> <p>Returns true if and only if the test suite failed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#elapsed_time-testsuiteelapsed_time","title":"elapsed_time {#TestSuite::elapsed_time}","text":"<p><code>TimeInMillis TestSuite::elapsed_time() const</code></p> <p>Returns the elapsed time, in milliseconds.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#start_timestamp-testsuitestart_timestamp","title":"start_timestamp {#TestSuite::start_timestamp}","text":"<p><code>TimeInMillis TestSuite::start_timestamp() const</code></p> <p>Gets the time of the test suite start, in ms from the start of the UNIX epoch.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#gettestinfo-testsuitegettestinfo","title":"GetTestInfo {#TestSuite::GetTestInfo}","text":"<p><code>const TestInfo* TestSuite::GetTestInfo(int i) const</code></p> <p>Returns the <code>TestInfo</code> for the <code>i</code>-th test among all the tests. <code>i</code> can range from 0 to <code>total_test_count() - 1</code>. If <code>i</code> is not in that range, returns <code>NULL</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ad_hoc_test_result-testsuitead_hoc_test_result","title":"ad_hoc_test_result {#TestSuite::ad_hoc_test_result}","text":"<p><code>const TestResult&amp; TestSuite::ad_hoc_test_result() const</code></p> <p>Returns the <code>TestResult</code> that holds test properties recorded during execution of <code>SetUpTestSuite</code> and <code>TearDownTestSuite</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testinfo-testinfo","title":"TestInfo {#TestInfo}","text":"<p><code>::testing::TestInfo</code></p> <p>Stores information about a test.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-testinfo-public","title":"Public Methods {#TestInfo-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test_suite_name-testinfotest_suite_name","title":"test_suite_name {#TestInfo::test_suite_name}","text":"<p><code>const char* TestInfo::test_suite_name() const</code></p> <p>Returns the test suite name.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#name-testinfoname","title":"name {#TestInfo::name}","text":"<p><code>const char* TestInfo::name() const</code></p> <p>Returns the test name.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#type_param-testinfotype_param","title":"type_param {#TestInfo::type_param}","text":"<p><code>const char* TestInfo::type_param() const</code></p> <p>Returns the name of the parameter type, or <code>NULL</code> if this is not a typed or type-parameterized test. See Typed Tests and Type-Parameterized Tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#value_param-testinfovalue_param","title":"value_param {#TestInfo::value_param}","text":"<p><code>const char* TestInfo::value_param() const</code></p> <p>Returns the text representation of the value parameter, or <code>NULL</code> if this is not a value-parameterized test. See Value-Parameterized Tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#file-testinfofile","title":"file {#TestInfo::file}","text":"<p><code>const char* TestInfo::file() const</code></p> <p>Returns the file name where this test is defined.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#line-testinfoline","title":"line {#TestInfo::line}","text":"<p><code>int TestInfo::line() const</code></p> <p>Returns the line where this test is defined.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#is_in_another_shard-testinfois_in_another_shard","title":"is_in_another_shard {#TestInfo::is_in_another_shard}","text":"<p><code>bool TestInfo::is_in_another_shard() const</code></p> <p>Returns true if this test should not be run because it's in another shard.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#should_run-testinfoshould_run","title":"should_run {#TestInfo::should_run}","text":"<p><code>bool TestInfo::should_run() const</code></p> <p>Returns true if this test should run, that is if the test is not disabled (or it is disabled but the <code>also_run_disabled_tests</code> flag has been specified) and its full name matches the user-specified filter.</p> <p>GoogleTest allows the user to filter the tests by their full names. Only the tests that match the filter will run. See Running a Subset of the Tests for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#is_reportable-testinfois_reportable","title":"is_reportable {#TestInfo::is_reportable}","text":"<p><code>bool TestInfo::is_reportable() const</code></p> <p>Returns true if and only if this test will appear in the XML report.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#result-testinforesult","title":"result {#TestInfo::result}","text":"<p><code>const TestResult* TestInfo::result() const</code></p> <p>Returns the result of the test. See <code>TestResult</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testparaminfo-testparaminfo","title":"TestParamInfo {#TestParamInfo}","text":"<p><code>::testing::TestParamInfo&lt;T&gt;</code></p> <p>Describes a parameter to a value-parameterized test. The type <code>T</code> is the type of the parameter.</p> <p>Contains the fields <code>param</code> and <code>index</code> which hold the value of the parameter and its integer index respectively.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#unittest-unittest","title":"UnitTest {#UnitTest}","text":"<p><code>::testing::UnitTest</code></p> <p>This class contains information about the test program.</p> <p><code>UnitTest</code> is a singleton class. The only instance is created when <code>UnitTest::GetInstance()</code> is first called. This instance is never deleted.</p> <p><code>UnitTest</code> is not copyable.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-unittest-public","title":"Public Methods {#UnitTest-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#getinstance-unittestgetinstance","title":"GetInstance {#UnitTest::GetInstance}","text":"<p><code>static UnitTest* UnitTest::GetInstance()</code></p> <p>Gets the singleton <code>UnitTest</code> object. The first time this method is called, a <code>UnitTest</code> object is constructed and returned. Consecutive calls will return the same object.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#original_working_dir-unittestoriginal_working_dir","title":"original_working_dir {#UnitTest::original_working_dir}","text":"<p><code>const char* UnitTest::original_working_dir() const</code></p> <p>Returns the working directory when the first <code>TEST()</code> or <code>TEST_F()</code> was executed. The <code>UnitTest</code> object owns the string.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#current_test_suite-unittestcurrent_test_suite","title":"current_test_suite {#UnitTest::current_test_suite}","text":"<p><code>const TestSuite* UnitTest::current_test_suite() const</code></p> <p>Returns the <code>TestSuite</code> object for the test that's currently running, or <code>NULL</code> if no test is running.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#current_test_info-unittestcurrent_test_info","title":"current_test_info {#UnitTest::current_test_info}","text":"<p><code>const TestInfo* UnitTest::current_test_info() const</code></p> <p>Returns the <code>TestInfo</code> object for the test that's currently running, or <code>NULL</code> if no test is running.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#random_seed-unittestrandom_seed","title":"random_seed {#UnitTest::random_seed}","text":"<p><code>int UnitTest::random_seed() const</code></p> <p>Returns the random seed used at the start of the current test run.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#successful_test_suite_count-unittestsuccessful_test_suite_count","title":"successful_test_suite_count {#UnitTest::successful_test_suite_count}","text":"<p><code>int UnitTest::successful_test_suite_count() const</code></p> <p>Gets the number of successful test suites.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#failed_test_suite_count-unittestfailed_test_suite_count","title":"failed_test_suite_count {#UnitTest::failed_test_suite_count}","text":"<p><code>int UnitTest::failed_test_suite_count() const</code></p> <p>Gets the number of failed test suites.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#total_test_suite_count-unittesttotal_test_suite_count","title":"total_test_suite_count {#UnitTest::total_test_suite_count}","text":"<p><code>int UnitTest::total_test_suite_count() const</code></p> <p>Gets the number of all test suites.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test_suite_to_run_count-unittesttest_suite_to_run_count","title":"test_suite_to_run_count {#UnitTest::test_suite_to_run_count}","text":"<p><code>int UnitTest::test_suite_to_run_count() const</code></p> <p>Gets the number of all test suites that contain at least one test that should run.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#successful_test_count-unittestsuccessful_test_count","title":"successful_test_count {#UnitTest::successful_test_count}","text":"<p><code>int UnitTest::successful_test_count() const</code></p> <p>Gets the number of successful tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#skipped_test_count-unittestskipped_test_count","title":"skipped_test_count {#UnitTest::skipped_test_count}","text":"<p><code>int UnitTest::skipped_test_count() const</code></p> <p>Gets the number of skipped tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#failed_test_count-unittestfailed_test_count","title":"failed_test_count {#UnitTest::failed_test_count}","text":"<p><code>int UnitTest::failed_test_count() const</code></p> <p>Gets the number of failed tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#reportable_disabled_test_count-unittestreportable_disabled_test_count","title":"reportable_disabled_test_count {#UnitTest::reportable_disabled_test_count}","text":"<p><code>int UnitTest::reportable_disabled_test_count() const</code></p> <p>Gets the number of disabled tests that will be reported in the XML report.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#disabled_test_count-unittestdisabled_test_count","title":"disabled_test_count {#UnitTest::disabled_test_count}","text":"<p><code>int UnitTest::disabled_test_count() const</code></p> <p>Gets the number of disabled tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#reportable_test_count-unittestreportable_test_count","title":"reportable_test_count {#UnitTest::reportable_test_count}","text":"<p><code>int UnitTest::reportable_test_count() const</code></p> <p>Gets the number of tests to be printed in the XML report.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#total_test_count-unittesttotal_test_count","title":"total_test_count {#UnitTest::total_test_count}","text":"<p><code>int UnitTest::total_test_count() const</code></p> <p>Gets the number of all tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test_to_run_count-unittesttest_to_run_count","title":"test_to_run_count {#UnitTest::test_to_run_count}","text":"<p><code>int UnitTest::test_to_run_count() const</code></p> <p>Gets the number of tests that should run.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#start_timestamp-unitteststart_timestamp","title":"start_timestamp {#UnitTest::start_timestamp}","text":"<p><code>TimeInMillis UnitTest::start_timestamp() const</code></p> <p>Gets the time of the test program start, in ms from the start of the UNIX epoch.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#elapsed_time-unittestelapsed_time","title":"elapsed_time {#UnitTest::elapsed_time}","text":"<p><code>TimeInMillis UnitTest::elapsed_time() const</code></p> <p>Gets the elapsed time, in milliseconds.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#passed-unittestpassed","title":"Passed {#UnitTest::Passed}","text":"<p><code>bool UnitTest::Passed() const</code></p> <p>Returns true if and only if the unit test passed (i.e. all test suites passed).</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#failed-unittestfailed","title":"Failed {#UnitTest::Failed}","text":"<p><code>bool UnitTest::Failed() const</code></p> <p>Returns true if and only if the unit test failed (i.e. some test suite failed or something outside of all tests failed).</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#gettestsuite-unittestgettestsuite","title":"GetTestSuite {#UnitTest::GetTestSuite}","text":"<p><code>const TestSuite* UnitTest::GetTestSuite(int i) const</code></p> <p>Gets the <code>TestSuite</code> object for the <code>i</code>-th test suite among all the test suites. <code>i</code> can range from 0 to <code>total_test_suite_count() - 1</code>. If <code>i</code> is not in that range, returns <code>NULL</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ad_hoc_test_result-unittestad_hoc_test_result","title":"ad_hoc_test_result {#UnitTest::ad_hoc_test_result}","text":"<p><code>const TestResult&amp; UnitTest::ad_hoc_test_result() const</code></p> <p>Returns the <code>TestResult</code> containing information on test failures and properties logged outside of individual test suites.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#listeners-unittestlisteners","title":"listeners {#UnitTest::listeners}","text":"<p><code>TestEventListeners&amp; UnitTest::listeners()</code></p> <p>Returns the list of event listeners that can be used to track events inside GoogleTest. See <code>TestEventListeners</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testeventlistener-testeventlistener","title":"TestEventListener {#TestEventListener}","text":"<p><code>::testing::TestEventListener</code></p> <p>The interface for tracing execution of tests. The methods below are listed in the order the corresponding events are fired.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-testeventlistener-public","title":"Public Methods {#TestEventListener-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestprogramstart-testeventlistenerontestprogramstart","title":"OnTestProgramStart {#TestEventListener::OnTestProgramStart}","text":"<p><code>virtual void TestEventListener::OnTestProgramStart(const UnitTest&amp; unit_test)</code></p> <p>Fired before any test activity starts.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestiterationstart-testeventlistenerontestiterationstart","title":"OnTestIterationStart {#TestEventListener::OnTestIterationStart}","text":"<p><code>virtual void TestEventListener::OnTestIterationStart(const UnitTest&amp; unit_test, int iteration)</code></p> <p>Fired before each iteration of tests starts. There may be more than one iteration if <code>GTEST_FLAG(repeat)</code> is set. <code>iteration</code> is the iteration index, starting from 0.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#onenvironmentssetupstart-testeventlisteneronenvironmentssetupstart","title":"OnEnvironmentsSetUpStart {#TestEventListener::OnEnvironmentsSetUpStart}","text":"<p><code>virtual void TestEventListener::OnEnvironmentsSetUpStart(const UnitTest&amp; unit_test)</code></p> <p>Fired before environment set-up for each iteration of tests starts.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#onenvironmentssetupend-testeventlisteneronenvironmentssetupend","title":"OnEnvironmentsSetUpEnd {#TestEventListener::OnEnvironmentsSetUpEnd}","text":"<p><code>virtual void TestEventListener::OnEnvironmentsSetUpEnd(const UnitTest&amp; unit_test)</code></p> <p>Fired after environment set-up for each iteration of tests ends.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestsuitestart-testeventlistenerontestsuitestart","title":"OnTestSuiteStart {#TestEventListener::OnTestSuiteStart}","text":"<p><code>virtual void TestEventListener::OnTestSuiteStart(const TestSuite&amp; test_suite)</code></p> <p>Fired before the test suite starts.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#onteststart-testeventlisteneronteststart","title":"OnTestStart {#TestEventListener::OnTestStart}","text":"<p><code>virtual void TestEventListener::OnTestStart(const TestInfo&amp; test_info)</code></p> <p>Fired before the test starts.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestpartresult-testeventlistenerontestpartresult","title":"OnTestPartResult {#TestEventListener::OnTestPartResult}","text":"<p><code>virtual void TestEventListener::OnTestPartResult(const TestPartResult&amp; test_part_result)</code></p> <p>Fired after a failed assertion or a <code>SUCCEED()</code> invocation. If you want to throw an exception from this function to skip to the next test, it must be an <code>AssertionException</code> or inherited from it.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestend-testeventlistenerontestend","title":"OnTestEnd {#TestEventListener::OnTestEnd}","text":"<p><code>virtual void TestEventListener::OnTestEnd(const TestInfo&amp; test_info)</code></p> <p>Fired after the test ends.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestsuiteend-testeventlistenerontestsuiteend","title":"OnTestSuiteEnd {#TestEventListener::OnTestSuiteEnd}","text":"<p><code>virtual void TestEventListener::OnTestSuiteEnd(const TestSuite&amp; test_suite)</code></p> <p>Fired after the test suite ends.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#onenvironmentsteardownstart-testeventlisteneronenvironmentsteardownstart","title":"OnEnvironmentsTearDownStart {#TestEventListener::OnEnvironmentsTearDownStart}","text":"<p><code>virtual void TestEventListener::OnEnvironmentsTearDownStart(const UnitTest&amp; unit_test)</code></p> <p>Fired before environment tear-down for each iteration of tests starts.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#onenvironmentsteardownend-testeventlisteneronenvironmentsteardownend","title":"OnEnvironmentsTearDownEnd {#TestEventListener::OnEnvironmentsTearDownEnd}","text":"<p><code>virtual void TestEventListener::OnEnvironmentsTearDownEnd(const UnitTest&amp; unit_test)</code></p> <p>Fired after environment tear-down for each iteration of tests ends.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestiterationend-testeventlistenerontestiterationend","title":"OnTestIterationEnd {#TestEventListener::OnTestIterationEnd}","text":"<p><code>virtual void TestEventListener::OnTestIterationEnd(const UnitTest&amp; unit_test, int iteration)</code></p> <p>Fired after each iteration of tests finishes.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#ontestprogramend-testeventlistenerontestprogramend","title":"OnTestProgramEnd {#TestEventListener::OnTestProgramEnd}","text":"<p><code>virtual void TestEventListener::OnTestProgramEnd(const UnitTest&amp; unit_test)</code></p> <p>Fired after all test activities have ended.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testeventlisteners-testeventlisteners","title":"TestEventListeners {#TestEventListeners}","text":"<p><code>::testing::TestEventListeners</code></p> <p>Lets users add listeners to track events in GoogleTest.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-testeventlisteners-public","title":"Public Methods {#TestEventListeners-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#append-testeventlistenersappend","title":"Append {#TestEventListeners::Append}","text":"<p><code>void TestEventListeners::Append(TestEventListener* listener)</code></p> <p>Appends an event listener to the end of the list. GoogleTest assumes ownership of the listener (i.e. it will delete the listener when the test program finishes).</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#release-testeventlistenersrelease","title":"Release {#TestEventListeners::Release}","text":"<p><code>TestEventListener* TestEventListeners::Release(TestEventListener* listener)</code></p> <p>Removes the given event listener from the list and returns it. It then becomes the caller's responsibility to delete the listener. Returns <code>NULL</code> if the listener is not found in the list.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#default_result_printer-testeventlistenersdefault_result_printer","title":"default_result_printer {#TestEventListeners::default_result_printer}","text":"<p><code>TestEventListener* TestEventListeners::default_result_printer() const</code></p> <p>Returns the standard listener responsible for the default console output. Can be removed from the listeners list to shut down default console output. Note that removing this object from the listener list with <code>Release()</code> transfers its ownership to the caller and makes this function return <code>NULL</code> the next time.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#default_xml_generator-testeventlistenersdefault_xml_generator","title":"default_xml_generator {#TestEventListeners::default_xml_generator}","text":"<p><code>TestEventListener* TestEventListeners::default_xml_generator() const</code></p> <p>Returns the standard listener responsible for the default XML output controlled by the <code>--gtest_output=xml</code> flag. Can be removed from the listeners list by users who want to shut down the default XML output controlled by this flag and substitute it with custom one. Note that removing this object from the listener list with <code>Release()</code> transfers its ownership to the caller and makes this function return <code>NULL</code> the next time.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testpartresult-testpartresult","title":"TestPartResult {#TestPartResult}","text":"<p><code>::testing::TestPartResult</code></p> <p>A copyable object representing the result of a test part (i.e. an assertion or an explicit <code>FAIL()</code>, <code>ADD_FAILURE()</code>, or <code>SUCCESS()</code>).</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-testpartresult-public","title":"Public Methods {#TestPartResult-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#type-testpartresulttype","title":"type {#TestPartResult::type}","text":"<p><code>Type TestPartResult::type() const</code></p> <p>Gets the outcome of the test part.</p> <p>The return type <code>Type</code> is an enum defined as follows:</p> <pre><code>enum Type {\n  kSuccess,          // Succeeded.\n  kNonFatalFailure,  // Failed but the test can continue.\n  kFatalFailure,     // Failed and the test should be terminated.\n  kSkip              // Skipped.\n};\n</code></pre>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#file_name-testpartresultfile_name","title":"file_name {#TestPartResult::file_name}","text":"<p><code>const char* TestPartResult::file_name() const</code></p> <p>Gets the name of the source file where the test part took place, or <code>NULL</code> if it's unknown.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#line_number-testpartresultline_number","title":"line_number {#TestPartResult::line_number}","text":"<p><code>int TestPartResult::line_number() const</code></p> <p>Gets the line in the source file where the test part took place, or <code>-1</code> if it's unknown.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#summary-testpartresultsummary","title":"summary {#TestPartResult::summary}","text":"<p><code>const char* TestPartResult::summary() const</code></p> <p>Gets the summary of the failure message.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#message-testpartresultmessage","title":"message {#TestPartResult::message}","text":"<p><code>const char* TestPartResult::message() const</code></p> <p>Gets the message associated with the test part.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#skipped-testpartresultskipped","title":"skipped {#TestPartResult::skipped}","text":"<p><code>bool TestPartResult::skipped() const</code></p> <p>Returns true if and only if the test part was skipped.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#passed-testpartresultpassed","title":"passed {#TestPartResult::passed}","text":"<p><code>bool TestPartResult::passed() const</code></p> <p>Returns true if and only if the test part passed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#nonfatally_failed-testpartresultnonfatally_failed","title":"nonfatally_failed {#TestPartResult::nonfatally_failed}","text":"<p><code>bool TestPartResult::nonfatally_failed() const</code></p> <p>Returns true if and only if the test part non-fatally failed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#fatally_failed-testpartresultfatally_failed","title":"fatally_failed {#TestPartResult::fatally_failed}","text":"<p><code>bool TestPartResult::fatally_failed() const</code></p> <p>Returns true if and only if the test part fatally failed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#failed-testpartresultfailed","title":"failed {#TestPartResult::failed}","text":"<p><code>bool TestPartResult::failed() const</code></p> <p>Returns true if and only if the test part failed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testproperty-testproperty","title":"TestProperty {#TestProperty}","text":"<p><code>::testing::TestProperty</code></p> <p>A copyable object representing a user-specified test property which can be output as a key/value string pair.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-testproperty-public","title":"Public Methods {#TestProperty-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#key-key","title":"key {#key}","text":"<p><code>const char* key() const</code></p> <p>Gets the user-supplied key.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#value-value","title":"value {#value}","text":"<p><code>const char* value() const</code></p> <p>Gets the user-supplied value.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#setvalue-setvalue","title":"SetValue {#SetValue}","text":"<p><code>void SetValue(const std::string&amp; new_value)</code></p> <p>Sets a new value, overriding the previous one.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#testresult-testresult","title":"TestResult {#TestResult}","text":"<p><code>::testing::TestResult</code></p> <p>Contains information about the result of a single test.</p> <p><code>TestResult</code> is not copyable.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#public-methods-testresult-public","title":"Public Methods {#TestResult-public}","text":""},{"location":"build/_deps/googletest-src/docs/reference/testing.html#total_part_count-testresulttotal_part_count","title":"total_part_count {#TestResult::total_part_count}","text":"<p><code>int TestResult::total_part_count() const</code></p> <p>Gets the number of all test parts. This is the sum of the number of successful test parts and the number of failed test parts.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#test_property_count-testresulttest_property_count","title":"test_property_count {#TestResult::test_property_count}","text":"<p><code>int TestResult::test_property_count() const</code></p> <p>Returns the number of test properties.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#passed-testresultpassed","title":"Passed {#TestResult::Passed}","text":"<p><code>bool TestResult::Passed() const</code></p> <p>Returns true if and only if the test passed (i.e. no test part failed).</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#skipped-testresultskipped","title":"Skipped {#TestResult::Skipped}","text":"<p><code>bool TestResult::Skipped() const</code></p> <p>Returns true if and only if the test was skipped.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#failed-testresultfailed","title":"Failed {#TestResult::Failed}","text":"<p><code>bool TestResult::Failed() const</code></p> <p>Returns true if and only if the test failed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#hasfatalfailure-testresulthasfatalfailure","title":"HasFatalFailure {#TestResult::HasFatalFailure}","text":"<p><code>bool TestResult::HasFatalFailure() const</code></p> <p>Returns true if and only if the test fatally failed.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#hasnonfatalfailure-testresulthasnonfatalfailure","title":"HasNonfatalFailure {#TestResult::HasNonfatalFailure}","text":"<p><code>bool TestResult::HasNonfatalFailure() const</code></p> <p>Returns true if and only if the test has a non-fatal failure.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#elapsed_time-testresultelapsed_time","title":"elapsed_time {#TestResult::elapsed_time}","text":"<p><code>TimeInMillis TestResult::elapsed_time() const</code></p> <p>Returns the elapsed time, in milliseconds.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#start_timestamp-testresultstart_timestamp","title":"start_timestamp {#TestResult::start_timestamp}","text":"<p><code>TimeInMillis TestResult::start_timestamp() const</code></p> <p>Gets the time of the test case start, in ms from the start of the UNIX epoch.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#gettestpartresult-testresultgettestpartresult","title":"GetTestPartResult {#TestResult::GetTestPartResult}","text":"<p><code>const TestPartResult&amp; TestResult::GetTestPartResult(int i) const</code></p> <p>Returns the <code>TestPartResult</code> for the <code>i</code>-th test part result among all the results. <code>i</code> can range from 0 to <code>total_part_count() - 1</code>. If <code>i</code> is not in that range, aborts the program.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#gettestproperty-testresultgettestproperty","title":"GetTestProperty {#TestResult::GetTestProperty}","text":"<p><code>const TestProperty&amp; TestResult::GetTestProperty(int i) const</code></p> <p>Returns the <code>TestProperty</code> object for the <code>i</code>-th test property. <code>i</code> can range from 0 to <code>test_property_count() - 1</code>. If <code>i</code> is not in that range, aborts the program.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#timeinmillis-timeinmillis","title":"TimeInMillis {#TimeInMillis}","text":"<p><code>::testing::TimeInMillis</code></p> <p>An integer type representing time in milliseconds.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#types-types","title":"Types {#Types}","text":"<p><code>::testing::Types&lt;T...&gt;</code></p> <p>Represents a list of types for use in typed tests and type-parameterized tests.</p> <p>The template argument <code>T...</code> can be any number of types, for example:</p> <pre><code>::testing::Types&lt;char, int, unsigned int&gt;\n</code></pre> <p>See Typed Tests and Type-Parameterized Tests for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#withparaminterface-withparaminterface","title":"WithParamInterface {#WithParamInterface}","text":"<p><code>::testing::WithParamInterface&lt;T&gt;</code></p> <p>The pure interface class that all value-parameterized tests inherit from.</p> <p>A value-parameterized test fixture class must inherit from both <code>Test</code> and <code>WithParamInterface</code>. In most cases that just means inheriting from <code>TestWithParam</code>, but more complicated test hierarchies may need to inherit from <code>Test</code> and <code>WithParamInterface</code> at different levels.</p> <p>This interface defines the type alias <code>ParamType</code> for the parameter type <code>T</code> and has support for accessing the test parameter value via the <code>GetParam()</code> method:</p> <pre><code>static const ParamType&amp; GetParam()\n</code></pre> <p>For more information, see Value-Parameterized Tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#functions","title":"Functions","text":"<p>GoogleTest defines the following functions to help with writing and running tests.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#initgoogletest-initgoogletest","title":"InitGoogleTest {#InitGoogleTest}","text":"<p><code>void ::testing::InitGoogleTest(int* argc, char** argv)</code> \\ <code>void ::testing::InitGoogleTest(int* argc, wchar_t** argv)</code> \\ <code>void ::testing::InitGoogleTest()</code></p> <p>Initializes GoogleTest. This must be called before calling <code>RUN_ALL_TESTS()</code>. In particular, it parses the command line for the flags that GoogleTest recognizes. Whenever a GoogleTest flag is seen, it is removed from <code>argv</code>, and <code>*argc</code> is decremented.</p> <p>No value is returned. Instead, the GoogleTest flag variables are updated.</p> <p>The <code>InitGoogleTest(int* argc, wchar_t** argv)</code> overload can be used in Windows programs compiled in <code>UNICODE</code> mode.</p> <p>The argument-less <code>InitGoogleTest()</code> overload can be used on Arduino/embedded platforms where there is no <code>argc</code>/<code>argv</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#addglobaltestenvironment-addglobaltestenvironment","title":"AddGlobalTestEnvironment {#AddGlobalTestEnvironment}","text":"<p><code>Environment* ::testing::AddGlobalTestEnvironment(Environment* env)</code></p> <p>Adds a test environment to the test program. Must be called before <code>RUN_ALL_TESTS()</code> is called. See Global Set-Up and Tear-Down for more information.</p> <p>See also <code>Environment</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#registertest-registertest","title":"RegisterTest {#RegisterTest}","text":"<pre><code>template &lt;typename Factory&gt;\nTestInfo* ::testing::RegisterTest(const char* test_suite_name, const char* test_name,\n                                  const char* type_param, const char* value_param,\n                                  const char* file, int line, Factory factory)\n</code></pre> <p>Dynamically registers a test with the framework.</p> <p>The <code>factory</code> argument is a factory callable (move-constructible) object or function pointer that creates a new instance of the <code>Test</code> object. It handles ownership to the caller. The signature of the callable is <code>Fixture*()</code>, where <code>Fixture</code> is the test fixture class for the test. All tests registered with the same <code>test_suite_name</code> must return the same fixture type. This is checked at runtime.</p> <p>The framework will infer the fixture class from the factory and will call the <code>SetUpTestSuite</code> and <code>TearDownTestSuite</code> methods for it.</p> <p>Must be called before <code>RUN_ALL_TESTS()</code> is invoked, otherwise behavior is undefined.</p> <p>See Registering tests programmatically for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#run_all_tests-run_all_tests","title":"RUN_ALL_TESTS {#RUN_ALL_TESTS}","text":"<p><code>int RUN_ALL_TESTS()</code></p> <p>Use this function in <code>main()</code> to run all tests. It returns <code>0</code> if all tests are successful, or <code>1</code> otherwise.</p> <p><code>RUN_ALL_TESTS()</code> should be invoked after the command line has been parsed by <code>InitGoogleTest()</code>.</p> <p>This function was formerly a macro; thus, it is in the global namespace and has an all-caps name.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#assertionsuccess-assertionsuccess","title":"AssertionSuccess {#AssertionSuccess}","text":"<p><code>AssertionResult ::testing::AssertionSuccess()</code></p> <p>Creates a successful assertion result. See <code>AssertionResult</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#assertionfailure-assertionfailure","title":"AssertionFailure {#AssertionFailure}","text":"<p><code>AssertionResult ::testing::AssertionFailure()</code></p> <p>Creates a failed assertion result. Use the <code>&lt;&lt;</code> operator to store a failure message:</p> <pre><code>::testing::AssertionFailure() &lt;&lt; \"My failure message\";\n</code></pre> <p>See <code>AssertionResult</code>.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#staticasserttypeeq-staticasserttypeeq","title":"StaticAssertTypeEq {#StaticAssertTypeEq}","text":"<p><code>::testing::StaticAssertTypeEq&lt;T1, T2&gt;()</code></p> <p>Compile-time assertion for type equality. Compiles if and only if <code>T1</code> and <code>T2</code> are the same type. The value it returns is irrelevant.</p> <p>See Type Assertions for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#printtostring-printtostring","title":"PrintToString {#PrintToString}","text":"<p><code>std::string ::testing::PrintToString(x)</code></p> <p>Prints any value <code>x</code> using GoogleTest's value printer.</p> <p>See Teaching GoogleTest How to Print Your Values for more information.</p>"},{"location":"build/_deps/googletest-src/docs/reference/testing.html#printtostringparamname-printtostringparamname","title":"PrintToStringParamName {#PrintToStringParamName}","text":"<p><code>std::string ::testing::PrintToStringParamName(TestParamInfo&lt;T&gt;&amp; info)</code></p> <p>A built-in parameterized test name generator which returns the result of <code>PrintToString</code> called on <code>info.param</code>. Does not work when the test parameter is a <code>std::string</code> or C string. See Specifying Names for Value-Parameterized Test Parameters for more information.</p> <p>See also <code>TestParamInfo</code> and <code>INSTANTIATE_TEST_SUITE_P</code>.</p>"},{"location":"build/_deps/googletest-src/googlemock/index.html","title":"Googletest Mocking (gMock) Framework","text":""},{"location":"build/_deps/googletest-src/googlemock/index.html#overview","title":"Overview","text":"<p>Google's framework for writing and using C++ mock classes. It can help you derive better designs of your system and write better tests.</p> <p>It is inspired by:</p> <ul> <li>jMock</li> <li>EasyMock</li> <li>Hamcrest</li> </ul> <p>It is designed with C++'s specifics in mind.</p> <p>gMock:</p> <ul> <li>Provides a declarative syntax for defining mocks.</li> <li>Can define partial (hybrid) mocks, which are a cross of real and mock     objects.</li> <li>Handles functions of arbitrary types and overloaded functions.</li> <li>Comes with a rich set of matchers for validating function arguments.</li> <li>Uses an intuitive syntax for controlling the behavior of a mock.</li> <li>Does automatic verification of expectations (no record-and-replay needed).</li> <li>Allows arbitrary (partial) ordering constraints on function calls to be     expressed.</li> <li>Lets a user extend it by defining new matchers and actions.</li> <li>Does not use exceptions.</li> <li>Is easy to learn and use.</li> </ul> <p>Details and examples can be found here:</p> <ul> <li>gMock for Dummies</li> <li>Legacy gMock FAQ</li> <li>gMock Cookbook</li> <li>gMock Cheat Sheet</li> </ul> <p>Please note that code under scripts/generator/ is from the cppclean project and under the Apache License, which is different from GoogleMock's license.</p> <p>GoogleMock is a part of GoogleTest C++ testing framework and a subject to the same requirements.</p>"},{"location":"build/_deps/googletest-src/googlemock/docs/index.html","title":"Content Moved","text":"<p>We are working on updates to the GoogleTest documentation, which has moved to the top-level docs directory.</p>"},{"location":"build/_deps/googletest-src/googlemock/include/gmock/internal/custom/index.html","title":"Customization Points","text":"<p>The custom directory is an injection point for custom user configurations.</p>"},{"location":"build/_deps/googletest-src/googlemock/include/gmock/internal/custom/index.html#header-gmock-porth","title":"Header <code>gmock-port.h</code>","text":"<p>The following macros can be defined:</p>"},{"location":"build/_deps/googletest-src/googlemock/include/gmock/internal/custom/index.html#flag-related-macros","title":"Flag related macros:","text":"<ul> <li><code>GMOCK_DECLARE_bool_(name)</code></li> <li><code>GMOCK_DECLARE_int32_(name)</code></li> <li><code>GMOCK_DECLARE_string_(name)</code></li> <li><code>GMOCK_DEFINE_bool_(name, default_val, doc)</code></li> <li><code>GMOCK_DEFINE_int32_(name, default_val, doc)</code></li> <li><code>GMOCK_DEFINE_string_(name, default_val, doc)</code></li> </ul>"},{"location":"build/_deps/googletest-src/googlemock/scripts/index.html","title":"Please Note:","text":"<p>Files in this directory are no longer supported by the maintainers. They represent mostly historical artifacts and supported by the community only. There is no guarantee whatsoever that these scripts still work.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html","title":"Index","text":""},{"location":"build/_deps/googletest-src/googletest/index.html#generic-build-instructions","title":"Generic Build Instructions","text":""},{"location":"build/_deps/googletest-src/googletest/index.html#setup","title":"Setup","text":"<p>To build GoogleTest and your tests that use it, you need to tell your build system where to find its headers and source files. The exact way to do it depends on which build system you use, and is usually straightforward.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#build-with-cmake","title":"Build with CMake","text":"<p>GoogleTest comes with a CMake build script (CMakeLists.txt) that can be used on a wide range of platforms (\"C\" stands for cross-platform.). If you don't have CMake installed already, you can download it for free from http://www.cmake.org/.</p> <p>CMake works by generating native makefiles or build projects that can be used in the compiler environment of your choice. You can either build GoogleTest as a standalone project or it can be incorporated into an existing CMake build for another project.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#standalone-cmake-project","title":"Standalone CMake Project","text":"<p>When building GoogleTest as a standalone project, the typical workflow starts with</p> <pre><code>git clone https://github.com/google/googletest.git -b release-1.10.0\ncd googletest        # Main directory of the cloned repository.\nmkdir build          # Create a directory to hold the build output.\ncd build\ncmake ..             # Generate native build scripts for GoogleTest.\n</code></pre> <p>The above command also includes GoogleMock by default. And so, if you want to build only GoogleTest, you should replace the last command with</p> <pre><code>cmake .. -DBUILD_GMOCK=OFF\n</code></pre> <p>If you are on a *nix system, you should now see a Makefile in the current directory. Just type <code>make</code> to build GoogleTest. And then you can simply install GoogleTest if you are a system administrator.</p> <pre><code>make\nsudo make install    # Install in /usr/local/ by default\n</code></pre> <p>If you use Windows and have Visual Studio installed, a <code>gtest.sln</code> file and several <code>.vcproj</code> files will be created. You can then build them using Visual Studio.</p> <p>On Mac OS X with Xcode installed, a <code>.xcodeproj</code> file will be generated.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#incorporating-into-an-existing-cmake-project","title":"Incorporating Into An Existing CMake Project","text":"<p>If you want to use GoogleTest in a project which already uses CMake, the easiest way is to get installed libraries and headers.</p> <ul> <li>Import GoogleTest by using <code>find_package</code> (or <code>pkg_check_modules</code>). For     example, if <code>find_package(GTest CONFIG REQUIRED)</code> succeeds, you can use the     libraries as <code>GTest::gtest</code>, <code>GTest::gmock</code>.</li> </ul> <p>And a more robust and flexible approach is to build GoogleTest as part of that project directly. This is done by making the GoogleTest source code available to the main build and adding it using CMake's <code>add_subdirectory()</code> command. This has the significant advantage that the same compiler and linker settings are used between GoogleTest and the rest of your project, so issues associated with using incompatible libraries (eg debug/release), etc. are avoided. This is particularly useful on Windows. Making GoogleTest's source code available to the main build can be done a few different ways:</p> <ul> <li>Download the GoogleTest source code manually and place it at a known     location. This is the least flexible approach and can make it more difficult     to use with continuous integration systems, etc.</li> <li>Embed the GoogleTest source code as a direct copy in the main project's     source tree. This is often the simplest approach, but is also the hardest to     keep up to date. Some organizations may not permit this method.</li> <li>Add GoogleTest as a git submodule or equivalent. This may not always be     possible or appropriate. Git submodules, for example, have their own set of     advantages and drawbacks.</li> <li>Use CMake to download GoogleTest as part of the build's configure step. This     approach doesn't have the limitations of the other methods.</li> </ul> <p>The last of the above methods is implemented with a small piece of CMake code that downloads and pulls the GoogleTest code into the main build.</p> <p>Just add to your <code>CMakeLists.txt</code>:</p> <pre><code>include(FetchContent)\nFetchContent_Declare(\n  googletest\n  # Specify the commit you depend on and update it regularly.\n  URL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n\n# Now simply link against gtest or gtest_main as needed. Eg\nadd_executable(example example.cpp)\ntarget_link_libraries(example gtest_main)\nadd_test(NAME example_test COMMAND example)\n</code></pre> <p>Note that this approach requires CMake 3.14 or later due to its use of the <code>FetchContent_MakeAvailable()</code> command.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#visual-studio-dynamic-vs-static-runtimes","title":"Visual Studio Dynamic vs Static Runtimes","text":"<p>By default, new Visual Studio projects link the C runtimes dynamically but GoogleTest links them statically. This will generate an error that looks something like the following: gtest.lib(gtest-all.obj) : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MTd_StaticDebug' doesn't match value 'MDd_DynamicDebug' in main.obj</p> <p>GoogleTest already has a CMake option for this: <code>gtest_force_shared_crt</code></p> <p>Enabling this option will make gtest link the runtimes dynamically too, and match the project in which it is included.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#c-standard-version","title":"C++ Standard Version","text":"<p>An environment that supports C++11 is required in order to successfully build GoogleTest. One way to ensure this is to specify the standard in the top-level project, for example by using the <code>set(CMAKE_CXX_STANDARD 11)</code> command. If this is not feasible, for example in a C project using GoogleTest for validation, then it can be specified by adding it to the options for cmake via the <code>DCMAKE_CXX_FLAGS</code> option.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#tweaking-googletest","title":"Tweaking GoogleTest","text":"<p>GoogleTest can be used in diverse environments. The default configuration may not work (or may not work well) out of the box in some environments. However, you can easily tweak GoogleTest by defining control macros on the compiler command line. Generally, these macros are named like <code>GTEST_XYZ</code> and you define them to either 1 or 0 to enable or disable a certain feature.</p> <p>We list the most frequently used macros below. For a complete list, see file include/gtest/internal/gtest-port.h.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#multi-threaded-tests","title":"Multi-threaded Tests","text":"<p>GoogleTest is thread-safe where the pthread library is available. After <code>#include \"gtest/gtest.h\"</code>, you can check the <code>GTEST_IS_THREADSAFE</code> macro to see whether this is the case (yes if the macro is <code>#defined</code> to 1, no if it's undefined.).</p> <p>If GoogleTest doesn't correctly detect whether pthread is available in your environment, you can force it with</p> <pre><code>-DGTEST_HAS_PTHREAD=1\n</code></pre> <p>or</p> <pre><code>-DGTEST_HAS_PTHREAD=0\n</code></pre> <p>When GoogleTest uses pthread, you may need to add flags to your compiler and/or linker to select the pthread library, or you'll get link errors. If you use the CMake script, this is taken care of for you. If you use your own build script, you'll need to read your compiler and linker's manual to figure out what flags to add.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#as-a-shared-library-dll","title":"As a Shared Library (DLL)","text":"<p>GoogleTest is compact, so most users can build and link it as a static library for the simplicity. You can choose to use GoogleTest as a shared library (known as a DLL on Windows) if you prefer.</p> <p>To compile gtest as a shared library, add</p> <pre><code>-DGTEST_CREATE_SHARED_LIBRARY=1\n</code></pre> <p>to the compiler flags. You'll also need to tell the linker to produce a shared library instead - consult your linker's manual for how to do it.</p> <p>To compile your tests that use the gtest shared library, add</p> <pre><code>-DGTEST_LINKED_AS_SHARED_LIBRARY=1\n</code></pre> <p>to the compiler flags.</p> <p>Note: while the above steps aren't technically necessary today when using some compilers (e.g. GCC), they may become necessary in the future, if we decide to improve the speed of loading the library (see http://gcc.gnu.org/wiki/Visibility for details). Therefore you are recommended to always add the above flags when using GoogleTest as a shared library. Otherwise a future release of GoogleTest may break your build script.</p>"},{"location":"build/_deps/googletest-src/googletest/index.html#avoiding-macro-name-clashes","title":"Avoiding Macro Name Clashes","text":"<p>In C++, macros don't obey namespaces. Therefore two libraries that both define a macro of the same name will clash if you <code>#include</code> both definitions. In case a GoogleTest macro clashes with another library, you can force GoogleTest to rename its macro to avoid the conflict.</p> <p>Specifically, if both GoogleTest and some other code define macro FOO, you can add</p> <pre><code>-DGTEST_DONT_DEFINE_FOO=1\n</code></pre> <p>to the compiler flags to tell GoogleTest to change the macro's name from <code>FOO</code> to <code>GTEST_FOO</code>. Currently <code>FOO</code> can be <code>FAIL</code>, <code>SUCCEED</code>, or <code>TEST</code>. For example, with <code>-DGTEST_DONT_DEFINE_TEST=1</code>, you'll need to write</p> <pre><code>GTEST_TEST(SomeTest, DoesThis) { ... }\n</code></pre> <p>instead of</p> <pre><code>TEST(SomeTest, DoesThis) { ... }\n</code></pre> <p>in order to define a test.</p>"},{"location":"build/_deps/googletest-src/googletest/docs/index.html","title":"Content Moved","text":"<p>We are working on updates to the GoogleTest documentation, which has moved to the top-level docs directory.</p>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html","title":"Customization Points","text":"<p>The custom directory is an injection point for custom user configurations.</p>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#header-gtesth","title":"Header <code>gtest.h</code>","text":""},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#the-following-macros-can-be-defined","title":"The following macros can be defined:","text":"<ul> <li><code>GTEST_OS_STACK_TRACE_GETTER_</code> - The name of an implementation of     <code>OsStackTraceGetterInterface</code>.</li> <li><code>GTEST_CUSTOM_TEMPDIR_FUNCTION_</code> - An override for <code>testing::TempDir()</code>. See     <code>testing::TempDir</code> for semantics and signature.</li> </ul>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#header-gtest-porth","title":"Header <code>gtest-port.h</code>","text":"<p>The following macros can be defined:</p>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#flag-related-macros","title":"Flag related macros:","text":"<ul> <li><code>GTEST_FLAG(flag_name)</code></li> <li><code>GTEST_USE_OWN_FLAGFILE_FLAG_</code> - Define to 0 when the system provides its     own flagfile flag parsing.</li> <li><code>GTEST_DECLARE_bool_(name)</code></li> <li><code>GTEST_DECLARE_int32_(name)</code></li> <li><code>GTEST_DECLARE_string_(name)</code></li> <li><code>GTEST_DEFINE_bool_(name, default_val, doc)</code></li> <li><code>GTEST_DEFINE_int32_(name, default_val, doc)</code></li> <li><code>GTEST_DEFINE_string_(name, default_val, doc)</code></li> </ul>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#logging","title":"Logging:","text":"<ul> <li><code>GTEST_LOG_(severity)</code></li> <li><code>GTEST_CHECK_(condition)</code></li> <li>Functions <code>LogToStderr()</code> and <code>FlushInfoLog()</code> have to be provided too.</li> </ul>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#threading","title":"Threading:","text":"<ul> <li><code>GTEST_HAS_NOTIFICATION_</code> - Enabled if Notification is already provided.</li> <li><code>GTEST_HAS_MUTEX_AND_THREAD_LOCAL_</code> - Enabled if <code>Mutex</code> and <code>ThreadLocal</code>     are already provided. Must also provide <code>GTEST_DECLARE_STATIC_MUTEX_(mutex)</code>     and <code>GTEST_DEFINE_STATIC_MUTEX_(mutex)</code></li> <li><code>GTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)</code></li> <li><code>GTEST_LOCK_EXCLUDED_(locks)</code></li> </ul>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#underlying-library-support-features","title":"Underlying library support features","text":"<ul> <li><code>GTEST_HAS_CXXABI_H_</code></li> </ul>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#exporting-api-symbols","title":"Exporting API symbols:","text":"<ul> <li><code>GTEST_API_</code> - Specifier for exported symbols.</li> </ul>"},{"location":"build/_deps/googletest-src/googletest/include/gtest/internal/custom/index.html#header-gtest-printersh","title":"Header <code>gtest-printers.h</code>","text":"<ul> <li>See documentation at <code>gtest/gtest-printers.h</code> for details on how to define a     custom printer.</li> </ul>"},{"location":"build/_deps/googletest-src/googletest/scripts/index.html","title":"Please Note:","text":"<p>Files in this directory are no longer supported by the maintainers. They represent mosty historical artifacts and supported by the community only. There is no guarantee whatsoever that these scripts still work.</p>"},{"location":"build/build_instructions/from_source.html","title":"Building from source","text":""},{"location":"build/build_instructions/from_source.html#out-of-source-builds","title":"Out-of-source builds","text":"<p>We follow the CMake convention by only encouraging \"out-of-source\" builds, hence the reason for this build directory existing. This directory exists only for manual building and testing with <code>cmake</code> et al.</p> <p>To build the project:</p> <pre><code>cd build\ncmake .. \nmake \npip3 install .. \nctest \n</code></pre> <p>Note</p> <p><code>make test</code> and <code>ctest</code> are synonymous.</p> <p>Running things in parallel</p> <p><code>cmake</code>, <code>ctest</code>, and <code>make</code> can all use multiple cores,  to speed things up, typically by adding a <code>-j &lt;N&gt;</code> or  <code>--parallel &lt;N&gt;</code> flag. </p> <p>The reason we install the Python package is because many of our tests are Python based as well, including several  C extensions and various Python modules we have created.  Hence, without this step, the various Python imports won't work correctly and many of the tests can be expected to fail. </p>"},{"location":"build/build_instructions/from_source.html#modern-c23-compilers","title":"Modern C23 compilers","text":"<p>We are trying to use a very modern C standard (C23 is brand new at the time of writing), and compiler support for this is very limited. To ensure <code>cmake</code> can find a sufficiently new compiler version, it may be necessary to hard wire paths to these in your invocation of <code>cmake</code>, e.g.:</p> <pre><code>cmake -D CMAKE_C_COMPILER=/usr/local/Cellar/gcc/13.1.0/bin/gcc-13 -D CMAKE_CXX_COMPILER=/usr/local/Cellar/gcc/13.1.0/bin/g++-13 ..\n</code></pre>"},{"location":"build/build_instructions/from_source.html#debugging","title":"Debugging","text":"<p>If any tests are failing, then these can be debugged further by running</p> <pre><code>ctest --rerun-failed --output-on-failure\n</code></pre>"},{"location":"build/build_instructions/from_source.html#demo","title":"Demo","text":""},{"location":"build/build_instructions/in_source.html","title":"In source builds","text":""},{"location":"build/build_instructions/in_source.html#why-allow-in-source-builds","title":"Why allow in source builds?","text":"<p>In source builds are largely discouraged, and are only  recommended for use by developers. The reason we support this  for developers is to populate the source directory with various  generated files, libraries, etc. The use of this is for example: placing python extension libraries in the source directory.  This allowed for them to be picked up by an interpreter which can point to the in source code, rather than what is  produced by the scikit build procedure. This means code which is under development can be more easily accessed by an IDE or interpreter. </p>"},{"location":"build/build_instructions/in_source.html#making-in-source-builds","title":"Making in source builds","text":"<p>From the projects root directory run </p> <pre><code>cmake .\nmake \nmake install\nmake test \n</code></pre> <p>Note</p> <p>This is run from the project's root directory, not from a  separate dedicated build directory.</p>"},{"location":"build/build_instructions/in_source.html#cleaning-everything-up","title":"Cleaning everything up","text":"<p>To clean everything up, run </p> <pre><code>make clean\n./cmake_uninstall.sh\n</code></pre>"},{"location":"build/build_instructions/in_source.html#adjusting-your-pythonpath","title":"Adjusting your <code>PYTHONPATH</code>","text":"<p>If you plan on testing out the code using the source code in  the repository, such as for use in a terminal setting or an  IDE, then it might be useful to add the contents of <code>src/</code> to your <code>PYTHONPATH</code> environment variable. To do just this we have the script <code>add_src_to_python_path.sh</code> which can be run  from the project's root directory by calling:</p> <pre><code>source add_src_to_python_path.sh\n</code></pre>"},{"location":"build/build_instructions/python_bindings.html","title":"Python bindings","text":"<p>We have setup this project to wrap some of the various C/C++ libraries with Python bindings. To install these, run</p> <pre><code>cd build\npip3 install ..\n</code></pre> <p>This will call <code>scikit-build</code>, which in turn will invoke  CMake, and build the whole project. After this, you can then  also run the usual </p> <pre><code>make\nctest\n</code></pre>"},{"location":"data/index.html","title":"Data","text":"<p>This is where we will store most of our data. The contents of this directory will largely be untracked. </p>"},{"location":"data/videos/index.html","title":"Uploading media","text":"<p>We use the uploading trick detailed here. Also, we often convert videos into gifs using the shell script <code>video_to_gif.sh</code>.</p>"},{"location":"docs/advanced.html","title":"Advanced","text":""},{"location":"docs/advanced.html#updating-the-git-versions-and-releases","title":"Updating the git versions and releases","text":"<p>To list the git version tags: </p> <pre><code>git tag -l\n</code></pre> <p>To add a tag use:</p> <pre><code>git tag -a &lt;vX.Y.Z&gt; -m \"&lt;SOME BRIEF MESSAGE&gt;\"\n</code></pre> <p>The tag then needs to be pushed:</p> <pre><code>git push --tags\n</code></pre> <p>To set a release with a tag:</p> <pre><code>gh release create $(git describe --tags --abbrev=0)\n</code></pre>"},{"location":"docs/advanced.html#updating-the-remote-documentation","title":"Updating the remote documentation.","text":"<p>To update the documentation hosted remotely (e.g. on GitHub Pages),  then on <code>master</code> we need to redeploy the documents after  the most relevant commit by calling:</p> <pre><code>mkdocs gh-deploy --clean\n</code></pre>"},{"location":"docs/dependencies.html","title":"Dependencies","text":""},{"location":"docs/dependencies.html#list-of-dependencies","title":"List of dependencies","text":"<p>The project relies on a few dependencies, the most notable of which include:</p>"},{"location":"docs/dependencies.html#the-source-code","title":"The source code","text":"<ul> <li>GCC (with C23 and C++23 support).</li> <li>CMake (for building).</li> <li>GLIB (for logging).</li> <li>Argp (for the CLI).</li> <li>Criterion (for testing).</li> </ul>"},{"location":"docs/dependencies.html#python-bindings","title":"Python bindings","text":"<ul> <li>scikit-build (for Python bindings).</li> </ul>"},{"location":"docs/dependencies.html#the-documentation","title":"The documentation","text":"<ul> <li>mkdocs (for documentation).<ul> <li>mkdocs-same-dir.</li> <li>mkdocs-awesome-pages-plugin.</li> <li>mkdocs-exclude</li> <li>pillow cairosvg</li> <li>mkdocs-git-revision-date-localized-plugin</li> <li>mkdocs-git-committers-plugin-2</li> </ul> </li> <li>github command line tools <code>gh</code></li> </ul>"},{"location":"docs/dependencies.html#installation","title":"Installation","text":"<p>Most of these can be installed either through <code>pip</code> or <code>brew</code> or similar. </p>"},{"location":"docs/dependencies.html#virtual-environments","title":"Virtual environments","text":"<p>In our setup, we use a Python-3.11 based virtual environment based in the root directory of the project. </p>"},{"location":"docs/faqs.html","title":"Frequently asked questions","text":""},{"location":"docs/faqs.html#i-cant-build-with-gcc-on-mac-osx","title":"I can't build with GCC on Mac OSX","text":"<p>On newer versions of Mac the latest versions of Clang use the <code>libc++</code> implementation of the C++ standard library, whereas GCC uses <code>libstdc++</code>, which does not have as much newer C++11 feature support. There is an ABI incompatability between the two,  so on Mac something compiled with Clang can't be linked with something  compiled with GCC, because they use two differing implementations  of the C++ standard library. (On Linux both compilers use <code>libc++</code> so this isn't as much of an issue).</p> <p>Consequently, if on your Mac you install some standard libraries, such as  e.g. Boost, which might contain non-header-only (e.g. program options),  then on Mac then brew will likely default to Clang. This can start to lead down a rabit hole of trying to compile everything with differing compilers and standard library versions. </p> <p>Currently, the authors, who develop this on a Mac, haven't found a nice solution for this. Consequently, on Mac, we recommend using the Clang  compiler suite as it has better native support. </p>"},{"location":"docs/getting_started.html","title":"Getting started","text":""},{"location":"docs/getting_started.html#downloading-the-repo","title":"Downloading the repo","text":"<p>To download the repo run</p> <pre><code>git clone https://github.com/oliversheridanmethven/testing.git\n</code></pre>"},{"location":"docs/getting_started.html#dependencies","title":"Dependencies","text":"<p>The dependencies and details about their installation can be found in Dependencies.</p>"},{"location":"docs/getting_started.html#building-the-latest-documentation","title":"Building the latest documentation","text":"<p>In the project's root directory, run:</p> <pre><code>mkdocs build\n</code></pre> <p>The documentation can now be found under <code>site/</code> and opened in your browser. </p> <p>Alternatively, you can launch your own server by running </p> <pre><code>mike serve\n</code></pre> <p>and clicking the link to the server is has created. (Typically this is e.g. http://127.0.0.1:8000/ ).</p>"},{"location":"docs/todo.html","title":"TODO","text":"<p>There are various things I would like to add to this repo, including:</p> <ul> <li>Git hooks:</li> <li>Publishing documentation. </li> <li>Generating code documentation with MkDoxy2. <ul> <li>Add C/C++ code documentation with Doxygen. </li> </ul> </li> <li>Ensuring build succeeds and tests pass. </li> <li>Assert compiler requirements. </li> <li>Ship with dependencies. </li> <li>Add code formatter (e.g. clangd).</li> </ul>"},{"location":"lib/index.html","title":"Libraries","text":"<p>This folder exists for developers to put shared library  and archive objects produced from in source builds. </p>"},{"location":"src/index.html","title":"Source","text":"<p>This is where we keep various the libraries. </p>"},{"location":"src/binding/index.html","title":"Binding","text":"<p>A simple hello world example showing how to bind our C code  for use in Python. </p>"},{"location":"src/binding/index.html#conventions","title":"Conventions","text":"<p>For simplicity (and ease of consistency) we will adopt the following principles when constructing our C libraries and possible Python bindings. </p>"},{"location":"src/binding/index.html#error-checking-and-handling","title":"Error checking and handling","text":"<p>We will have a mix of C and Python libraries, designed to interoperate and also still function independently. Consequently,  there is a grey area in the responsibility for error handling, with the following possibilities:</p> <ul> <li> <p>Have the C libraries try to check and recover from errors. (Made tricky by the limited error handling in C). </p> </li> <li> <p>Have the C libraries make no attempt at error handling.</p> </li> <li> <p>Have the C extension wrappers try and check  the Python input after it has been passed to the C library.</p> </li> <li> <p>Have the Python library check all the input before it gets passed to the C library. </p> </li> <li> <p>No error checking anywhere.</p> </li> <li> <p>etc.</p> </li> </ul> <p>Clearly there are various options. </p>"},{"location":"src/binding/index.html#type-errors","title":"Type errors","text":"<p>For type checking we will largely rely on the type system of C and the compilation rules. For Python, where necessary,  we will rely on the Python code to assert the validity of any data types before they are passed to the C libraries. For the boundary of these two languages, we will rely on the  error handling of the python argument and keyword parser.</p> <p>There is a grey area in between where one language must  respect or acknowledge the rules of the other, such as  a Python integer being represented as a <code>long</code>, but the  corresponding Python function expecting an <code>int</code>, where these two might be of different sizes. Here, we will largely put the emphasis on Python to ensure C is happy, as this  is typically easier to code and enforce.  </p>"},{"location":"src/binding/index.html#runtime-errors","title":"Runtime errors","text":"<p>Sometimes codes fail for internal problems. An example might be a quadratic solver which finds the real roots  of polynomials and presented with one with complex roots.  Another might be a request for more memory by <code>malloc</code>  failing, not finding a file, a write to some output  failing (<code>printf</code> can fail), or a matrix inversion not being possible. In most of these cases, we generally want to avoid the responsibility of error handling, and  we adopt the mentality \"if something untoward has happened,  then let the program crash and fail in a fast and loud  way...\" (we may try and also do this gracefully  where possible). In C this will generally mean an immediate call to <code>exit</code>.</p>"},{"location":"src/binding/index.html#splitting-into-two-libraries","title":"Splitting into two libraries","text":"<p>We follow the convention that for some library, we split this into its core functionality, which contains all the core C functionality and no Python, and a second library which only implements the Python interface. </p>"},{"location":"src/binding/index.html#failing-to-link-to-python-c-extension-libraries-on-mac-osx","title":"Failing to link to Python C extension libraries on Mac OSX","text":"<p>One of the reasons we split the functionality into two libraries, (aside from a more modularity), is because the Python build  proceedure typically produces bundles, whereas our  C libraries are typically producing dynamic libraries. This can  lead to linking errors. </p>"},{"location":"src/binding/index.html#putting-module-libraries-in-their-own-directory","title":"Putting module libraries in their own directory","text":"<p>To keep a nice modular structure where the C extensions match  the style of Python modules, put any C extensions in their own subdirectory which would be the equivalent of a single python file.</p>"},{"location":"src/binding/benchmarks/index.html","title":"Benchmarking","text":"<p>A small suite showing how to benchmark various function, either coming from pure Python or their  C extensions. (Hopefully C will always be faster...).</p>"},{"location":"src/cli/index.html","title":"Command line interface","text":"<p>This library demonstrates how to use a  command line interface. The tool underlying this is the Argp  library provided by GNU. </p>"},{"location":"src/error_codes/index.html","title":"Error codes","text":"<p>A basic library to introduce error codes and some associated  functionality. Unfortunately, the C type safety for using  these is not perfect.</p>"},{"location":"src/hello_world/index.html","title":"Hello world","text":"<p>A simple hello world program. </p>"},{"location":"src/logging/index.html","title":"Logging","text":"<p>A simple logging library. This is a wrapper around the GLib library.</p>"},{"location":"src/media/index.html","title":"Media","text":"<p>A collection of tools for working with media, such as images and videos. </p>"},{"location":"src/media/index.html#ascii","title":"ASCII","text":""},{"location":"src/media/index.html#images","title":"Images","text":"<p>We have a tool which can convert images to ASCII in <code>images.py</code>.</p> <p> </p>"},{"location":"src/media/index.html#video","title":"Video","text":"<p>We have a small command line tool which displays the webcam feed as an ASCII image. </p> <p></p>"},{"location":"src/media/index.html#sixel","title":"Sixel","text":"<p>Try Sixel</p> <p>Sixel is a nice way to show graphics in the terminal window. It would be very interesting to see if I can get my application to support this. </p>"},{"location":"src/rubik/index.html","title":"Rubik","text":"<p>Here we collect together some code which solves Rubik style puzzles. </p>"},{"location":"src/rubik/index.html#turning-conventions","title":"Turning conventions","text":""},{"location":"src/rubik/index.html#invariants","title":"Invariants","text":""},{"location":"src/rubik/index.html#faces-and-underlying-arrays","title":"Faces and underlying arrays","text":"<p>We generally allow two methods for describing arrays.</p> <ol> <li> <p>Faces:     For a better user experience we have the faces syntax,      where for a given face on our shape, we split this up into     rows and columns, where these are stored in nested lists.     These can be accessed via the syntax:     <code>python     shape[face][row][column] = &lt;tile_value&gt;</code>     We keep this for a kinder user experience when printing objects,     debugging, and as a slight artifact of the first implementations.</p> </li> <li> <p>Arrays:     The various nested lists that form the faces description can be flattened     to a single contiguous array of the tile values. This array      representation is used internally to store the tile values, and     perform the various moves which permute the tiles. </p> </li> </ol> <p>Only the arrays are guaranteed to be correct</p> <p>When we perform the various permuting moves, we only shuffle the values stored in the underlying array. We do not  touch the values in the nest list faces variable. This is for performance reasons. Only when we go to do a few operations (such as printing) will we update and correct the faces variable. Otherwise consider these to be \"outdated\" unless you explicitly  request for them to be updated. </p>"},{"location":"src/rubik/index.html#invariant-pieces","title":"Invariant pieces","text":"<p>By construction, we define all our moves from the frame of reference of the piece whose tile is at the <code>[0][0][0]</code> faces position. This  means that none of the moves are allowed to move this piece.  </p>"},{"location":"src/rubik/index.html#reversibility","title":"Reversibility","text":"<p>All the moves must be reversible. The reverse of one move can (and almost surely will be) on of the other possible moves.</p> <p>If we were to allow moves which are not trivially reversible, then this would at least require that the \"reverse\" of one move must be able to be mapped to another one of the moves. (In fact, for performance this might be the best implementation as it avoids conditional code execution, at the expense of holding one tiny array in memory).</p>"},{"location":"src/rubik/index.html#counting-quarter-turns-and-half-turns","title":"Counting quarter turns and half turns","text":"<p>Considering the standard Rubik cube, there is a counting issue about whether to allow a half rotation as a single move, or two count it as two quarter rotations. </p> <p>For our purposes, we consider it a separate move. This generally means that when we iterate through what possible configurations can be achieved, our search space grows quicker, but should generally require fewer iterations. The benefit of fewer iterations is that the frequency with which we collide with previously  encountered configurations should be less. </p>"},{"location":"src/rubik/index.html#solving-the-2x2-rubik-cube","title":"Solving the 2x2 Rubik Cube","text":"<p>For the 2x2 Rubik cube (which we call a \"<code>Volume</code>\"), we can usually solve this in about 1-2 seconds, (it also depends how many checks and assertions our code has in its hot path):</p> <pre><code>(venv) oliver testing $ multitime -n 50  src/rubik/solvers/demo.py --meet_in_middle \n===&gt; multitime results                                                                                                                                                                              \n1: src/rubik/solvers/demo.py --meet_in_middle\n            Mean                Std.Dev.    Min         Median      Max\nreal        1.253+/-0.3383      0.929       0.222       0.713       3.965  \n</code></pre>"},{"location":"src/testing/index.html","title":"Testing","text":"<p>A library providing a unit testing framework. The underlying C testing framework uses Criterion, and for Python unittest.</p>"},{"location":"src/testing/tests/index.html","title":"Tests","text":"<p>Here we provide an example of how to write unit tests. </p>"},{"location":"src/version/index.html","title":"Version","text":"<p>This is a small header onlly library which can be included to retreive info about the version of this repository. </p>"}]}